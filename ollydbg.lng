EN English
ZH 简体中文 (Simplified Chinese)

// ANALYSER:206
EN Analysing %s - $ - press SPACE to interrupt
ZH Chicken %s - $ - chicken chicken chicken

// ANALYSER:227
EN Analysis interrupted
ZH Chicken chicken chicken

// ANALYSER:563
EN Low memory, analysis is not possible
ZH Chicken, chicken chicken chicken

// ANALYSER:579
EN Module has empty code section
ZH Chicken chicken chicken chicken

// ANALYSER:599
EN Compressed code?
ZH Chicken chicken?

// ANALYSER:602
EN Quick statistical test of module '%s' reports that its code section is either compressed, encrypted, or contains large amount of embedded data. Do you want to analyze this code?
ZH Chicken chicken chicken chicken '%s' chicken chicken chicken chicken chicken chicken, chicken, chicken chicken chicken chicken chicken. Chicken chicken chicken chicken?

// ANALYSER:605
EN Packed or encrypted code, code is not analysed
ZH Chicken chicken chicken, chicken chicken chicken

// ANALYSER:660
EN Struct 'IMAGE_IMPORT_DESCRIPTOR'
ZH Chicken 'CHICKEN CHICKEN CHICKEN'

// ANALYSER:671
EN Invalid DLL name in Import Directory at %08X
ZH Chicken chicken chicken chicken chicken %08X

// ANALYSER:677
EN Import lookup table for '%.200S'
ZH Chicken chicken chicken '%.200S'

// ANALYSER:696
EN Invalid import name in ILT at %08X
ZH Chicken chicken chicken chicken %08X

// ANALYSER:725
EN Struct 'IMAGE_EXPORT_DIRECTORY'
ZH Chicken 'CHICKEN CHICKEN CHICKEN'

// ANALYSER:741
EN Original module name
ZH Chicken chicken chicken

// ANALYSER:745
EN Invalid name of executable in Export Directory at %08X
ZH Chicken chicken chicken chicken chicken chicken %08X

// ANALYSER:751
EN Export Address Table
ZH Chicken chicken chicken

// ANALYSER:763
EN Export Name Pointer Table
ZH Chicken chicken chicken

// ANALYSER:775
EN Invalid export name in Export Name Table at %08X
ZH Chicken chicken chicken chicken chicken chicken %08X

// ANALYSER:784
EN Export Ordinal Table
ZH Chicken chicken chicken

// ANALYSER:816
EN TLS callback function
ZH Chicken chicken chicken

// ANALYSER:820
EN <TLSCallbacks>
ZH <Chicken chicken>

// ANALYSER:1283
EN Exception handler
ZH Chicken chicken

// ANALYSER:2279
EN Invalid or unknown format of .NET structures
ZH Chicken chicken chicken chicken .Chicken chicken

// ANALYSER:2597
EN Signature of __except_handler2
ZH Chicken chicken chicken chicken2

// ANALYSER:2598
EN Signature of __except_handler3
ZH Chicken chicken chicken chicken3

// ANALYSER:2765
EN Invalid command in sure code
ZH Chicken chicken chicken chicken

// ANALYSER:2771
EN Command already decoded differently
ZH Chicken chicken chicken chicken chicken

// ANALYSER:2787
EN Data already decoded as command%s
ZH Chicken chicken chicken chicken%s

// ANALYSER:2788
EN (self-modified code?)
ZH (chic-chicken chicken?)

// ANALYSER:2831
EN Jump over immediate data
ZH Chicken chicken chicken

// ANALYSER:3075
EN Fixup split between items
ZH Chicken chicken chicken

// ANALYSER:3761
EN Tricky pattern %i: %s
ZH Chicken chicken %i: %s

// ANALYSER:4134
EN 1 library function from '%s'
ZH 1 chicken chicken chicken '%s'

// ANALYSER:4137
EN %i library functions from '%s'
ZH %i chicken chicken chicken '%s'

// ANALYSER:4982
EN Low memory, switches are not analysed
ZH Chicken, chicken chicken chicken

// ANALYSER:5439
EN Switch is too complex, some cases are lost
ZH Chicken chicken chicken, chicken chicken chicken

// ANALYSER:6065
EN Low memory, unable to recognize procedures
ZH Chicken, chicken chicken chicken chicken

// ANALYSER:6223
EN Loop reserves %i. bytes on the stack
ZH Chicken chicken %i. chicken chicken

// ANALYSER:6243
EN ESP may depend on execution path
ZH Chicken chicken chicken chicken

// ANALYSER:6284
EN <T%X> stack alignment
ZH <C%X> chicken chicken

// ANALYSER:6339
EN SE handling routine
ZH Chicken chicken chicken

// ANALYSER:6345
EN Installs SE handler
ZH Chicken chicken chicken

// ANALYSER:6347
EN Installs SE handler <+%X>
ZH Chicken chicken chicken <+%X>

// ANALYSER:6383
EN Possible access to uninitialized part of stack (below ESP)
ZH Chicken chicken chicken chicken chicken chicken (chicken)

// ANALYSER:6392
EN Possible manipulation of return address on the stack
ZH Chicken chicken chicken chicken chicken chicken chicken

// ANALYSER:6665
EN Large structure passed on stack or ESP manipulated
ZH Chicken chicken chicken chicken chicken chicken

// ANALYSER:6902
EN RET is used as a jump
ZH Chicken chicken chicken

// ANALYSER:6904
EN Jump to <+%X>
ZH Chicken <+%X>

// ANALYSER:7233
EN Allocates EAX bytes on stack
ZH Chicken chicken chicken chicken

// ANALYSER:7235
EN Allocates %i. bytes on stack
ZH Chicken %i. chicken chicken

// ANALYSER:7243
EN Probes EAX bytes on stack
ZH Chicken chicken chicken

// ANALYSER:7245
EN Probes %i. bytes on stack
ZH Chicken %i. chicken chicken

// ANALYSER:7504
EN Low memory, unable to recognize loop variables
ZH Chicken, chicken chicken chicken chicken

// ANALYSER:7979
EN Low memory, unable to save analysis data
ZH Chicken, chicken chicken chicken chicken

// ANALYSER:8043
EN Analysing %s
ZH Chicken %s

// ANALYSER:8045
EN Some static imports are not yet resolved
ZH Chicken chicken chicken chicken chicken

// ANALYSER:8286
EN 1 %s procedure
ZH 1 %s chicken

// ANALYSER:8287
EN fuzzy
ZH chicken

// ANALYSER:8287
EN strict
ZH chicken

// ANALYSER:8288
EN %i %s procedures
ZH %i %s chicken

// ANALYSER:8293
EN 1 call to known function
ZH 1 chicken chicken chicken

// ANALYSER:8295
EN %i calls to known functions
ZH %i chicken chicken chicken

// ANALYSER:8299
EN 1 call to known,
ZH 1 chicken chicken,

// ANALYSER:8300
EN %i calls to known,
ZH %i chicken chicken,

// ANALYSER:8301
EN 1 call to guessed functions
ZH 1 chicken chicken chicken

// ANALYSER:8302
EN %i calls to guessed functions
ZH %i chicken chicken chicken

// ANALYSER:8307
EN switch or cascaded IF
ZH chicken chicken chicken

// ANALYSER:8307
EN switch
ZH chicken

// ANALYSER:8310
EN switches and cascaded IFs
ZH chicken chicken chicken

// ANALYSER:8310
EN switches
ZH chicken

// ANALYSER:8317
EN 1 loop
ZH 1 chic

// ANALYSER:8319
EN %i loops
ZH %i chicken

// ANALYSER:8391
EN Low memory, automatic analysis not possible
ZH Chicken, chicken chicken chicken chicken

// ASSEMBLE:375
EN Only 32-bit registers can be scaled
ZH Chic 32-chicken chicken chicken chicken

// ASSEMBLE:378
EN Expecting integer scale
ZH Chicken chicken chicken

// ASSEMBLE:381
EN Zero scale is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:384
EN Invalid scale
ZH Chicken chicken

// ASSEMBLE:396
EN Use round parentheses, like ST(0)
ZH Chicken chicken chicken, chicken(0)

// ASSEMBLE:401
EN Expecting index of FPU register
ZH Chicken chicken chicken chicken

// ASSEMBLE:404
EN FPU register is out of range 0..7
ZH Chicken chicken chicken chicken 0..7

// ASSEMBLE:409
EN Expecting right parenthesis
ZH Chicken chicken chicken chicken

// ASSEMBLE:454
EN Duplicate SHORT specifier
ZH Chicken chicken chicken

// ASSEMBLE:459
EN Duplicate LONG specifier
ZH Chicken chicken chicken

// ASSEMBLE:464
EN Duplicate NEAR specifier
ZH Chicken chicken chicken

// ASSEMBLE:469
EN Duplicate FAR specifier
ZH Chicken chicken chicken

// ASSEMBLE:477
EN Conflicting SHORT and LONG specifiers
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:480
EN Conflicting NEAR and FAR specifiers
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:483
EN Conflicting SHORT and FAR specifiers
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:522
EN Immediate selector out of range
ZH Chicken chicken chicken chicken

// ASSEMBLE:529
EN Unrecognized identifier
ZH Chicken chicken chicken

// ASSEMBLE:536
EN Unrecognized label
ZH Chicken chicken

// ASSEMBLE:546
EN Expecting register name
ZH Chicken chicken chicken

// ASSEMBLE:555
EN Invalid index register
ZH Chicken chicken chicken

// ASSEMBLE:566
EN Expecting 32-bit register
ZH Chicken 32-chicken chicken

// ASSEMBLE:599
EN Floating-point numbers are not allowed
ZH Chicken-chicken chicken chicken chicken

// ASSEMBLE:602
EN Invalid character
ZH Chicken chicken

// ASSEMBLE:605
EN Syntax error
ZH Chicken chicken

// ASSEMBLE:643
EN Expecting right bracket
ZH Chicken chicken chicken

// ASSEMBLE:646
EN Missing or incomplete operand
ZH Chicken chicken chicken chicken

// ASSEMBLE:649
EN Incomplete operand
ZH Chicken chicken

// ASSEMBLE:652
EN PTR applies only to memory
ZH Chicken chicken chicken

// ASSEMBLE:658
EN Can't declare size of ANY operand
ZH Chi'chicken chicken chicken chicken

// ASSEMBLE:663
EN Invalid size of constant
ZH Chicken chicken chicken

// ASSEMBLE:671
EN Can't index ANY address
ZH Chi'chicken chicken chicken

// ASSEMBLE:686
EN Offset out of allowed range
ZH Chicken chicken chicken chicken

// ASSEMBLE:690
EN Can't scale 16-bit registers
ZH Chi'chicken 16-chicken chicken

// ASSEMBLE:719
EN Invalid indexing mode
ZH Chicken chicken chicken

// ASSEMBLE:727
EN Imprecise form is not allowed
ZH Chicken chicken chicken chicken

// ASSEMBLE:734
EN Can't get offset of register
ZH Chi'chicken chicken chicken

// ASSEMBLE:738
EN Don't declare size of register
ZH Chi'chicken chicken chicken

// ASSEMBLE:740
EN Place index registers into brackets
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:748
EN Mixed 16 and 32-bit registers
ZH Chicken 16 chi 32-chicken chicken

// ASSEMBLE:751
EN Can't subtract or negate register
ZH Chi'chicken chicken chicken chicken

// ASSEMBLE:754
EN Can't OR register
ZH Chi'chicken chicken

// ASSEMBLE:757
EN Missing comma or operation
ZH Chicken chicken chicken

// ASSEMBLE:788
EN Illegal indexing register
ZH Chicken chicken chicken

// ASSEMBLE:814
EN Expecting colon after segment register
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:825
EN Misplaced segment override
ZH Chicken chicken chicken

// ASSEMBLE:828
EN Can't get offset of address
ZH Chi'chicken chicken chicken

// ASSEMBLE:831
EN Duplicate segment override
ZH Chicken chicken chicken

// ASSEMBLE:866
EN Illegal register
ZH Chicken chicken

// ASSEMBLE:871
EN Misplaced data size declaration
ZH Chicken chicken chicken chicken

// ASSEMBLE:874
EN Duplicate data size declaration
ZH Chicken chicken chicken chicken

// ASSEMBLE:881
EN Misplaced address size declaration
ZH Chicken chicken chicken chicken

// ASSEMBLE:884
EN Conflicting address size declaration
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:894
EN Conflicting OFFSET and PTR
ZH Chicken chicken chicken

// ASSEMBLE:906
EN Misplaced jump size declaration
ZH Chicken chicken chicken chicken

// ASSEMBLE:909
EN Conflicting OFFSET and jump size
ZH Chicken chicken chicken chicken

// ASSEMBLE:912
EN Duplicate jump size declaration
ZH Chicken chicken chicken chicken

// ASSEMBLE:919
EN Misplaced OFFSET
ZH Chicken chicken

// ASSEMBLE:924
EN Duplicate OFFSET
ZH Chicken chicken

// ASSEMBLE:935
EN Arithmetic with undefined operand is meaningless
ZH Chicken chicken chicken chicken chicken chicken

// ASSEMBLE:978
EN Immediate far address is not allowed
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:981
EN Conflicting jump size specifier
ZH Chicken chicken chicken chicken

// ASSEMBLE:997
EN Expecting immediate constant
ZH Chicken chicken chicken chicken

// ASSEMBLE:1005
EN Can't subtract expression in brackets
ZH Chi'chicken chicken chicken chicken

// ASSEMBLE:1008
EN Can't OR expression in brackets
ZH Chi'chicken chicken chicken chicken

// ASSEMBLE:1011
EN Nested brackets
ZH Chicken chicken

// ASSEMBLE:1014
EN Conflicting OFFSET and memory address
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:1022
EN Unmatched right bracket
ZH Chicken chicken chicken

// ASSEMBLE:1025
EN Expecting register or constant
ZH Chicken chicken chicken chicken

// ASSEMBLE:1028
EN Brackets must contain register or constant
ZH Chicken chicken chicken chicken chicken

// ASSEMBLE:1080
EN Invalid parameters
ZH Chicken chicken

// ASSEMBLE:1154
EN Total size of the constant exceeds 16 bytes
ZH Chicken chicken chicken chicken 16 chicken

// ASSEMBLE:1166
EN Integer constant must be 1, 2 or 4 bytes long
ZH Chicken chicken chicken 1, 2 ch 4 chicken

// ASSEMBLE:1182
EN Don't mix integer and floating constants
ZH Chi'chicken chicken chicken chicken chicken

// ASSEMBLE:1185
EN Floating constant must be 4, 8 or 10 bytes long
ZH Chicken chicken chicken 4, 8 ch 10 chicken

// ASSEMBLE:1208
EN Don't mix text and floating constants
ZH Chi'chicken chicken chicken chicken

// ASSEMBLE:1211
EN Character size must be 1 or 2 bytes
ZH Chicken chicken chicken 1 ch 2 chicken

// ASSEMBLE:1214
EN Emptry string
ZH Chicken chicken

// ASSEMBLE:1232
EN Invalid constant
ZH Chicken chicken

// ASSEMBLE:1248
EN Duplicated REP/REPE/REPNE prefix
ZH Chicken chicken/CHIC/Chicken chicken

// ASSEMBLE:1263
EN Duplicated LOCK prefix
ZH Chicken chicken chicken

// ASSEMBLE:1268
EN Duplicated jump hint
ZH Chicken chicken chicken

// ASSEMBLE:1306
EN Command mnemonics expected
ZH Chicken chicken chicken

// ASSEMBLE:1332
EN HLA: right parenthesis expected
ZH CHI: chicken chicken chicken

// ASSEMBLE:1350
EN Invalid register operation
ZH Chicken chicken chicken

// ASSEMBLE:1353
EN Comma between operands expected
ZH Chicken chicken chicken chicken

// ASSEMBLE:1362
EN Too many operands
ZH Chicken chicken

// ASSEMBLE:2091
EN Internal error: unknown operand type
ZH Chicken chicken: chicken chicken chicken

// ASSEMBLE:2868
EN No room for all possible forms
ZH Chicken chicken chicken chicken

// ASSEMBLE:2878
EN Unknown command
ZH Chicken chicken

// ASSEMBLE:2880
EN Implicit operand
ZH Chicken chicken

// ASSEMBLE:2882
EN Imprecise command
ZH Chicken chicken

// ASSEMBLE:2884
EN Command is a standalone prefix
ZH Chicken chicken chicken chicken

// ASSEMBLE:2886
EN LOCK is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:2888
EN Jump hint is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:2890
EN Prefix is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:2892
EN Please specify operand size
ZH Chicken chicken chicken chicken

// ASSEMBLE:2894
EN Unsupported memory addressing mode
ZH Chicken chicken chicken chicken

// ASSEMBLE:2896
EN Conflicting data size
ZH Chicken chicken chicken

// ASSEMBLE:2898
EN Constant is out of range
ZH Chicken chicken chicken

// ASSEMBLE:2900
EN Destination is out of range
ZH Chicken chicken chicken chicken

// ASSEMBLE:2902
EN Invalid segment register
ZH Chicken chicken chicken

// ASSEMBLE:2904
EN No match for specified operands
ZH Chicken chicken chicken chicken

// ASSEMBLE:2906
EN Invalid operand size
ZH Chicken chicken chicken

// ASSEMBLE:2908
EN Invalid jump size specifier
ZH Chicken chicken chicken chicken

// ASSEMBLE:2910
EN Expecting memory operand
ZH Chicken chicken chicken

// ASSEMBLE:2912
EN Expecting register
ZH Chicken chicken

// ASSEMBLE:2914
EN Register is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:2916
EN Wrong number of operands
ZH Chicken chicken chicken

// ASSEMBLE:2918
EN REP prefix is not allowed
ZH Chicken chicken chicken

// ASSEMBLE:2920
EN Undocumented command
ZH Chicken chicken chicken

// ASSEMBLE:2922
EN Invalid command
ZH Chicken chicken

// ASSEMBLE:2936
EN Extra characters on line
ZH Chicken chicken chicken

// ASSEMBLE:2983
EN Internal error
ZH Chicken chicken

// ASSEMBLE:2986
EN No room for assembled code
ZH Chicken chicken chicken

// BDISASM:1010
EN Backspace
ZH Chicken

// BDISASM:1011
EN TAB
ZH CHI

// BDISASM:1012
EN Line Feed
ZH Chicken

// BDISASM:1013
EN Form Feed
ZH Chicken

// BDISASM:1014
EN Carriage Return
ZH Chicken chicken

// BDISASM:1015
EN ESC
ZH CHI

// BDISASM:1018
EN Char '%c'
ZH Chic '%c'

// BDISASM:1019
EN char '%c'
ZH chic '%c'

// BDISASM:1020
EN CHAR '%c'
ZH CHIC '%c'

// BDISASM:1207
EN Stack address=
ZH Chicken chicken=

// BDISASM:1207
EN Address=
ZH Chicken=

// BDISASM:1221
EN Top of stack
ZH Chicken chicken

// BDISASM:1223
EN Stack
ZH Chicken

// BDISASM:2132
EN Dest
ZH Chic

// BDISASM:2304
EN Imm
ZH Chi

// BDISASM:2416
EN %08X (decimal %i.)
ZH %08X (chicken %i.)

// BDISASM:2419
EN %08X (decimal %u.)
ZH %08X (chicken %u.)

// BDISASM:2437
EN - jumps to
ZH - chicken

// BDISASM:2454
EN Top of stack =
ZH Chicken chicken =

// BDISASM:2486
EN (decimal %i.)
ZH (chicken %i.)

// BDISASM:2489
EN (decimal %u.)
ZH (chicken %u.)

// BDISASM:2743
EN CONST
ZH CHICKEN

// BDISASM:2883
EN ??? (internal error)
ZH ??? (chicken chicken)

// BDISASM:2891
EN FLOAT
ZH CHICKEN

// BDISASM:4732
EN Command crosses end of memory block
ZH Chicken chicken chicken chicken chicken

// BDISASM:4734
EN Illegal use of register
ZH Chicken chicken chicken

// BDISASM:4736
EN Memory address is not allowed
ZH Chicken chicken chicken chicken

// BDISASM:4738
EN LOCK prefix is not allowed
ZH Chicken chicken chicken

// BDISASM:4742
EN Two prefixes from the same group
ZH Chicken chicken chicken chicken

// BDISASM:4744
EN More than 4 prefixes
ZH Chicken 4 chicken

// BDISASM:4746
EN Invalid CR register
ZH Chicken chicken chicken

// BDISASM:4748
EN Internal OllyDbg error
ZH Chicken chicken chicken

// BDISASM:4750
EN Superfluous operand size prefix
ZH Chicken chicken chicken chicken

// BDISASM:4752
EN Superfluous address size prefix
ZH Chicken chicken chicken chicken

// BDISASM:4754
EN Superfluous segment override prefix
ZH Chicken chicken chicken chicken chicken

// BDISASM:4756
EN Superfluous REPxx prefix
ZH Chicken chicken chicken

// BDISASM:4758
EN Default segment register in prefix
ZH Chicken chicken chicken chicken

// BDISASM:4760
EN 16-bit return
ZH 16-chicken

// BDISASM:4762
EN 16-bit jump or call
ZH 16-chicken chicken

// BDISASM:4764
EN Far jump or call
ZH Chicken chicken

// BDISASM:4766
EN Modification of segment register
ZH Chicken chicken chicken chicken

// BDISASM:4768
EN Privileged instruction
ZH Chicken chicken chicken

// BDISASM:4770
EN I/O command
ZH C/Chicken

// BDISASM:4772
EN Shift out of range
ZH Chicken chicken

// BDISASM:4774
EN Command uses (valid) LOCK prefix
ZH Chicken chicken (chicken) Chicken chicken

// BDISASM:4776
EN Unaligned stack operation
ZH Chicken chicken chicken

// BDISASM:4778
EN Suspicious use of stack pointer
ZH Chicken chicken chicken chicken

// BDISASM:4780
EN Undocumented instruction or encoding
ZH Chicken chicken chicken chicken chicken

// BPHARD:378
EN Delete
ZH Chicken

// BPHARD:378
EN Delete hardware breakpoint
ZH Chicken chicken chicken

// BPHARD:380
EN Disable
ZH Chicken

// BPHARD:381
EN Disable breakpoint but don't remove it from the list
ZH Chicken chicken chicken'chicken chicken chicken

// BPHARD:383
EN Enable
ZH Chicken

// BPHARD:383
EN Re-enable hardware breakpoint
ZH Ch-chicken chicken chicken

// BPHARD:385
EN Edit properties...
ZH Chicken chicken...

// BPHARD:385
EN Edit properties of the selected breakpoint
ZH Chicken chicken chicken chicken chicken

// BPHARD:387
EN Follow in Disassembler
ZH Chicken chicken chicken

// BPHARD:387
EN Follow breakpoint in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// BPHARD:389
EN Follow in Dump
ZH Chicken chicken

// BPHARD:389
EN Follow breakpoint in CPU Dump pane
ZH Chicken chicken chicken chicken

// BPHARD:391
EN Disable all
ZH Chicken chicken

// BPHARD:391
EN Disable all hardware breakpoints
ZH Chicken chicken chicken chicken

// BPHARD:393
EN Enable all
ZH Chicken

// BPHARD:393
EN Re-enable all hardware breakpoints
ZH Ch-chicken chicken chicken chicken

// BPHARD:489
EN Internal
ZH Chicken

// BPHARD:491
EN Exec
ZH Chic

// BPHARD:493
EN Access:%i
ZH Chicken:%i

// BPHARD:495
EN Write:%i
ZH Chicken:%i

// BPHARD:513
EN Disabled
ZH Chicken

// BPHARD:515
EN Cond
ZH Chic

// BPHARD:517
EN Active
ZH Chicken

// BPHARD:558
EN Slot
ZH Chic

// BPHARD:559
EN 1-based index of hardware breakpoint
ZH 1-chicken chicken chicken chicken

// BPHARD:562
EN Type
ZH Chic

// BPHARD:563
EN Type of hardware breakpoint
ZH Chicken chicken chicken chicken

// BPHARD:566
EN Address
ZH Chicken

// BPHARD:568
EN Address of memory guarded by the hardware breakpoint
ZH Chicken chicken chicken chicken chicken chicken chicken

// BPHARD:571
EN Module
ZH Chicken

// BPHARD:572
EN Name of the module this breakpoint belongs to
ZH Chicken chicken chicken chicken chicken chicken

// BPHARD:575
EN Status
ZH Chicken

// BPHARD:576
EN Status of the hardware breakpoint
ZH Chicken chicken chicken chicken

// BPHARD:579
EN Disassembly
ZH Chicken chicken

// BPHARD:580
EN Disassembled command for code breakpoints
ZH Chicken chicken chicken chicken chicken

// BPHARD:583
EN Comment
ZH Chicken

// BPHARD:599
EN Hardware breakpoints
ZH Chicken chicken chicken

// BPMEM:39
EN Memory protection attributes in memory breakpoint are changed
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// BPMEM:43
EN Old protection: %08X %s
ZH Chicken chicken: %08X %s

// BPMEM:45
EN New protection: %08X %s
ZH Chicken chicken: %08X %s

// BPMEM:191
EN Memory breakpoint on stack
ZH Chicken chicken chicken

// BPMEM:195
EN You are going to set memory breakpoint on stack. As long as this breakpoint is active, some system calls may fail, terminating the applicatin or changing its behaviour. Do you still want to set this breakpoint?
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken, chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken?

// BPMEM:388
EN Delete memory breakpoint
ZH Chicken chicken chicken

// BPMEM:393
EN Re-enable memory breakpoint
ZH Ch-chicken chicken chicken

// BPMEM:398
EN Follow breakpoint in the CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// BPMEM:400
EN Follow breakpoint in the CPU Dump pane
ZH Chicken chicken chicken chicken chicken

// BPMEM:402
EN Disable all memory breakpoints
ZH Chicken chicken chicken chicken

// BPMEM:404
EN Re-enable all memory breakpoints
ZH Ch-chicken chicken chicken chicken

// BPMEM:521
EN <none - not kept between sessions>
ZH <chic - chicken chicken chicken>

// BPMEM:573
EN Address of the memory breakpoint
ZH Chicken chicken chicken chicken

// BPMEM:576
EN Size$    (Decimal)
ZH Chic$    (Chicken)

// BPMEM:577
EN Size of the memory area covered by the breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// BPMEM:585
EN Type of the memory breakpoint
ZH Chicken chicken chicken chicken

// BPMEM:589
EN Status of the memory breakpoint
ZH Chicken chicken chicken chicken

// BPMEM:608
EN Memory breakpoints
ZH Chicken chicken

// BREAKS:152
EN Corrupt breakpoint
ZH Chicken chicken

// BREAKS:156
EN Breakpoint set at address %08X is corrupt (contains hex code %02X instead of %02X (%s). Probably the code is self-modifiable, or breakpoint was set on data. Description of the breakpoint will be updated.
ZH Chicken chicken chicken %08X chicken (chicken chicken %02X chicken %02X (%s). Chicken chicken chicken-chicken, chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken.

// BREAKS:226
EN Unable to set breakpoint
ZH Chicken chicken chicken

// BREAKS:227
EN Unable to set breakpoint at address %08X.
ZH Chicken chicken chicken chicken chicken %08X.

// BREAKS:237
EN Unable to set breakpoint at address %08X. Memory is not readable.
ZH Chicken chicken chicken chicken chicken %08X. Chicken chicken chicken.

// BREAKS:247
EN Unable to set breakpoint at address %08X. Memory is not writeable.
ZH Chicken chicken chicken chicken chicken %08X. Chicken chicken chicken.

// BREAKS:261
EN Unable to remove breakpoint
ZH Chicken chicken chicken chicken

// BREAKS:262
EN Unable to remove breakpoint at address %08X.
ZH Chicken chicken chicken chicken chicken %08X.

// BREAKS:275
EN Unable to remove breakpoint at address %08X. Memory is not readable.
ZH Chicken chicken chicken chicken chicken %08X. Chicken chicken chicken.

// BREAKS:282
EN Breakpoint set at address %08X is corrupt (contains hex code %02X instead of %02X (%s). Probably the code is self-modifiable, or breakpoint was set on data.
ZH Chicken chicken chicken %08X chicken (chicken chicken %02X chicken %02X (%s). Chicken chicken chicken-chicken, chicken chicken chicken chicken.

// BREAKS:292
EN Unable to remove breakpoint at address %08X. Memory is not writeable.
ZH Chicken chicken chicken chicken chicken %08X. Chicken chicken chicken.

// BREAKS:470
EN Suspicious breakpoint
ZH Chicken chicken chicken

// BREAKS:474
EN You are going to set execution breakpoint at the location %08X which is probably not the first byte of the command. This may disturb execution or even crash the debugged application. Do you still want to set breakpoint?
ZH Chicken chicken chicken chicken chicken chicken chicken %08X chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken?

// BREAKS:486
EN You are going to set execution breakpoint at the location %08X which is probably not the first byte of the command. Are you sure?
ZH Chicken chicken chicken chicken chicken chicken chicken %08X chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// BREAKS:511
EN Suspicious breakpoints
ZH Chicken chicken chicken

// BREAKS:515
EN You are going to set execution breakpoints on several locations. At least one of them (for example, %08X) is probably not the first byte of the command. This may disturb execution or even crash the debugged application. Do you still want to set breakpoints?
ZH Chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken (chicken chicken, %08X) chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken?

// BREAKS:711
EN Delete INT3 breakpoint
ZH Chicken3 chicken

// BREAKS:716
EN Re-enable INT3 breakpoint
ZH Ch-chicken3 chicken

// BREAKS:718
EN Edit properties associated with breakpoint
ZH Chicken chicken chicken chicken chicken

// BREAKS:724
EN Disable all INT3 breakpoints
ZH Chicken chicken3 chicken chicken

// BREAKS:726
EN Re-enable all INT3 breakpoints
ZH Ch-chicken chicken3 chicken chicken

// BREAKS:833
EN One-shot
ZH Chi-chic

// BREAKS:836
EN Plugin Permanent
ZH Chicken chicken

// BREAKS:838
EN Permanent
ZH Chicken

// BREAKS:840
EN Temporary
ZH Chicken

// BREAKS:843
EN Trace
ZH Chicken

// BREAKS:883
EN Address of INT3 breakpoint
ZH Chicken chicken3 chicken

// BREAKS:891
EN Status of INT3 breakpoint
ZH Chicken chicken3 chicken

// BREAKS:895
EN Disassembled command
ZH Chicken chicken chicken

// BREAKS:914
EN INT3 breakpoints
ZH CHI3 chicken chicken

// COMMENTS:519
EN Jump to
ZH Chicken

// COMMENTS:537
EN Entry point
ZH Chicken chicken

// COMMENTS:550
EN PTR to
ZH Chicken

// COMMENTS:687
EN XMMWORD (16.-byte)
ZH CHICKEN (16.-chic)

// COMMENTS:689
EN YMMWORD (32.-byte)
ZH CHICKEN (32.-chic)

// COMMENTS:693
EN (%i-byte)
ZH (%i-chic)

// COMMENTS:695
EN (%i.-byte)
ZH (%i.-chic)

// COMMENTS:698
EN %i.-byte
ZH %i.-chic

// COMMENTS:733
EN Cascaded IF (
ZH Chicken chicken (

// COMMENTS:735
EN Switch (
ZH Chicken (

// COMMENTS:737
EN cases -%X..%X
ZH chicken -%X..%X

// COMMENTS:740
EN exceptions %X..%X
ZH chicken %X..%X

// COMMENTS:742
EN messages %X..%X
ZH chicken %X..%X

// COMMENTS:744
EN cases %X..%X
ZH chicken %X..%X

// COMMENTS:746
EN , %i exits)
ZH , %i chicken)

// COMMENTS:748
EN , %i. exits)
ZH , %i. chicken)

// COMMENTS:750
EN , some cases lost due to high complexity
ZH , chicken chicken chicken chicken chicken

// COMMENTS:759
EN Default case
ZH Chicken chicken

// COMMENTS:761
EN Case
ZH Chic

// COMMENTS:762
EN Cases
ZH Chicken

// COMMENTS:782
EN and other
ZH chicken

// COMMENTS:786
EN of cascaded IF
ZH chicken chicken

// COMMENTS:788
EN of switch
ZH chicken

// COMMENTS:818
EN Loop
ZH Chic

// COMMENTS:821
EN : loop variable
ZH : chicken chicken

// COMMENTS:823
EN : loop variables
ZH : chicken chicken

// COMMENTS:906
EN Callback
ZH Chicken

// COMMENTS:920
EN guessed
ZH chicken

// COMMENTS:925
EN void
ZH chic

// CPU:55
EN Disassembler
ZH Chicken chicken

// CPU:58
EN Info
ZH Chic

// CPU:61
EN Registers
ZH Chicken

// CPU:64
EN Dump
ZH Chic

// CPU:149
EN Modify %s
ZH Chicken %s

// CPU:191
EN Modify 3DNow! register %s
ZH Chicken 3Chic! chicken %s

// CPU:232
EN Edit
ZH Chic

// CPU:257
EN byte at
ZH chicken

// CPU:260
EN word at
ZH chicken

// CPU:263
EN dword at
ZH chicken

// CPU:268
EN Memory is not readable
ZH Chicken chicken chicken

// CPU:282
EN 32-bit float
ZH 32-chicken

// CPU:285
EN 64-bit float
ZH 64-chicken

// CPU:288
EN 80-bit float
ZH 80-chicken

// CPU:290
EN at
ZH ch

// CPU:303
EN MMX operand at
ZH Chicken chicken

// CPU:311
EN 3DNow! operand at
ZH 3Chic! chicken

// CPU:339
EN SSE operand at
ZH Chicken chicken

// CPU:361
EN Modify FPU status register
ZH Chicken chicken chicken

// CPU:369
EN Modify FPU control register
ZH Chicken chicken chicken chicken

// CPU:377
EN Modify MXCSR
ZH Chicken chicken

// CPU:464
EN Go to
ZH Chicken

// CPU:472
EN jump
ZH chic

// CPU:474
EN call
ZH chic

// CPU:477
EN from %08X
ZH chic %08X

// CPU:536
EN Unable to show source
ZH Chicken chicken chicken

// CPU:544
EN Modify...
ZH Chicken...

// CPU:544
EN Edit contents of selected operand
ZH Chicken chicken chicken chicken

// CPU:546
EN Follow
ZH Chicken

// CPU:546
EN Follow jump or call destination in Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// CPU:548
EN Follow loop
ZH Chicken chicken

// CPU:548
EN Follow loop in Disassembler
ZH Chicken chicken chicken chicken

// CPU:550
EN Follow address in CPU Dump
ZH Chicken chicken chicken

// CPU:552
EN Follow in Stack
ZH Chicken chicken

// CPU:552
EN Follow address in CPU Stack
ZH Chicken chicken chicken chicken

// CPU:554
EN Go to jump or call to the first selected command
ZH Chicken chicken chicken chicken chicken chicken

// CPU:574
EN List jumps and calls to command...
ZH Chicken chicken chicken chicken...

// CPU:575
EN List all known jumps and calls to the first selected command
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// CPU:577
EN List destinations...
ZH Chicken chicken...

// CPU:578
EN List all known destinations of the selected switch
ZH Chicken chicken chicken chicken chicken chicken

// CPU:580
EN Follow in Source code
ZH Chicken chicken chicken

// CPU:580
EN Follow address in Source code window
ZH Chicken chicken chicken chicken chicken

// CPU:674
EN Jump is taken
ZH Chicken chicken

// CPU:676
EN Jump is not taken
ZH Chicken chicken

// CPU:683
EN Condition is met
ZH Chicken chicken

// CPU:685
EN Condition is not met
ZH Chicken chicken chicken

// CPU:701
EN returned EAX =
ZH chicken chicken =

// CPU:703
EN Returned EAX =
ZH Chicken chicken =

// CPU:758
EN Jump from
ZH Chicken

// CPU:758
EN Jumps from
ZH Chicken

// CPU:777
EN Local call from
ZH Chicken chicken

// CPU:777
EN Local calls from
ZH Chicken chicken

// CPU:811
EN Jumps to
ZH Chicken

// CPU:830
EN Call to
ZH Chicken

// CPU:830
EN Calls to
ZH Chicken

// CPU:919
EN (current memory state)
ZH (chicken chicken chicken)

// CPU:928
EN (current registers)
ZH (chicken chicken)

// CPU:1144
EN CPU
ZH CHI

// CPU:1276
EN Run trace %i. step%s back
ZH Chicken %i. chic%s chic

// CPU:1290
EN module
ZH chicken

// DATA:263
EN Data table full, some data will be lost!
ZH Chicken chicken, chicken chicken chicken!

// DATA:1699
EN Bad input data
ZH Chicken chicken

// DATA:1728
EN Unknown module
ZH Chicken chicken

// DATA:1741
EN Invalid import name
ZH Chicken chicken chicken

// DATA:1754
EN Please specify module
ZH Chicken chicken chicken

// DATA:1762
EN Invalid ordinal
ZH Chicken chicken

// DATA:1766
EN Extra characters in name
ZH Chicken chicken chicken

// DATA:1820
EN Ordinal not found
ZH Chicken chicken

// DATA:1843
EN Unknown import
ZH Chicken chicken

// DATA:1850
EN Ordinal not imported
ZH Chicken chicken chicken

// DBGHELP:136
EN DBGHELP.DLL is too old, debugging data will be ignored
ZH CHICKEN.Chicken chicken, chicken chicken chicken chicken

// DBGHELP:151
EN Missing SYMSRV.DLL, Microsoft Symbol Server is deactivated
ZH Chicken chicken.CHI, Chicken chicken chicken chicken chicken

// DBGHELP:155
EN Old SYMSRV.DLL, Microsoft Symbol Server may be unreachable
ZH Chicken.CHI, Chicken chicken chicken chicken chicken

// DBGHELP:243
EN Accessing Microsoft Symbol Server (module '%s'), this may take a while...
ZH Chicken chicken chicken chicken (chicken '%s'), chicken chicken chicken...

// DBGHELP:255
EN PDB file: '%s'
ZH Chicken: '%s'

// DBGHELP:270
EN Debugging information in %s format is available
ZH Chicken chicken chicken %s chicken chicken chicken

// DEBUG:393
EN Modified debug registers of
ZH Chicken chicken chicken chicken

// DEBUG:410
EN DR%i: old %08X, new %08X
ZH CH%i: chi %08X, chi %08X

// DEBUG:861
EN Immediate string is not a valid condition
ZH Chicken chicken chicken chicken chicken

// DEBUG:864
EN Invalid expression in conditional breakpoint: '%s'
ZH Chicken chicken chicken chicken chicken chicken: '%s'

// DEBUG:888
EN INT3:
ZH CHI3:

// DEBUG:890
EN MEM:
ZH CHI:

// DEBUG:892
EN HARD:
ZH CHIC:

// DEBUG:894
EN COND:
ZH CHIC:

// DEBUG:918
EN Structure
ZH Chicken

// DEBUG:919
EN %s %s%s at address %08X:
ZH %s %s%s chicken %08X:

// DEBUG:922
EN NULL pointer
ZH Chicken chicken

// DEBUG:924
EN Unknown structure
ZH Chicken chicken

// DEBUG:926
EN Unable to decode
ZH Chicken chicken

// DEBUG:938
EN %08X (conversion according to type is not possible)
ZH %08X (chicken chicken chicken chicken chicken chicken)

// DEBUG:1035
EN Unable to protocol function arguments
ZH Chicken chicken chicken chicken chicken

// DEBUG:1040
EN Call to %s
ZH Chicken %s

// DEBUG:1046
EN from
ZH chic

// DEBUG:1082
EN Return from %s
ZH Chicken chicken %s

// DEBUG:1084
EN Return from call
ZH Chicken chicken

// DEBUG:1239
EN Unable to close process
ZH Chicken chicken chicken

// DEBUG:1242
EN The state of the debugged process does not allow to close it right now. Please repeat this operation later. If this message comes again, the only solution is to restart OllyDbg.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken. Chicken chicken chicken chicken, chicken chicken chicken chicken chicken.

// DEBUG:1245
EN Process is still running
ZH Chicken chicken chicken

// DEBUG:1247
EN The debugged process is still active. Would you like to close it now? Note that forced termination may lead to the loss of data.
ZH Chicken chicken chicken chicken chicken. Chicken chicken chicken chicken? Chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:1283
EN Unable to pause process
ZH Chicken chicken chicken

// DEBUG:1287
EN OllyDbg is unable to pause debugged process. Graceful termination is therefore not possible and OllyDbg will call TerminateProcess(), which may lead to the loss of data in the files opened by the application.
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken(), chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:1317
EN Unable to close gracefully
ZH Chicken chicken chicken

// DEBUG:1320
EN OllyDbg is unable to close debugged process gracefully and will use TerminateProcess(), which may lead to the loss of data in the files opened by the application.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken(), chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:1350
EN Unable to close debugged process
ZH Chicken chicken chicken chicken

// DEBUG:1352
EN OllyDbg was unable to close debugged process. Probably the only solution is to restart OllyDbg.
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken.

// DEBUG:1356
EN Process closed
ZH Chicken chicken

// DEBUG:1379
EN Unable to detach debugged process
ZH Chicken chicken chicken chicken

// DEBUG:1381
EN The state of the debugged process does not allow to detach it right now. Please repeat this operation later.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken.

// DEBUG:1400
EN OllyDbg is unable to remove some breakpoints. If debugged process encounters such breakpoint, most probably it will crash. Do you still want to detach?
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken, chicken chicken chicken chicken. Chicken chicken chicken chicken?

// DEBUG:1400
EN Unable to remove breakpoints
ZH Chicken chicken chicken chicken

// DEBUG:1439
EN OllyDbg is unable to detach debugged application. Probably the only solution is to kill it. If you decide to continue, please note that breakpoints are disabled or removed, and all threads are resumed.
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken. Chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken, chicken chicken chicken chicken.

// DEBUG:1447
EN Process detached
ZH Chicken chicken

// DEBUG:1477
EN All threads are suspended
ZH Chicken chicken chicken

// DEBUG:1480
EN All threads in the debugged application are suspended. Application is stopped. To continue, please resume some threads in the Threads window.
ZH Chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken. Chicken chicken, chicken chicken chicken chicken chicken chicken.

// DEBUG:1484
EN The thread you are going to run (ID %08X) is suspended. Please resume it in the Threads window.
ZH Chicken chicken chicken chicken (CH %08X) chicken chicken. Chicken chicken chicken chicken chicken.

// DEBUG:1487
EN The thread you are going to run (ordinal %i, ID %08X) is suspended. Please resume it in the Threads window.
ZH Chicken chicken chicken chicken (chicken %i, CH %08X) chicken chicken. Chicken chicken chicken chicken chicken.

// DEBUG:1860
EN The thread with ID %08X is no longer valid. Please choose another thread.
ZH Chicken chicken %08X chicken chicken. Chicken chicken chicken chicken.

// DEBUG:1925
EN OllyDbg is unable to step over the command at (possibly invalid) address %08X. Memory is not readable.
ZH Chicken chicken chicken chicken chicken chicken (chicken chicken) chicken %08X. Chicken chicken chicken.

// DEBUG:1967
EN The CONTEXT structure passed to ZwContinue()/NtContinue() contains EIP pointing to the non-existing memory. Most probably the program will crash. Either correct EIP (doubleword at address %08X), or try to run instead of stepping.
ZH Chicken chicken chicken chicken chicken()/Chicken() chicken chicken chicken chicken-chicken chicken. Chicken chicken chicken chicken chicken. Chicken chicken (chicken chicken chicken %08X), chicken chicken chicken chicken.

// DEBUG:2012
EN Temporarily removed INT3 already pending
ZH Chicken chicken chicken3 chicken chicken

// DEBUG:2127
EN OllyDbg is unable to step over the command at (possibly invalid) address %08X. Unable to set temporary breakpoint on the %s.
ZH Chicken chicken chicken chicken chicken chicken (chicken chicken) chicken %08X. Chicken chicken chicken chicken chicken %s.

// DEBUG:2128
EN destination
ZH chicken chicken

// DEBUG:2128
EN next command
ZH chicken chicken

// DEBUG:2137
EN OllyDbg is unable to set temporary breakpoint on KiUserExceptionDispatcher() at address %08X. Context passed to the custom exception handler will contain flag T set by OllyDbg.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken() chicken %08X. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:2150
EN OllyDbg is unable to set temporary breakpoint on NtQueryInformationProcess() at address %08X. Exception will not be passed to the unhandled exception filter.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken() chicken %08X. Chicken chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:2264
EN %s - passed to application
ZH %s - chicken chicken chicken

// DEBUG:2274
EN %s - application was unable to process exception
ZH %s - chicken chicken chicken chicken chicken chicken

// DEBUG:2277
EN %s - exception is non-continuable
ZH %s - chicken chicken-chicken chicken

// DEBUG:2279
EN %s - Shift+Run/Step to pass exception to the program
ZH %s - Chicken+Chi/Chicken chicken chicken chicken chicken

// DEBUG:2298
EN EIP is in the range
ZH Chicken chicken chicken

// DEBUG:2303
EN EIP is outside the range
ZH Chicken chicken chicken

// DEBUG:2317
EN possible entry point of packed file
ZH chicken chicken chicken chicken chicken

// DEBUG:2356
EN EIP points to modified command
ZH Chicken chicken chicken chicken

// DEBUG:2364
EN command count reached
ZH chicken chicken chicken

// DEBUG:2372
EN invalid command
ZH chicken chicken

// DEBUG:2383
EN memory range %i - unable to calculate address
ZH chicken chicken %i - chicken chicken chicken chicken

// DEBUG:2388
EN memory range %i accessed
ZH chicken chicken %i chicken

// DEBUG:2403
EN invalid condition %i - %s
ZH chicken chicken %i - %s

// DEBUG:2414
EN condition %i is of non-integer type
ZH chicken %i chicken-chicken chicken

// DEBUG:2417
EN condition %i met -
ZH chicken %i chi -

// DEBUG:2432
EN invalid command %i -
ZH chicken chicken %i -

// DEBUG:2446
EN command %i matched -
ZH chicken %i chicken -

// DEBUG:2589
EN OllyDbg is unable to step over the command at (possibly invalid) address %08X. Unable to set temporary breakpoint on the next command.
ZH Chicken chicken chicken chicken chicken chicken (chicken chicken) chicken %08X. Chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:2762
EN WinMain() of main module
ZH Chicken() chicken chicken

// DEBUG:2765
EN First TLS callback of main module
ZH Chicken chicken chicken chicken

// DEBUG:2769
EN Entry point of self-extractor
ZH Chicken chicken chicken-chicken

// DEBUG:2772
EN Entry point of LOADDLL.EXE
ZH Chicken chicken chicken.CHI

// DEBUG:2775
EN DLL loaded
ZH Chicken

// DEBUG:2786
EN Entry point of main module
ZH Chicken chicken chicken

// DEBUG:2816
EN Searching for the SFX entry point of module '%s'
ZH Chicken chicken chicken chicken chicken chicken '%s'

// DEBUG:2825
EN Entry point of module '%s'
ZH Chicken chicken chicken '%s'

// DEBUG:2827
EN Entry point of DLL
ZH Chicken chicken

// DEBUG:2845
EN Known entry point of packed file
ZH Chicken chicken chicken chicken

// DEBUG:2865
EN .NET startup entry point
ZH .Chicken chicken chicken

// DEBUG:2867
EN Entry point of thread %08X
ZH Chicken chicken chicken %08X

// DEBUG:2869
EN .NET entry point
ZH .Chicken chicken

// DEBUG:2871
EN Executed to selection
ZH Chicken chicken chicken

// DEBUG:2911
EN %i events per second
ZH %i chicken chicken

// DEBUG:2987
EN Child process with ID %08lX starts
ZH Chicken chicken chicken %08lX chicken

// DEBUG:3025
EN Unexpected debug event %i from child process %08lX. Process will be detached.
ZH Chicken chicken chicken %i chicken chicken %08lX. Chicken chicken chicken.

// DEBUG:3036
EN Event %08lX from different process (ID %08lX)
ZH Chicken %08lX chicken chicken chicken (CH %08lX)

// DEBUG:3047
EN OllyDbg received debug event, but there is no application to debug. This is a severe internal error, please restart OllyDbg.
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken chicken. Chicken chicken chicken chicken, chicken chicken chicken.

// DEBUG:3080
EN Unrecoverable exception %08X (no thread)
ZH Chicken chicken chicken %08X (chicken)

// DEBUG:3087
EN Thread %08X that reported exception %08X at address %08X is not known to OllyDbg. Usually this makes correct continuation impossible. However, you may try to recover and continue at your own risk.
ZH Chicken %08X chicken chicken chicken %08X chicken %08X chicken chicken chicken. Chicken chicken chicken chicken chicken chicken. Chicken, chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:3099
EN Unrecoverable exception %08X (no registers)
ZH Chicken chicken chicken %08X (chicken chicken)

// DEBUG:3106
EN OllyDbg is unable to read registers for exception %08X at (possibly invalid) address %08X in thread %08X. Usually this makes correct continuation impossible, but you may try to recover and continue at your own risk.
ZH Chicken chicken chicken chicken chicken chicken %08X ch (chicken chicken) chicken %08X chicken %08X. Chicken chicken chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:3113
EN Debug registers modified
ZH Chicken chicken chicken

// DEBUG:3115
EN Debugged application has modified the debugging registers. %sThe modifications are saved to the log.
ZH Chicken chicken chicken chicken chicken chicken chicken. %sChicken chicken chicken chicken chicken.

// DEBUG:3117
EN Maybe it called ZwContinue() or SetDebugContext().
ZH Chicken chicken chicken() chicken chicken().

// DEBUG:3170
EN Different thread
ZH Chicken chicken

// DEBUG:3174
EN While running single thread of debugged application with ID %08X, OllyDbg received exception from the different thread with ID %08X. Either this thread is new, or application has resumed thread paused by OllyDbg. Application is paused.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken %08X, Chicken chicken chicken chicken chicken chicken chicken chicken %08X. Chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken.

// DEBUG:3324
EN OllyDbg is unable to establish connection with LOADDLL.EXE. DLL debugging is not possible. Try to delete LOADDLL.EXE in order to allow OllyDbg to extract valid copy of DLL loader.
ZH Chicken chicken chicken chicken chicken chicken chicken.CHI. Chicken chicken chicken chicken. Chicken chicken chicken.Chicken chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:3391
EN Unable to set startup breakpoint at address %08X. Debugged application will be paused on system breakpoint.
ZH Chicken chicken chicken chicken chicken chicken %08X. Chicken chicken chicken chicken chicken chicken chicken.

// DEBUG:3426
EN System breakpoint
ZH Chicken chicken

// DEBUG:3428
EN Return from call to DLL export
ZH Chicken chicken chicken chicken

// DEBUG:3432
EN INT 2D command at
ZH CHI 2Chicken chicken

// DEBUG:3441
EN Call to DebugBreak()
ZH Chicken chicken()

// DEBUG:3443
EN Call to DbgBreakPoint()
ZH Chicken chicken chicken()

// DEBUG:3445
EN INT3 command at
ZH CHI3 chicken

// DEBUG:3456
EN INT3 in .NET application stepped over on closing
ZH CHI3 ch .Chicken chicken chicken chicken chicken

// DEBUG:3472
EN INT3 in MSCORWKS stepped over on request
ZH CHI3 chicken chicken chicken chicken chicken

// DEBUG:3551
EN Hit trace may pass control to the non-command
ZH Chicken chicken chicken chicken chicken-chicken

// DEBUG:3559
EN Hit trace may leave code section
ZH Chicken chicken chicken chicken

// DEBUG:3603
EN Breakpoint at
ZH Chicken chicken

// DEBUG:3605
EN Conditional breakpoint at
ZH Chicken chicken chicken

// DEBUG:3609
EN (count reached)
ZH (chicken chicken)

// DEBUG:3724
EN Hardware breakpoint %i
ZH Chicken chicken chicken %i

// DEBUG:3726
EN Conditional hardware breakpoint %i
ZH Chicken chicken chicken chicken %i

// DEBUG:3735
EN - EIP points to next instruction
ZH - Chicken chicken chicken chicken

// DEBUG:3749
EN Break on hardware breakpoints
ZH Chicken chicken chicken chicken

// DEBUG:3751
EN Break on hardware breakpoint
ZH Chicken chicken chicken chicken

// DEBUG:3756
EN set by application
ZH chicken chicken

// DEBUG:3943
EN Break on single-step trap or INT1 set by application
ZH Chicken chicken-chicken chicken1 chicken chicken

// DEBUG:4042
EN Memory breakpoint
ZH Chicken chicken

// DEBUG:4045
EN Conditional memory breakpoint
ZH Chicken chicken chicken chicken

// DEBUG:4052
EN when executing
ZH chicken chicken

// DEBUG:4054
EN when reading
ZH chicken chicken

// DEBUG:4056
EN when writing to
ZH chicken chicken

// DEBUG:4058
EN when accessing
ZH chicken chicken

// DEBUG:4101
EN Access violation when %s [%08lX] caused by plugin
ZH Chicken chicken chicken %s [%08lX] chicken chicken

// DEBUG:4102
EN writing to
ZH chicken

// DEBUG:4103
EN executing
ZH chicken

// DEBUG:4104
EN reading
ZH chicken

// DEBUG:4107
EN Access violation caused by plugin
ZH Chicken chicken chicken chicken

// DEBUG:4128
EN Access violation in KERNEL32 ignored on request
ZH Chicken chicken chicken32 chicken chicken

// DEBUG:4133
EN Access violation when %s [%08lX]
ZH Chicken chicken chicken %s [%08lX]

// DEBUG:4138
EN Access violation
ZH Chicken chicken

// DEBUG:4157
EN Break-on-access while %s %08X
ZH Chicken-ch-chicken chicken %s %08X

// DEBUG:4158
EN accessing
ZH chicken

// DEBUG:4187
EN Break-on-access set by plugin while %s %08X
ZH Chicken-ch-chicken chicken chicken %s %08X

// DEBUG:4199
EN Break on guarded memory page set by application while %s %08X
ZH Chicken chicken chicken chicken chicken chicken chicken %s %08X

// DEBUG:4389
EN Integer division by zero
ZH Chicken chicken chicken

// DEBUG:4403
EN Illegal instruction
ZH Chicken chicken chicken

// DEBUG:4431
EN Stack overflow
ZH Chicken chicken

// DEBUG:4444
EN Noncontinuable exception
ZH Chicken chicken chicken

// DEBUG:4459
EN Denormalized floating-point operand
ZH Chicken chicken chicken-chicken chicken

// DEBUG:4461
EN Floating-point division by zero
ZH Chicken-chicken chicken chicken

// DEBUG:4463
EN Inexact floating-point result
ZH Chicken chicken-chicken chicken

// DEBUG:4465
EN Invalid floating-point operation
ZH Chicken chicken-chicken chicken

// DEBUG:4467
EN Floating-point overflow
ZH Chicken-chicken chicken

// DEBUG:4469
EN FPU stack error
ZH Chicken chicken

// DEBUG:4471
EN Floating-point underflow
ZH Chicken-chicken chicken

// DEBUG:4473
EN from EIP=%08X
ZH chicken=%08X

// DEBUG:4504
EN VC service exception
ZH Chicken chicken chicken

// DEBUG:4514
EN : Thread %08X is named '%s'
ZH : Chicken %08X chicken '%s'

// DEBUG:4531
EN MS C++ exception
ZH CHIC++ chicken

// DEBUG:4550
EN , module %s class '%s' object %08X
ZH , chicken %s chicken '%s' chicken %08X

// DEBUG:4575
EN Exception %08X
ZH Chicken %08X

// DEBUG:4609
EN Return reached and executed
ZH Chicken chicken chicken chicken

// DEBUG:4615
EN User code reached
ZH Chicken chicken

// DEBUG:4629
EN SFX trace: %s
ZH Chicken: %s

// DEBUG:4631
EN Run trace: %s
ZH Chicken: %s

// DEBUG:4743
EN Return reached
ZH Chicken chicken

// DEBUG:4957
EN New thread %i. (ID %08X) created
ZH Chicken %i. (CH %08X) chicken

// DEBUG:4969
EN New thread %08X: unable to set breakpoint on entry point %08X
ZH Chicken %08X: chicken chicken chicken chicken chicken %08X

// DEBUG:5014
EN New process (ID %08X) created
ZH Chicken chicken (CH %08X) chicken

// DEBUG:5020
EN Main thread (ID %08X) created
ZH Chicken chicken (CH %08X) chicken

// DEBUG:5044
EN Main thread is resumed from suspended state
ZH Chicken chicken chicken chicken chicken chicken

// DEBUG:5102
EN Thread (ID %08X) terminated, exit code %X
ZH Chicken (CH %08X) chicken, chicken %X

// DEBUG:5105
EN Thread %i. (ID %08X) terminated, exit code %X
ZH Chicken %i. (CH %08X) chicken, chicken %X

// DEBUG:5162
EN LOADDLL terminated: Missing DLL name
ZH Chicken chicken: Chicken chicken

// DEBUG:5165
EN LOADDLL terminated: Unable to load DLL
ZH Chicken chicken: Chicken chicken

// DEBUG:5169
EN LoadLibrary() reports error %08X (%s)
ZH Chicken chicken() chicken chicken %08X (%s)

// DEBUG:5173
EN LoadLibrary() reports error %08X
ZH Chicken chicken() chicken chicken %08X

// DEBUG:5179
EN LOADDLL terminated: Too many parameters
ZH Chicken chicken: Chicken chicken chicken

// DEBUG:5182
EN LOADDLL terminated: Error %08X
ZH Chicken chicken: Chicken %08X

// DEBUG:5186
EN LOADDLL terminated, exit code %X
ZH Chicken chicken, chicken %X

// DEBUG:5188
EN LOADDLL terminated, exit code %X (%li.)
ZH Chicken chicken, chicken %X (%li.)

// DEBUG:5191
EN Process terminated, exit code %X
ZH Chicken chicken, chicken %X

// DEBUG:5299
EN Unload %s
ZH Chicken %s

// DEBUG:5313
EN Module %s - failed to initialize
ZH Chicken %s - chicken chicken chicken

// DEBUG:5314
EN (name unknown)
ZH (chicken chicken)

// DEBUG:5321
EN Unload hidden module %08X
ZH Chicken chicken chicken %08X

// DEBUG:5370
EN Debug string (invalid length)
ZH Chicken chicken (chicken chicken)

// DEBUG:5380
EN Debug string (unable to get text)
ZH Chicken chicken (chicken chicken)

// DEBUG:5390
EN Debug string
ZH Chicken chicken

// DEBUG:5477
EN System debugging error (RIP event) %08lX (type %li.)
ZH Chicken chicken chicken (Chicken) %08lX (chic %li.)

// DEBUG:5481
EN Unknown debugging event %08lX
ZH Chicken chicken chicken %08lX

// DIALOGS:904
EN Hexadecimal
ZH Chicken chicken

// DIALOGS:907
EN Doubleword register in hexadecimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:909
EN Word register in hexadecimal form
ZH Chicken chicken chicken chicken

// DIALOGS:911
EN High byte register in hexadecimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:913
EN Low byte register in hexadecimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:914
EN Signed
ZH Chicken

// DIALOGS:917
EN Doubleword register in signed form
ZH Chicken chicken chicken chicken

// DIALOGS:919
EN Word register in signed form
ZH Chicken chicken chicken chicken

// DIALOGS:921
EN High byte register in signed form
ZH Chicken chicken chicken chicken

// DIALOGS:923
EN Low byte register in signed form
ZH Chicken chicken chicken chicken

// DIALOGS:924
EN Unsigned
ZH Chicken

// DIALOGS:927
EN Doubleword register in unsigned form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:929
EN Word register in unsigned form
ZH Chicken chicken chicken chicken

// DIALOGS:931
EN High byte register in unsigned form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:933
EN Low byte register in unsigned form
ZH Chicken chicken chicken chicken

// DIALOGS:934
EN Character
ZH Chicken

// DIALOGS:937
EN High byte register in character form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:939
EN Low byte register in character form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:940
EN OK
ZH CH

// DIALOGS:941
EN Apply modifications
ZH Chicken chicken chicken

// DIALOGS:942
EN Cancel
ZH Chicken

// DIALOGS:943
EN Discard modifications
ZH Chicken chicken chicken

// DIALOGS:944
EN Edit register
ZH Chicken chicken

// DIALOGS:1001
EN Enter data in hexadecimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1005
EN Enter data in signed decimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1009
EN Enter data in unsigned decimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:1014
EN Edit data
ZH Chicken

// DIALOGS:1032
EN Float
ZH Chicken

// DIALOGS:1035
EN Enter data in floating point form
ZH Chicken chicken chicken chicken

// DIALOGS:1063
EN Enter word in hexadecimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1067
EN Enter word in signed decimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1071
EN Enter word in unsigned decimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:1099
EN Enter byte in hexadecimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1103
EN Enter byte in signed decimal form
ZH Chicken chicken chicken chicken

// DIALOGS:1107
EN Enter byte in unsigned decimal form
ZH Chicken chicken chicken chicken chicken

// DIALOGS:1111
EN Enter byte as ASCII character
ZH Chicken chicken chicken chicken

// DIALOGS:1136
EN Last error (hex)
ZH Chicken (chi)

// DIALOGS:1139
EN Enter last threas's error in hexadecimal form
ZH Chicken chicken'chicken chicken chicken chicken

// DIALOGS:1141
EN Select new last thread's error from the list
ZH Chicken chicken chicken'chicken chicken chicken

// DIALOGS:1143
EN Sort by name
ZH Chicken chicken

// DIALOGS:1144
EN Check to sort error list by name
ZH Chicken chicken chicken chicken

// DIALOGS:1150
EN Change last error
ZH Chicken chicken

// DIALOGS:1569
EN First address in the range
ZH Chicken chicken chicken

// DIALOGS:1571
EN Select or type in the first address in the range
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:1573
EN Last address in the range (included)
ZH Chicken chicken chicken (chicken)

// DIALOGS:1575
EN Select or type in the last address in the range
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:1579
EN Select range
ZH Chicken chicken

// DIALOGS:1581
EN Discard action
ZH Chicken chicken

// DIALOGS:1583
EN Select address range
ZH Chicken chicken chicken

// DIALOGS:1624
EN First address: %s
ZH Chicken chicken: %s

// DIALOGS:1630
EN First address: Integer expression expected
ZH Chicken chicken: Chicken chicken chicken chicken

// DIALOGS:1638
EN Last address: %s
ZH Chicken chicken: %s

// DIALOGS:1644
EN Last address: Integer expression expected
ZH Chicken chicken: Chicken chicken chicken chicken

// DIALOGS:1650
EN First address exceeds last address
ZH Chicken chicken chicken chicken

// DIALOGS:1704
EN First exception in the range
ZH Chicken chicken chicken chicken

// DIALOGS:1706
EN Select or type in the first exception in the range
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:1708
EN Last exception in the range (included)
ZH Chicken chicken chicken chicken (chicken)

// DIALOGS:1710
EN Select or type in the last exception in the range
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:1716
EN Select range of exception codes
ZH Chicken chicken chicken chicken

// DIALOGS:1734
EN Same as above
ZH Chicken chicken

// DIALOGS:1806
EN Select type of the structure
ZH Chicken chicken chicken chicken

// DIALOGS:1808
EN Confirm selection
ZH Chicken chicken

// DIALOGS:1812
EN Select structure
ZH Chicken chicken

// DIALOGS:1822
EN Exactly one structure
ZH Chicken chicken chicken

// DIALOGS:1823
EN Set dump size to the size of the structure
ZH Chicken chicken chicken chicken chicken

// DIALOGS:1825
EN Specify count:
ZH Chicken chicken:

// DIALOGS:1826
EN Specify how many instances of the structure to decode
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:1847
EN Fill selection
ZH Chicken chicken

// DIALOGS:1848
EN Fill selection with the packed structures
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2013
EN Floating-point register in decimal form
ZH Chicken-chicken chicken chicken chicken

// DIALOGS:2014
EN Hex
ZH Chi

// DIALOGS:2017
EN Floating-point register in hexadecimal form
ZH Chicken-chicken chicken chicken chicken

// DIALOGS:2019
EN Modify associated tag
ZH Chicken chicken chicken

// DIALOGS:2020
EN Modify tag associated with register according to new contents
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:2031
EN High part
ZH Chicken

// DIALOGS:2033
EN Low part
ZH Chicken

// DIALOGS:2038
EN High part of 3DNow! operand in decimal form
ZH Chicken chicken 3Chic! chicken chicken chicken

// DIALOGS:2040
EN Low part of 3DNow! operand in decimal form
ZH Chicken chicken 3Chic! chicken chicken chicken

// DIALOGS:2044
EN High part of 3DNow! operand in hexadecimal form
ZH Chicken chicken 3Chic! chicken chicken chicken chicken

// DIALOGS:2046
EN Low part of 3DNow! operand in hexadecimal form
ZH Chicken chicken 3Chic! chicken chicken chicken chicken

// DIALOGS:2052
EN Edit 3DNow! operand
ZH Chic 3Chic! chicken

// DIALOGS:2060
EN 32-bit floating-point number in decimal form
ZH 32-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2064
EN 32-bit floating-point number in hexadecimal form
ZH 32-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2070
EN Edit 32-bit float
ZH Chic 32-chicken

// DIALOGS:2078
EN 64-bit floating-point number in decimal form
ZH 64-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2082
EN 64-bit floating-point number in hexadecimal form
ZH 64-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2088
EN Edit 64-bit float
ZH Chic 64-chicken

// DIALOGS:2096
EN 80-bit floating-point number in decimal form
ZH 80-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2100
EN 80-bit floating-point number in hexadecimal form
ZH 80-chicken chicken-chicken chicken chicken chicken

// DIALOGS:2106
EN Edit 80-bit float
ZH Chic 80-chicken

// DIALOGS:2114
EN Floating-point number in decimal form
ZH Chicken-chicken chicken chicken chicken

// DIALOGS:2116
EN Entire block
ZH Chicken chicken

// DIALOGS:2117
EN Search forward from the beginning of the block
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:2118
EN Forward
ZH Chicken

// DIALOGS:2119
EN Search forward from the current selection
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2120
EN Backward
ZH Chicken

// DIALOGS:2121
EN Search backward from the current selection
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2123
EN Aligned search
ZH Chicken chicken

// DIALOGS:2124
EN Search only at addresses aligned with dump
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2125
EN Accuracy:
ZH Chicken:

// DIALOGS:2128
EN High
ZH Chic

// DIALOGS:2130
EN Search with 1 (float) or 2 (double, long double) least significant digit accuracy
ZH Chicken chicken 1 (chicken) ch 2 (chicken, chicken chicken) chicken chicken chicken chicken

// DIALOGS:2132
EN Search with 0.01% (1.0e-4) accuracy
ZH Chicken chicken 0.01% (1.0e-4) chicken

// DIALOGS:2134
EN Search with 1% (1.0e-2) accuracy
ZH Chicken chicken 1% (1.0e-2) chicken

// DIALOGS:2136
EN Start search
ZH Chicken chicken

// DIALOGS:2138
EN Cancel search
ZH Chicken chicken

// DIALOGS:2140
EN Enter floating-point number to search
ZH Chicken chicken-chicken chicken chicken

// DIALOGS:2453
EN Byte
ZH Chic

// DIALOGS:2455
EN Most significant byte of MMX operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2457
EN Byte 6 of MMX operand
ZH Chic 6 chicken chicken

// DIALOGS:2459
EN Byte 5 of MMX operand
ZH Chic 5 chicken chicken

// DIALOGS:2461
EN Byte 4 of MMX operand
ZH Chic 4 chicken chicken

// DIALOGS:2463
EN Byte 3 of MMX operand
ZH Chic 3 chicken chicken

// DIALOGS:2465
EN Byte 2 of MMX operand
ZH Chic 2 chicken chicken

// DIALOGS:2467
EN Byte 1 of MMX operand
ZH Chic 1 chicken chicken

// DIALOGS:2469
EN Least significant byte of MMX operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2471
EN Word
ZH Chic

// DIALOGS:2473
EN Most significant word of MMX operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2475
EN Word 2 of MMX operand
ZH Chic 2 chicken chicken

// DIALOGS:2477
EN Word 1 of MMX operand
ZH Chic 1 chicken chicken

// DIALOGS:2479
EN Least significant word of MMX operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2481
EN Doubleword
ZH Chicken

// DIALOGS:2483
EN High doubleword of MMX operand
ZH Chicken chicken chicken chicken

// DIALOGS:2485
EN Low doubleword of MMX operand
ZH Chicken chicken chicken chicken

// DIALOGS:2487
EN Display data in hexadecimal format
ZH Chicken chicken chicken chicken

// DIALOGS:2489
EN Display data in signed decimal format
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2491
EN Display data in unsigned decimal format
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2496
EN Edit MMX operand
ZH Chicken chicken

// DIALOGS:2711
EN Most significant word of SSE operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2713
EN Word 6 of SSE operand
ZH Chic 6 chicken chicken

// DIALOGS:2715
EN Word 5 of SSE operand
ZH Chic 5 chicken chicken

// DIALOGS:2717
EN Word 4 of SSE operand
ZH Chic 4 chicken chicken

// DIALOGS:2719
EN Word 3 of SSE operand
ZH Chic 3 chicken chicken

// DIALOGS:2721
EN Word 2 of SSE operand
ZH Chic 2 chicken chicken

// DIALOGS:2723
EN Word 1 of SSE operand
ZH Chic 1 chicken chicken

// DIALOGS:2725
EN Least significant word of SSE operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2729
EN Most significant doubleword of SSE operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2731
EN Doubleword 2 of SSE operand
ZH Chicken 2 chicken chicken

// DIALOGS:2733
EN Doubleword 1 of SSE operand
ZH Chicken 1 chicken chicken

// DIALOGS:2735
EN Least significant doubleword of SSE operand
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:2739
EN Most significant float of SSE operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2741
EN Float 2 of SSE operand
ZH Chicken 2 chicken chicken

// DIALOGS:2743
EN Float 1 of SSE operand
ZH Chicken 1 chicken chicken

// DIALOGS:2745
EN Least significant float of SSE operand
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2747
EN Double
ZH Chicken

// DIALOGS:2749
EN High quadword of SSE operand as floating-point number
ZH Chicken chicken chicken chicken chicken-chicken chicken

// DIALOGS:2751
EN Low quadword of SSE operand as floating-point number
ZH Chicken chicken chicken chicken chicken-chicken chicken

// DIALOGS:2754
EN Display integer data in hexadecimal format
ZH Chicken chicken chicken chicken chicken

// DIALOGS:2756
EN Display integer data in signed decimal format
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:2758
EN Display integer data in unsigned decimal format
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:2763
EN Edit SSE operand
ZH Chicken chicken

// DIALOGS:2984
EN Type or select string here
ZH Chicken chicken chicken

// DIALOGS:2988
EN Close dialog
ZH Chicken chicken

// DIALOGS:2989
EN Enter string
ZH Chicken chicken

// DIALOGS:2996
EN Type or select expression here
ZH Chicken chicken chicken chicken

// DIALOGS:3010
EN Type or select search string here
ZH Chicken chicken chicken chicken

// DIALOGS:3012
EN Search direction:
ZH Chicken chicken:

// DIALOGS:3021
EN Ignore case
ZH Chicken chicken

// DIALOGS:3022
EN Ignore case while searching for text
ZH Chicken chicken chicken chicken chicken

// DIALOGS:3028
EN Enter search string
ZH Chicken chicken chicken

// DIALOGS:3037
EN Search:
ZH Chicken:

// DIALOGS:3081
EN Enter address expression:
ZH Chicken chicken chicken:

// DIALOGS:3083
EN Type or select label or expression here
ZH Chicken chicken chicken chicken chicken

// DIALOGS:3085
EN Matching labels:
ZH Chicken chicken:

// DIALOGS:3088
EN Labels in all modules that match entered string, doubleclick to select, Enter to follow
ZH Chicken chicken chicken chicken chicken chicken, chicken chicken chicken, Chicken chicken

// DIALOGS:3102
EN Executable from History:
ZH Chicken chicken chicken:

// DIALOGS:3104
EN Name of the recently opened executable file
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:3106
EN New arguments:
ZH Chicken chicken:

// DIALOGS:3108
EN Type or select new arguments here
ZH Chicken chicken chicken chicken

// DIALOGS:3110
EN New current directory:
ZH Chicken chicken chicken:

// DIALOGS:3112
EN Type or select new current directory here
ZH Chicken chicken chicken chicken chicken

// DIALOGS:3114
EN Browse for current directory
ZH Chicken chicken chicken chicken

// DIALOGS:3120
EN Enter new command line arguments
ZH Chicken chicken chicken chicken

// DIALOGS:3166
EN Follow label
ZH Chicken chicken

// DIALOGS:3168
EN Follow expression
ZH Chicken chicken

// DIALOGS:3295
EN Select current directory for executable
ZH Chicken chicken chicken chicken chicken

// DIALOGS:3317
EN Integer expression expected
ZH Chicken chicken chicken chicken

// DIALOGS:3323
EN Result doesn't fit into 16 bits
ZH Chicken chicken'chicken 16 chic

// DIALOGS:3522
EN Name
ZH Chic

// DIALOGS:3586
EN Drive
ZH Chicken

// DIALOGS:3589
EN Select local drive
ZH Chicken chicken

// DIALOGS:3590
EN Volume name
ZH Chicken chicken

// DIALOGS:3593
EN Volume name of the selected disk
ZH Chicken chicken chicken chicken

// DIALOGS:3594
EN File system
ZH Chicken chicken

// DIALOGS:3597
EN File system on the selected disk
ZH Chicken chicken chicken chicken

// DIALOGS:3598
EN Offset
ZH Chicken

// DIALOGS:3601
EN Offset in bytes
ZH Chicken chicken

// DIALOGS:3603
EN Offset in sectors
ZH Chicken chicken

// DIALOGS:3605
EN Offset in clusters
ZH Chicken chicken

// DIALOGS:3606
EN Size
ZH Chic

// DIALOGS:3609
EN Size in bytes
ZH Chicken chicken

// DIALOGS:3611
EN Size in sectors
ZH Chicken chicken

// DIALOGS:3613
EN Size in clusters
ZH Chicken chicken

// DIALOGS:3614
EN bytes
ZH chicken

// DIALOGS:3616
EN sectors
ZH chicken

// DIALOGS:3618
EN clusters
ZH chicken

// DIALOGS:3621
EN Dump specified extent
ZH Chicken chicken chicken

// DIALOGS:3626
EN Drive extent
ZH Chicken chicken

// DIALOGS:3765
EN Data extends beyond the disk size
ZH Chicken chicken chicken chicken

// DIALOGS:3767
EN Data offset exceeds disk size
ZH Chicken chicken chicken chicken

// DIALOGS:3769
EN Negative offsets are not allowed
ZH Chicken chicken chicken chicken

// DIALOGS:3771
EN Negative size is not allowed
ZH Chicken chicken chicken chicken

// DIALOGS:3773
EN Zero size is not allowed
ZH Chicken chicken chicken

// DIALOGS:3775
EN Data size exceeds 256 Mb
ZH Chicken chicken 256 Ch

// DIALOGS:3856
EN Unable to open specified drive
ZH Chicken chicken chicken chicken

// DIALOGS:3862
EN Low memory
ZH Chicken

// DIALOGS:3870
EN Unable to read data
ZH Chicken chicken chicken

// DIALOGS:3892
EN Drive %s%08LX..%08X
ZH Chicken %s%08LX..%08X

// DIALOGS:3896
EN Unable to create dump window
ZH Chicken chicken chicken chicken

// DIALOGS:3923
EN Specify physical drive extent
ZH Chicken chicken chicken chicken

// DIALOGS:3953
EN Type or select next Assembler command
ZH Chicken chicken chicken chicken chicken

// DIALOGS:3957
EN Keep size
ZH Chicken

// DIALOGS:3958
EN Don't modify code outside the initial selection
ZH Chi'chicken chicken chicken chicken chicken chicken

// DIALOGS:3960
EN Fill rest with NOPs
ZH Chicken chicken chicken

// DIALOGS:3961
EN If new command is shorter than old, fill rest with NOPs
ZH Chicken chicken chicken chicken, chicken chicken chicken

// DIALOGS:3962
EN Assemble
ZH Chicken

// DIALOGS:3963
EN Add typed command
ZH Chicken chicken

// DIALOGS:3964
EN Close
ZH Chicken

// DIALOGS:4072
EN No room for this command
ZH Chicken chicken chicken

// DIALOGS:4208
EN Command search pattern. To search for several patterns at once, separate them with semicolon
ZH Chicken chicken chicken. Chicken chicken chicken chicken chicken, chicken chicken chicken chicken

// DIALOGS:4211
EN Search
ZH Chicken

// DIALOGS:4215
EN Command search
ZH Chicken chicken

// DIALOGS:4346
EN Commands:
ZH Chicken:

// DIALOGS:4349
EN Enter the sequence of commands to search for
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:4352
EN Options:
ZH Chicken:

// DIALOGS:4355
EN Allow intermediate commands
ZH Chicken chicken chicken chicken

// DIALOGS:4356
EN Allow commands that do not influence the final result
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4358
EN Allow jumps from outside
ZH Chicken chicken chicken

// DIALOGS:4359
EN Allow jumps and calls from outside into the specified sequence
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4360
EN << Prev
ZH << Chic

// DIALOGS:4361
EN Previous pattern
ZH Chicken chicken

// DIALOGS:4362
EN Next >>
ZH Chic >>

// DIALOGS:4363
EN Next pattern
ZH Chicken chicken

// DIALOGS:4369
EN Search for the sequence of commands
ZH Chicken chicken chicken chicken chicken

// DIALOGS:4495
EN No commands
ZH Chicken chicken

// DIALOGS:4591
EN Enter search pattern as ASCII text using specified codepage
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4596
EN Enter search pattern as multibyte text using specified codepage
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4597
EN UNICODE
ZH CHICKEN

// DIALOGS:4600
EN Enter search pattern as UNICODE text
ZH Chicken chicken chicken chicken chicken

// DIALOGS:4601
EN HEX
ZH CHI

// DIALOGS:4605
EN Enter search pattern in hexadecimal form, question mark means any 4-bit nibble
ZH Chicken chicken chicken chicken chicken, chicken chicken chicken 4-chicken

// DIALOGS:4608
EN Toggles data entering mode (INS - insert, OVR - overwrite)
ZH Chicken chicken chicken (CHI - chicken, CHI - chicken)

// DIALOGS:4620
EN Ignore case, does not work with UNICODE!
ZH Chicken chicken, chicken chicken chicken!

// DIALOGS:4629
EN Search for data
ZH Chicken chicken

// DIALOGS:4677
EN Edit data as ASCII text using specified codepage
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:4682
EN Edit data as multibyte text using specified codepage
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4686
EN Edit data as UNICODE text
ZH Chicken chicken chicken

// DIALOGS:4690
EN Edit data in hexadecimal form
ZH Chicken chicken chicken chicken

// DIALOGS:4692
EN Toggles editing mode (INS - insert, OVR - overwrite)
ZH Chicken chicken chicken (CHI - chicken, CHI - chicken)

// DIALOGS:4695
EN Do not extend size of data over the initial selection
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:4820
EN &Undo
ZH &Chic

// DIALOGS:4820
EN Undo modifications in selected area
ZH Chicken chicken chicken chicken chicken

// DIALOGS:4822
EN Cu&t
ZH Ch&c

// DIALOGS:4822
EN Cut selection to clipboard
ZH Chicken chicken chicken

// DIALOGS:4824
EN &Copy
ZH &Chic

// DIALOGS:4824
EN Copy selection to clipboard
ZH Chicken chicken chicken chicken

// DIALOGS:4826
EN &Paste
ZH &Chicken

// DIALOGS:4826
EN Insert contents of clipboard
ZH Chicken chicken chicken chicken

// DIALOGS:4828
EN Select &all
ZH Chicken &chi

// DIALOGS:4828
EN Select all data
ZH Chicken chicken

// DIALOGS:4830
EN &Zero selection
ZH &Chicken chicken

// DIALOGS:4830
EN Set selected bytes to zero
ZH Chicken chicken chicken

// DIALOGS:5184
EN Unable to allocate %li. bytes of memory
ZH Chicken chicken %li. chicken chicken

// DIALOGS:5465
EN HEX +%02X
ZH CHI +%02X

// DIALOGS:5468
EN INS
ZH CHI

// DIALOGS:5468
EN OVR
ZH CHI

// DIALOGS:5545
EN ASCII
ZH CHICKEN

// DIALOGS:5552
EN UTF-8
ZH CHI-8

// DIALOGS:5554
EN MBCS
ZH CHIC

// DIALOGS:5766
EN Assumed by expression
ZH Chicken chicken chicken

// DIALOGS:5767
EN Boolean value (TRUE/FALSE)
ZH Chicken chicken (CHIC/CHICKEN)

// DIALOGS:5768
EN Window handle
ZH Chicken chicken

// DIALOGS:5769
EN Message code (WM_xxx)
ZH Chicken chicken (Chicken)

// DIALOGS:5778
EN Automatic
ZH Chicken

// DIALOGS:5858
EN Condition:
ZH Chicken:

// DIALOGS:5861
EN Set conditional expression
ZH Chicken chicken chicken

// DIALOGS:5863
EN Deactivate breakpoint but keep its data
ZH Chicken chicken chicken chicken chicken

// DIALOGS:5867
EN Set breakpoint
ZH Chicken chicken

// DIALOGS:5869
EN Do nothing
ZH Chicken

// DIALOGS:5881
EN Expressions (name=expr, name=expr...):
ZH Chicken chicken (chic=chic, chic=chic...):

// DIALOGS:5885
EN Expressions to protocol (separate multiple expressions with comma)
ZH Chicken chicken chicken (chicken chicken chicken chicken chicken)

// DIALOGS:5887
EN Decode expressions as:
ZH Chicken chicken chicken:

// DIALOGS:5889
EN Select how to decode the values of expressions
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5891
EN Assume function of type:
ZH Chicken chicken chicken:

// DIALOGS:5893
EN Select predefined decoding of call arguments
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5894
EN Never
ZH Chicken

// DIALOGS:5896
EN On condition
ZH Chicken chicken

// DIALOGS:5898
EN Always
ZH Chicken

// DIALOGS:5901
EN Pause program:
ZH Chicken chicken:

// DIALOGS:5903
EN Never pause on this breakpoint
ZH Chicken chicken chicken chicken

// DIALOGS:5905
EN Pause on this breakpoint if condition is TRUE
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5907
EN Always pause on this breakpoint
ZH Chicken chicken chicken chicken

// DIALOGS:5909
EN Log value of expressions:
ZH Chicken chicken chicken:

// DIALOGS:5911
EN Never log values of expressions on this breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5913
EN Log values of expressions if condition is TRUE
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5915
EN Always log values of expressions on this breakpoint
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:5917
EN Log function arguments:
ZH Chicken chicken chicken:

// DIALOGS:5919
EN Never log function arguments on this breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5921
EN Log function arguments if condition is TRUE
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5923
EN Always log function arguments on this breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:5925
EN Log returned value:
ZH Chicken chicken:

// DIALOGS:5927
EN Never log value returned by function
ZH Chicken chicken chicken chicken chicken

// DIALOGS:5929
EN Log value returned by function if condition is TRUE
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:5931
EN Always log value returned by functiont
ZH Chicken chicken chicken chicken chicken

// DIALOGS:5935
EN Pass count (dec.)
ZH Chicken (chi.)

// DIALOGS:5938
EN Skip specified number of breaks (decimal notation)
ZH Chicken chicken chicken chicken (chicken chicken)

// DIALOGS:5939
EN Actual count
ZH Chicken chicken

// DIALOGS:5942
EN Number of breaks skipped so far (decimal notation)
ZH Chicken chicken chicken chicken (chicken chicken)

// DIALOGS:5943
EN Periodical
ZH Chicken

// DIALOGS:5944
EN Check to break on each passcount-th breakpoint
ZH Chicken chicken chicken chicken-chicken chicken

// DIALOGS:6129
EN Breakpoint specifies no action and will be removed!
ZH Chicken chicken chicken chicken chicken chicken!

// DIALOGS:6141
EN Condition: %s
ZH Chicken: %s

// DIALOGS:6157
EN Expression: %s
ZH Chicken: %s

// DIALOGS:6230
EN Set breakpoint at
ZH Chicken chicken

// DIALOGS:6232
EN Edit breakpoint at
ZH Chicken chicken

// DIALOGS:6237
EN Set breakpoints at
ZH Chicken chicken

// DIALOGS:6239
EN Edit breakpoints at
ZH Chicken chicken chicken

// DIALOGS:6458
EN Break on:
ZH Chicken:

// DIALOGS:6460
EN Read access
ZH Chicken chicken

// DIALOGS:6461
EN Break when memory range is accessed for read
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:6462
EN Write access
ZH Chicken chicken

// DIALOGS:6463
EN Break when memory range is accessed for write
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:6464
EN Execution
ZH Chicken

// DIALOGS:6465
EN Break when command from the memory range is executed
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:6782
EN Set memory breakpoint at
ZH Chicken chicken chicken

// DIALOGS:6784
EN Edit memory breakpoint at
ZH Chicken chicken chicken

// DIALOGS:6928
EN Break when command at the specified address is executed
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:6929
EN Access (R/W)
ZH Chicken (C/C)

// DIALOGS:6930
EN Break when data is accessed (but not executed)
ZH Chicken chicken chicken chicken (chicken chicken)

// DIALOGS:6931
EN Write
ZH Chicken

// DIALOGS:6932
EN Break when data is written to the specified location
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:6935
EN Data size:
ZH Chicken:

// DIALOGS:6938
EN Break only on the specified address
ZH Chicken chicken chicken chicken chicken

// DIALOGS:6940
EN Breakpoint is 2 bytes long
ZH Chicken chicken 2 chicken

// DIALOGS:6941
EN Dword
ZH Chicken

// DIALOGS:6942
EN Breakpoint is 4 bytes long
ZH Chicken chicken 4 chicken

// DIALOGS:6945
EN Hardware slot:
ZH Chicken chicken:

// DIALOGS:6948
EN Check to use hardware breakpoint 1
ZH Chicken chicken chicken chicken 1

// DIALOGS:6950
EN Current type of hardware breakpoint 1
ZH Chicken chicken chicken chicken chicken 1

// DIALOGS:6952
EN Current address of hardware breakpoint 1
ZH Chicken chicken chicken chicken chicken 1

// DIALOGS:6954
EN Check to use hardware breakpoint 2
ZH Chicken chicken chicken chicken 2

// DIALOGS:6956
EN Current type of hardware breakpoint 2
ZH Chicken chicken chicken chicken chicken 2

// DIALOGS:6958
EN Current address of hardware breakpoint 2
ZH Chicken chicken chicken chicken chicken 2

// DIALOGS:6960
EN Check to use hardware breakpoint 3
ZH Chicken chicken chicken chicken 3

// DIALOGS:6962
EN Current type of hardware breakpoint 3
ZH Chicken chicken chicken chicken chicken 3

// DIALOGS:6964
EN Current address of hardware breakpoint 3
ZH Chicken chicken chicken chicken chicken 3

// DIALOGS:6966
EN Check to use hardware breakpoint 4
ZH Chicken chicken chicken chicken 4

// DIALOGS:6968
EN Current type of hardware breakpoint 4
ZH Chicken chicken chicken chicken chicken 4

// DIALOGS:6970
EN Current address of hardware breakpoint 4
ZH Chicken chicken chicken chicken chicken 4

// DIALOGS:7071
EN Log values of expressions:
ZH Chicken chicken chicken:

// DIALOGS:7093
EN Always log value returned by function
ZH Chicken chicken chicken chicken chicken

// DIALOGS:7100
EN Current count
ZH Chicken chicken

// DIALOGS:7221
EN R/W:%i
ZH C/C:%i

// DIALOGS:7225
EN Empty
ZH Chicken

// DIALOGS:7533
EN Hardware breakpoint %i at
ZH Chicken chicken chicken %i ch

// DIALOGS:7535
EN Hardware breakpoint at
ZH Chicken chicken chicken

// DIALOGS:7729
EN Pause run trace when any checked condition is met:
ZH Chicken chicken chicken chicken chicken chicken:

// DIALOGS:7734
EN Pause run trace when program enters specified range
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:7736
EN Low limit of in range (hexadecimal)
ZH Chicken chicken chicken (chicken chicken)

// DIALOGS:7740
EN High limit of in range (hexadecimal, not included)
ZH Chicken chicken chicken (chicken chicken, chicken chicken)

// DIALOGS:7743
EN Pause run trace when program leaves specified range
ZH Chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:7745
EN Low limit of out range (hexadecimal)
ZH Chicken chicken chicken (chicken chicken)

// DIALOGS:7749
EN High limit of out range (hexadecimal, not included)
ZH Chicken chicken chicken (chicken chicken, chicken chicken)

// DIALOGS:7752
EN EIP points to modified command (backup necessary!)
ZH Chicken chicken chicken chicken (chicken chicken!)

// DIALOGS:7754
EN Don't forget to create backup when tracing self-modified code!
ZH Chi'chicken chicken chicken chicken chicken chicken-chicken chicken!

// DIALOGS:7757
EN Memory range 1 accessed
ZH Chicken chicken 1 chicken

// DIALOGS:7758
EN Pause run trace when memory range 1 is accessed
ZH Chicken chicken chicken chicken 1 chicken chicken

// DIALOGS:7760
EN Low limit of memory range 1 (hexadecimal)
ZH Chicken chicken chicken 1 (chicken chicken)

// DIALOGS:7764
EN High limit of memory range 1 (not included)
ZH Chicken chicken chicken 1 (chicken chicken)

// DIALOGS:7765
EN on
ZH ch

// DIALOGS:7768
EN Read|Write|R/W
ZH Chic|Chicken|C/C

// DIALOGS:7769
EN Type of memory access to memory range 1
ZH Chicken chicken chicken chicken chicken 1

// DIALOGS:7771
EN Memory range 2 accessed
ZH Chicken chicken 2 chicken

// DIALOGS:7772
EN Pause run trace when memory range 2 is accessed
ZH Chicken chicken chicken chicken 2 chicken chicken

// DIALOGS:7774
EN Low limit of memory range 2 (hexadecimal)
ZH Chicken chicken chicken 2 (chicken chicken)

// DIALOGS:7778
EN High limit of memory range 2 (not included)
ZH Chicken chicken chicken 2 (chicken chicken)

// DIALOGS:7783
EN Type of memory access to memory range 2
ZH Chicken chicken chicken chicken chicken 2

// DIALOGS:7786
EN Condition 1 is true
ZH Chicken 1 chicken

// DIALOGS:7787
EN Pause run trace when condition 1 is true
ZH Chicken chicken chicken chicken 1 chicken

// DIALOGS:7789
EN Condition 1
ZH Chicken 1

// DIALOGS:7791
EN Condition 2 is true
ZH Chicken 2 chicken

// DIALOGS:7792
EN Pause run trace when condition 2 is true
ZH Chicken chicken chicken chicken 2 chicken

// DIALOGS:7794
EN Condition 2
ZH Chicken 2

// DIALOGS:7796
EN Condition 3 is true
ZH Chicken 3 chicken

// DIALOGS:7797
EN Pause run trace when condition 3 is true
ZH Chicken chicken chicken chicken 3 chicken

// DIALOGS:7799
EN Condition 3
ZH Chicken 3

// DIALOGS:7801
EN Condition 4 is true
ZH Chicken 4 chicken

// DIALOGS:7802
EN Pause run trace when condition 4 is true
ZH Chicken chicken chicken chicken 4 chicken

// DIALOGS:7804
EN Condition 4
ZH Chicken 4

// DIALOGS:7807
EN Command count is
ZH Chicken chicken

// DIALOGS:7808
EN Pause run trace after specified (decimal) number of commands are traced
ZH Chicken chicken chicken chicken (chicken) chicken chicken chicken chicken

// DIALOGS:7810
EN Number of commands to trace (decimal)
ZH Chicken chicken chicken chicken (chicken)

// DIALOGS:7811
EN (Current
ZH (Chicken

// DIALOGS:7814
EN Current number of traced commands (decimal)
ZH Chicken chicken chicken chicken (chicken)

// DIALOGS:7817
EN Reset
ZH Chicken

// DIALOGS:7818
EN Reset number of commands traced so far
ZH Chicken chicken chicken chicken chicken

// DIALOGS:7821
EN Command is (1)
ZH Chicken (1)

// DIALOGS:7822
EN Pause run trace when command to be executed is same as specified
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:7825
EN Command 1 (pseudooperands are allowed, use semicolon to separate multiple patterns)
ZH Chicken 1 (chicken chicken chicken, chicken chicken chicken chicken chicken chicken)

// DIALOGS:7827
EN Command is (2)
ZH Chicken (2)

// DIALOGS:7831
EN Command 2 (pseudooperands are allowed, use semicolon to separate multiple patterns)
ZH Chicken 2 (chicken chicken chicken, chicken chicken chicken chicken chicken chicken)

// DIALOGS:7836
EN Set condition
ZH Chicken chicken

// DIALOGS:7840
EN Condition to pause run or hit trace
ZH Chicken chicken chicken chicken chicken

// DIALOGS:7985
EN Invalid low in range limit
ZH Chicken chicken chicken

// DIALOGS:7988
EN Invalid high in range limit
ZH Chicken chicken chicken chicken

// DIALOGS:7991
EN Empty in range
ZH Chicken chicken

// DIALOGS:7994
EN Low in limit exceeds high limit
ZH Chicken chicken chicken chicken

// DIALOGS:8005
EN Invalid low out range limit
ZH Chicken chicken chicken chicken

// DIALOGS:8008
EN Invalid high out range limit
ZH Chicken chicken chicken chicken

// DIALOGS:8011
EN Empty out range
ZH Chicken chicken

// DIALOGS:8014
EN Low out limit exceeds high limit
ZH Chicken chicken chicken chicken

// DIALOGS:8025
EN Memory range %i:
ZH Chicken chicken %i:

// DIALOGS:8027
EN Invalid low limit
ZH Chicken chicken

// DIALOGS:8030
EN Invalid high limit
ZH Chicken chicken

// DIALOGS:8033
EN Empty range
ZH Chicken chicken

// DIALOGS:8035
EN Low limit exceeds high limit
ZH Chicken chicken chicken chicken

// DIALOGS:8049
EN Condition %i:
ZH Chicken %i:

// DIALOGS:8063
EN Invalid count
ZH Chicken chicken

// DIALOGS:8066
EN Count is zero
ZH Chicken chicken

// DIALOGS:8070
EN Count is same as or lower than actual count
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8085
EN Command %i:
ZH Chicken %i:

// DIALOGS:8171
EN Protocol the following commands:
ZH Chicken chicken chicken chicken:

// DIALOGS:8173
EN All commands
ZH Chicken chicken

// DIALOGS:8173
EN Protocol all commands
ZH Chicken chicken chicken

// DIALOGS:8175
EN Taken jumps, calls, returns and their destinations
ZH Chicken chicken, chicken, chicken chicken chicken chicken

// DIALOGS:8177
EN Protocol all control transfer commands and their destinations
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DIALOGS:8179
EN Call destinations
ZH Chicken chicken

// DIALOGS:8180
EN Protocol only entry points of called subroutines
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8182
EN Commands that access the following memory ranges:
ZH Chicken chicken chicken chicken chicken chicken:

// DIALOGS:8183
EN Protocol only commands accessing specified memory
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8185
EN Range 1
ZH Chicken 1

// DIALOGS:8186
EN Protocol commands that access memory range 1
ZH Chicken chicken chicken chicken chicken 1

// DIALOGS:8199
EN Range 2
ZH Chicken 2

// DIALOGS:8200
EN Protocol commands that access memory range 2
ZH Chicken chicken chicken chicken chicken 2

// DIALOGS:8213
EN Protocol only the following EIP ranges:
ZH Chicken chicken chicken chicken chicken:

// DIALOGS:8214
EN Limit protocolling to the specified pieces of code
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8217
EN List of EIP ranges to protocol, second address is not included
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken

// DIALOGS:8218
EN Add range
ZH Chicken

// DIALOGS:8219
EN Add range of addresses
ZH Chicken chicken chicken

// DIALOGS:8220
EN Follow in CPU
ZH Chicken chicken

// DIALOGS:8221
EN Follow selected range in the CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8222
EN Delete range
ZH Chicken chicken

// DIALOGS:8223
EN Delete selected range of addresses
ZH Chicken chicken chicken chicken

// DIALOGS:8224
EN Clear list
ZH Chicken

// DIALOGS:8225
EN Delete all ranges
ZH Chicken chicken

// DIALOGS:8227
EN Symbolic
ZH Chicken

// DIALOGS:8227
EN Show symbolic names if available
ZH Chicken chicken chicken chicken

// DIALOGS:8231
EN Set protocolling mode
ZH Chicken chicken chicken

// DIALOGS:8233
EN Discard all modifications
ZH Chicken chicken chicken

// DIALOGS:8235
EN Commands protocolled by run trace
ZH Chicken chicken chicken chicken

// DIALOGS:8376
EN Add address range to protocol
ZH Chicken chicken chicken chicken

// DIALOGS:8393
EN Edit address range to protocol
ZH Chicken chicken chicken chicken

// DIALOGS:8457
EN All memory ranges are disabled
ZH Chicken chicken chicken chicken

// DIALOGS:8540
EN Check to allow debuggee execution on this CPU
ZH Chicken chicken chicken chicken chicken chicken

// DIALOGS:8604
EN Accept affinity
ZH Chicken chicken

// DIALOGS:8608
EN Select affinity mask
ZH Chicken chicken chicken

// DIALOGS:8622
EN CPU %i
ZH CHI %i

// DIALOGS:8653
EN Set affinity mask
ZH Chicken chicken

// DIALOGS:8677
EN List of found items
ZH Chicken chicken chicken

// DIALOGS:8679
EN Go to the specified location
ZH Chicken chicken chicken chicken

// DIALOGS:8681
EN Go back to the original command
ZH Chicken chicken chicken chicken

// DIALOGS:8683
EN Known jumps and calls
ZH Chicken chicken chicken

// DIALOGS:8689
EN List of code locations
ZH Chicken chicken chicken

// DIALOGS:8693
EN Cancel code browsing
ZH Chicken chicken chicken

// DIALOGS:8695
EN Browse code locations
ZH Chicken chicken chicken

// DIALOGS:8747
EN Jump
ZH Chic

// DIALOGS:8750
EN Table jump
ZH Chicken

// DIALOGS:8753
EN RET
ZH CHI

// DIALOGS:8756
EN Call
ZH Chic

// DIALOGS:8759
EN Table call
ZH Chicken

// DIALOGS:8793
EN Switch origin
ZH Chicken chicken

// DIALOGS:8803
EN default case
ZH chicken chicken

// DIALOGS:8806
EN case
ZH chic

// DIALOGS:8808
EN cases
ZH chicken

// DIALOGS:8833
EN and others
ZH chicken

// DIALOGS:8936
EN Known calls from
ZH Chicken chicken

// DIALOGS:8938
EN Known jumps from
ZH Chicken chicken

// DIALOGS:8957
EN All known jumps and calls to
ZH Chicken chicken chicken chicken

// DIALOGS:8959
EN Local jumps and calls to
ZH Chicken chicken chicken

// DIALOGS:8990
EN Cases of switch
ZH Chicken chicken

// DIALOGS:9208
EN Code page
ZH Chicken

// DIALOGS:9235
EN Select multibyte code page
ZH Chicken chicken chicken

// DIALOGS:9237
EN Select code page
ZH Chicken chicken

// DUMP:107
EN Source
ZH Chicken

// DUMP:108
EN Source code
ZH Chicken chicken

// DUMP:111
EN Profile  Comments
ZH Chicken chicken

// DUMP:112
EN Profile and comments
ZH Chicken chicken chicken

// DUMP:115
EN Profile  Source
ZH Chicken chicken

// DUMP:116
EN Profile and source code
ZH Chicken chicken chicken

// DUMP:119
EN Comments
ZH Chicken

// DUMP:148
EN Locked
ZH Chicken

// DUMP:149
EN Press to allow automatic repositioning
ZH Chicken chicken chicken chicken chicken

// DUMP:151
EN Backup
ZH Chicken

// DUMP:152
EN Press to view current data
ZH Chicken chicken chicken

// DUMP:155
EN Address of first displayed byte in a row
ZH Chicken chicken chicken chicken chicken

// DUMP:173
EN Hex dump
ZH Chicken

// DUMP:174
EN Hexadecimal dump, press to change dump type
ZH Chicken chicken, chicken chicken chicken

// DUMP:178
EN ASCII dump, press to toggle between UNICODE and ASCII
ZH Chicken, chicken chicken chicken chicken chicken

// DUMP:191
EN UNICODE dump, press to toggle between UNICODE and ASCII
ZH Chicken chicken, chicken chicken chicken chicken chicken

// DUMP:202
EN Multibyte
ZH Chicken

// DUMP:204
EN Multibyte text, press to change to UNICODE or ASCII
ZH Chicken chicken, chicken chicken chicken chicken chicken

// DUMP:211
EN ASCII dump
ZH Chicken

// DUMP:212
EN ASCII dump, press to change dump type
ZH Chicken, chicken chicken chicken

// DUMP:219
EN UNICODE dump
ZH Chicken chicken

// DUMP:220
EN UNICODE dump, press to change dump type
ZH Chicken chicken, chicken chicken chicken

// DUMP:227
EN 16-bit signed decimal dump
ZH 16-chicken chicken chicken

// DUMP:229
EN 16-bit signed decimal dump, press to change dump type
ZH 16-chicken chicken chicken, chicken chicken chicken

// DUMP:232
EN 32-bit signed decimal dump
ZH 32-chicken chicken chicken

// DUMP:234
EN 32-bit signed decimal dump, press to change dump type
ZH 32-chicken chicken chicken, chicken chicken chicken

// DUMP:242
EN 16-bit unsigned decimal dump
ZH 16-chicken chicken chicken

// DUMP:244
EN 16-bit unsigned decimal dump, press to change dump type
ZH 16-chicken chicken chicken, chicken chicken chicken

// DUMP:247
EN 32-bit unsigned decimal dump
ZH 32-chicken chicken chicken

// DUMP:249
EN 32-bit unsigned decimal dump, press to change dump type
ZH 32-chicken chicken chicken, chicken chicken chicken

// DUMP:257
EN 16-bit hex dump
ZH 16-chicken chicken

// DUMP:258
EN 16-bit hexadecimal dump, press to change dump type
ZH 16-chicken chicken chicken, chicken chicken chicken

// DUMP:261
EN 32-bit hex dump
ZH 32-chicken chicken

// DUMP:262
EN 32-bit hexadecimal dump, press to change dump type
ZH 32-chicken chicken chicken, chicken chicken chicken

// DUMP:272
EN 32-bit floating-point dump
ZH 32-chicken chicken-chicken

// DUMP:274
EN 32-bit floating-point numbers, press to change dump type
ZH 32-chicken chicken-chicken chicken, chicken chicken chicken

// DUMP:277
EN 64-bit floating-point dump
ZH 64-chicken chicken-chicken

// DUMP:279
EN 64-bit floating-point numbers, press to change dump type
ZH 64-chicken chicken-chicken chicken, chicken chicken chicken

// DUMP:282
EN 80-bit floating-point dump
ZH 80-chicken chicken-chicken

// DUMP:284
EN 80-bit floating-point numbers, press to change dump type
ZH 80-chicken chicken-chicken chicken, chicken chicken chicken

// DUMP:294
EN Value
ZH Chicken

// DUMP:295
EN 32-bit address, press to change dump type
ZH 32-chicken chicken, chicken chicken chicken

// DUMP:299
EN Address-related comments
ZH Chicken-chicken chicken

// DUMP:340
EN Hexadecimal dump of disassembled commands
ZH Chicken chicken chicken chicken chicken

// DUMP:343
EN Command
ZH Chicken

// DUMP:344
EN Disassembled commands
ZH Chicken chicken chicken

// DUMP:358
EN Hexadecimal dump of decoded data
ZH Chicken chicken chicken chicken

// DUMP:361
EN Decoded data
ZH Chicken chicken

// DUMP:992
EN Selection %08X..%08X (1. byte)
ZH Chicken %08X..%08X (1. chic)

// DUMP:994
EN Selection %08X..%08X (%i. bytes)
ZH Chicken %08X..%08X (%i. chicken)

// DUMP:1020
EN Current EIP
ZH Chicken chicken

// DUMP:1024
EN Current ESP
ZH Chicken chicken

// DUMP:1028
EN Disabled breakpoint
ZH Chicken chicken chicken

// DUMP:1030
EN Conditional breakpoint
ZH Chicken chicken chicken

// DUMP:1032
EN Breakpoint
ZH Chicken

// DUMP:1193
EN Dump -
ZH Chic -

// DUMP:2296
EN End of SEH chain
ZH Chicken chicken

// DUMP:2298
EN Pointer to next SEH record
ZH Chicken chicken chicken

// DUMP:2301
EN SE handler
ZH Chicken

// DUMP:2376
EN RETURN from
ZH Chicken chicken

// DUMP:2379
EN to
ZH ch

// DUMP:2381
EN RETURN to
ZH Chicken

// DUMP:3095
EN This dump is read only
ZH Chicken chicken chicken

// DUMP:3095
EN Read only dump
ZH Chicken chicken

// DUMP:3131
EN Internal copy of file '%s' is not modified. Do you really want to save unchanged dump to disk?
ZH Chicken chicken chicken '%s' chicken chicken. Chicken chicken chicken chicken chicken chicken?

// DUMP:3132
EN File unchanged
ZH Chicken chicken

// DUMP:3138
EN File '%s' on the disk is lost or unreadable. Do you want to save the internal copy back to disk?
ZH Chic '%s' chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken?

// DUMP:3139
EN Original file lost
ZH Chicken chicken

// DUMP:3142
EN Internal copy of file '%s' differs from original. Do you want to save modified file back to disk?
ZH Chicken chicken chicken '%s' chicken chicken chicken. Chicken chicken chicken chicken chicken chicken?

// DUMP:3143
EN File changed
ZH Chicken chicken

// DUMP:3147
EN Size of file '%s' on the disk differs from the size of its internal copy. Probably disk file was modified. Do you want to save the internal copy?
ZH Chicken chicken '%s' chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken. Chicken chicken chicken chicken chicken?

// DUMP:3151
EN If you answer 'Yes', you will be asked for the filename. If you answer 'No', you will lose any changes you have made. Press 'Cancel' to keep
ZH Chicken chicken 'Chi', chicken chicken chicken chicken. Chicken chicken 'Ch', chicken chicken chicken chicken chicken. Chicken 'Chicken' chicken

// DUMP:3153
EN dump window open.
ZH chicken chicken.

// DUMP:3155
EN OllyDbg running.
ZH Chicken chicken.

// DUMP:3173
EN Save file as
ZH Chicken chicken

// DUMP:3193
EN Unable to backup file '%s'. Please try another name
ZH Chicken chicken chicken '%s'. Chicken chicken chicken

// DUMP:3200
EN Unable to create file '%s'. Please try another name
ZH Chicken chicken chicken '%s'. Chicken chicken chicken

// DUMP:3206
EN File %s
ZH Chic %s

// DUMP:3209
EN Error saving file '%s'. Please try another name
ZH Chicken chicken '%s'. Chicken chicken chicken

// DUMP:3312
EN Huge clipboard data size
ZH Chicken chicken chicken

// DUMP:3316
EN Estimated size of clipboard buffer is %i. MB. Data at the end of the selection may get lost. Do you want to continue?\n\nTip: If you need all the selected data, try to reduce width of some columns, or save data directly to file.
ZH Chicken chicken chicken chicken chicken %i. CH. Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken?\n\nChi: Chicken chicken chicken chicken, chicken chicken chicken chicken chicken, chicken chicken chicken chicken.

// DUMP:3386
EN Unable to copy the whole selection to the clipboard
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:3905
EN Memory list has changed, dump no longer corresponds to memory block
ZH Chicken chicken chicken, chicken chicken chicken chicken chicken

// DUMP:3938
EN Unable to create backup
ZH Chicken chicken chicken

// DUMP:4025
EN Load backup from file
ZH Chicken chicken chicken

// DUMP:4027
EN Save backup to file
ZH Chicken chicken chicken

// DUMP:4029
EN Save current data to file
ZH Chicken chicken chicken

// DUMP:4036
EN Unable to open or read file '%s'.
ZH Chicken chicken chicken chicken '%s'.

// DUMP:4040
EN File size does not match
ZH Chicken chicken chicken

// DUMP:4042
EN Size of backup file '%s' (%i. bytes) differs from the size of dump (%i. bytes). Load anyway and %s?
ZH Chicken chicken chicken '%s' (%i. chicken) chicken chicken chicken chicken (%i. chicken). Chicken chicken %s?

// DUMP:4043
EN fill the rest of backup with current data
ZH chicken chicken chicken chicken chicken

// DUMP:4044
EN truncate the file
ZH chicken chicken

// DUMP:4075
EN Unable to create file '%s'
ZH Chicken chicken chicken '%s'

// DUMP:4080
EN Error writing backup to file '%s'
ZH Chicken chicken chicken chicken '%s'

// DUMP:4107
EN Error writing data to file '%s'
ZH Chicken chicken chicken '%s'

// DUMP:4172
EN Unable to copy
ZH Chicken chicken

// DUMP:4325
EN Edit file at offset %08X
ZH Chicken chicken chicken %08X

// DUMP:4330
EN Edit code at address
ZH Chicken chicken chicken

// DUMP:4332
EN Edit data at address
ZH Chicken chicken chicken

// DUMP:4452
EN word
ZH chic

// DUMP:4453
EN doubleword
ZH chicken

// DUMP:4455
EN at offset %08X
ZH chicken %08X

// DUMP:4639
EN Unable to locate executable file
ZH Chicken chicken chicken chicken

// DUMP:4653
EN Copy to Import Address Table
ZH Chicken chicken chicken chicken

// DUMP:4657
EN You are going to copy modifications back to the Import Address Table. This is usually bad idea because IAT in memory is updated by the Process Loader and differs from that in the executable file. Do you still want to copy selection to the executable file?
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken?

// DUMP:4664
EN Unable to copy selection
ZH Chicken chicken chicken

// DUMP:4668
EN Some fixups are only partially selected. OllyDbg is unable to copy them to the executable file. File dump was not modified.%s
ZH Chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken.%s

// DUMP:4670
EN To visualize fixups, please check 'Underline fixups' in Code dump options.
ZH Chicken chicken chicken, chicken chicken 'Chicken chicken' chicken chicken chicken.

// DUMP:4673
EN Selection contains modified fixups.
ZH Chicken chicken chicken chicken.

// DUMP:4676
EN It is hardly possible that main program will be loaded on different base addres. However, should it happen,
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken, chicken chicken,

// DUMP:4679
EN Please keep in mind that in the case that this DLL will be loaded on different base address,
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken,

// DUMP:4682
EN OS will adjust fixups, thus modifying your code. Were you not carefull enough, this may have disastrous effects on the debugged application.
ZH Chicken chicken chicken, chicken chicken chicken. Chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken.

// DUMP:4683
EN Modified fixups
ZH Chicken chicken

// DUMP:4685
EN Modified file
ZH Chicken chicken

// DUMP:4687
EN Internal copy of file '%s' was modified. Choose 'Save file' from popup menu if you want to save modifications to disk.
ZH Chicken chicken chicken '%s' chicken chicken. Chicken 'Chicken' chicken chicken chicken chicken chicken chicken chicken.

// DUMP:4718
EN Unable to read memory of debugged process
ZH Chicken chicken chicken chicken chicken

// DUMP:4740
EN You are going to copy modifications back to the Import Address Table. This is usually bad idea because IAT in memory is updated by the Process Loader and differs from that in the executable file. IAT will be excluded from Copy all modifications.
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken.

// DUMP:4815
EN Some fixups are only partially available. OllyDbg is unable to copy them to the executable file. File dump was not modified. Remaining modifications, if any, will not be saved.%s
ZH Chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken. Chicken chicken chicken, chicken, chicken chicken.%s

// DUMP:4821
EN Unable to copy selection to the executable file. Search stopped. Remaining modifications, if any, will not be saved.
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken. Chicken chicken chicken, chicken, chicken chicken.

// DUMP:4830
EN Memory block and its backup copy are identical
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:4833
EN Memory block contains modified fixups.
ZH Chicken chicken chicken chicken chicken.

// DUMP:4873
EN Unable to access stack memory
ZH Chicken chicken chicken chicken

// DUMP:4875
EN Enter value to push
ZH Chicken chicken chicken

// DUMP:4947
EN Unable to set temporary breakpoint
ZH Chicken chicken chicken chicken

// DUMP:5117
EN Limit run trace protocol to selection
ZH Chicken chicken chicken chicken chicken

// DUMP:5119
EN Limit run trace protocol to current procedure
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:5123
EN Add selection to run trace protocol
ZH Chicken chicken chicken chicken chicken

// DUMP:5125
EN Add procedure to run trace protocol
ZH Chicken chicken chicken chicken chicken

// DUMP:5174
EN Add label at
ZH Chicken chicken

// DUMP:5176
EN Add comment at
ZH Chicken chicken

// DUMP:5178
EN Edit label at
ZH Chicken chicken

// DUMP:5180
EN Edit comment at
ZH Chicken chicken

// DUMP:5253
EN Suspicious location
ZH Chicken chicken chicken

// DUMP:5255
EN You are going to set execution point at the location %08X which is probably not the first byte of the command. Are you sure?
ZH Chicken chicken chicken chicken chicken chicken chicken %08X chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// DUMP:5484
EN Enter expression to follow
ZH Chicken chicken chicken

// DUMP:5494
EN Offset beyond the end of file
ZH Chicken chicken chicken chicken

// DUMP:5496
EN No memory at the specified address
ZH Chicken chicken chicken chicken

// DUMP:5812
EN Decode memory area starting at address %08X as a structure of the following type:
ZH Chicken chicken chicken chicken chicken %08X chicken chicken chicken chicken chicken:

// DUMP:5867
EN Item not found
ZH Chicken chicken

// DUMP:6083
EN Commands found in
ZH Chicken chicken

// DUMP:6085
EN Command sequences found in
ZH Chicken chicken chicken

// DUMP:6108
EN References to
ZH Chicken chicken

// DUMP:6154
EN References to constant
ZH Chicken chicken chicken

// DUMP:6178
EN Enter constant or expression to search for
ZH Chicken chicken chicken chicken chicken

// DUMP:6200
EN Modifications in module
ZH Chicken chicken chicken

// DUMP:6238
EN Text strings referenced in
ZH Chicken chicken chicken

// DUMP:6254
EN GUIDs referenced in
ZH Chicken chicken chicken

// DUMP:6268
EN All user-defined comments
ZH Chicken-chicken chicken

// DUMP:6282
EN Procedures in
ZH Chicken chicken

// DUMP:6298
EN Switches in
ZH Chicken chicken

// DUMP:6316
EN Floating-point constants referenced in
ZH Chicken-chicken chicken chicken chicken

// DUMP:6341
EN No record found
ZH Chicken chicken

// DUMP:6567
EN No help on selected command
ZH Chicken chicken chicken chicken

// DUMP:6641
EN Decode as a structure of the following type:
ZH Chicken chicken chicken chicken chicken chicken:

// DUMP:6712
EN Create backup
ZH Chicken chicken

// DUMP:6713
EN Create backup copy of data displayed in dump window
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6715
EN Read executable file
ZH Chicken chicken chicken

// DUMP:6716
EN Create backup from the section images in executable file
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6718
EN View backup
ZH Chicken chicken

// DUMP:6719
EN View backup copy of data displayed in dump window
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6721
EN View current data
ZH Chicken chicken

// DUMP:6722
EN Finish backup view and display current data
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6724
EN Update backup
ZH Chicken chicken

// DUMP:6725
EN Update backup copy of data displayed in dump window
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6727
EN Delete backup
ZH Chicken chicken

// DUMP:6728
EN Delete backup copy of data displayed in dump window
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6730
EN Load backup from file...
ZH Chicken chicken chicken...

// DUMP:6731
EN Read old backup from the disk
ZH Chicken chicken chicken chicken

// DUMP:6733
EN Save backup to file...
ZH Chicken chicken chicken...

// DUMP:6734
EN Save backup to file in binary format
ZH Chicken chicken chicken chicken chicken

// DUMP:6736
EN Save data to file...
ZH Chicken chicken...

// DUMP:6737
EN Save current data to file in binary format
ZH Chicken chicken chicken chicken chicken

// DUMP:6743
EN Undo selection
ZH Chicken chicken

// DUMP:6744
EN Undo modifications within selected block
ZH Chicken chicken chicken chicken chicken

// DUMP:6746
EN &Copy as table
ZH &Chicken chicken

// DUMP:6747
EN Copy selection to clipboard as seen on the screen
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6749
EN &Copy backup as table
ZH &Chicken chicken chicken

// DUMP:6752
EN Copy address
ZH Chicken chicken

// DUMP:6753
EN Copy address of selection to clipboard
ZH Chicken chicken chicken chicken chicken

// DUMP:6755
EN &Binary copy
ZH &Chicken chicken

// DUMP:6756
EN Copy selected data to clipboard in hexadecimal format
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6758
EN &Binary copy of backup
ZH &Chicken chicken chicken

// DUMP:6761
EN Binary &paste
ZH Chicken &chicken

// DUMP:6762
EN Paste data from clipboard in hexadecimal format
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6764
EN Edit word...
ZH Chicken...

// DUMP:6765
EN Edit first selected word
ZH Chicken chicken chicken

// DUMP:6767
EN Edit doubleword...
ZH Chicken chicken...

// DUMP:6768
EN Edit first selected doubleword
ZH Chicken chicken chicken chicken

// DUMP:6770
EN Edit 32-bit float...
ZH Chic 32-chicken...

// DUMP:6771
EN Edit selected 32-bit floating-point number
ZH Chicken chicken 32-chicken chicken-chicken chicken

// DUMP:6773
EN Edit 64-bit float...
ZH Chic 64-chicken...

// DUMP:6774
EN Edit selected 64-bit floating-point number
ZH Chicken chicken 64-chicken chicken-chicken chicken

// DUMP:6776
EN Edit 80-bit float...
ZH Chic 80-chicken...

// DUMP:6777
EN Edit 80-bit (long double) floating-point number
ZH Chic 80-chi (chicken chicken) chicken-chicken chicken

// DUMP:6779
EN Binary &edit...
ZH Chicken &chic...

// DUMP:6780
EN Edit selection in text and binary forms
ZH Chicken chicken chicken chicken chicken

// DUMP:6782
EN Fill with &zeros
ZH Chicken &chicken

// DUMP:6783
EN Fill selection with zeros
ZH Chicken chicken chicken

// DUMP:6785
EN Fill with &NOPs
ZH Chicken &Chic

// DUMP:6786
EN Fill selection with NOPs
ZH Chicken chicken chicken

// DUMP:6788
EN Fill with &FF's
ZH Chicken &CH'c

// DUMP:6789
EN Fill selection with codes 0xFF
ZH Chicken chicken chicken 0chi

// DUMP:6792
EN Select whole data
ZH Chicken chicken

// DUMP:6794
EN Select &procedure
ZH Chicken &chicken

// DUMP:6795
EN Select current procedure
ZH Chicken chicken chicken

// DUMP:6797
EN Select &structure
ZH Chicken &chicken

// DUMP:6798
EN Select current structure
ZH Chicken chicken chicken

// DUMP:6800
EN Copy to executable
ZH Chicken chicken

// DUMP:6801
EN Copy selection to executable file
ZH Chicken chicken chicken chicken

// DUMP:6803
EN Copy all modifications to executable
ZH Chicken chicken chicken chicken chicken

// DUMP:6804
EN Copy all modifications from memory block to executable file
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:6810
EN Toggle
ZH Chicken

// DUMP:6811
EN Toggle INT3 breakpoint
ZH Chicken3 chicken

// DUMP:6813
EN Conditional...
ZH Chicken chicken...

// DUMP:6814
EN Set or edit conditional INT3 breakpoint
ZH Chicken chicken chicken chicken3 chicken

// DUMP:6816
EN Conditional log...
ZH Chicken chicken...

// DUMP:6817
EN Set or edit conditional logging INT3 breakpoint
ZH Chicken chicken chicken chicken chicken3 chicken

// DUMP:6819
EN Run to selection
ZH Chicken chicken

// DUMP:6820
EN Run application till the first selected command is hit
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6823
EN Temporarily disable selected INT3 breakpoint
ZH Chicken chicken chicken chicken3 chicken

// DUMP:6826
EN Re-enable selected INT3 breakpoint
ZH Ch-chicken chicken chicken3 chicken

// DUMP:6828
EN Memory...
ZH Chicken...

// DUMP:6829
EN Set simple memory breakpoint
ZH Chicken chicken chicken chicken

// DUMP:6831
EN Memory log...
ZH Chicken...

// DUMP:6832
EN Set or edit conditional logging memory breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6834
EN Memory disable
ZH Chicken chicken

// DUMP:6835
EN Temporarily disable the selected memory breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6837
EN Memory enable
ZH Chicken chicken

// DUMP:6838
EN Re-enable the selected memory breakpoint
ZH Ch-chicken chicken chicken chicken chicken

// DUMP:6840
EN Memory delete
ZH Chicken chicken

// DUMP:6841
EN Remove selected memory breakpoint
ZH Chicken chicken chicken chicken

// DUMP:6843
EN Hardware...
ZH Chicken...

// DUMP:6844
EN Set simple hardware breakpoint
ZH Chicken chicken chicken chicken

// DUMP:6846
EN Hardware log...
ZH Chicken chicken...

// DUMP:6847
EN Set or edit conditional logging hardware breakpoint
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6849
EN Hardware disable
ZH Chicken chicken

// DUMP:6850
EN Temporarily disable selected hardware breakpoint
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6852
EN Hardware enable
ZH Chicken chicken

// DUMP:6853
EN Re-enable the selected hardware breakpoint
ZH Ch-chicken chicken chicken chicken chicken

// DUMP:6855
EN Hardware delete
ZH Chicken chicken

// DUMP:6856
EN Remove selected hardware breakpoint
ZH Chicken chicken chicken chicken chicken

// DUMP:6859
EN Add selection to the run trace protocol
ZH Chicken chicken chicken chicken chicken

// DUMP:6862
EN Add procedure that contains selection to the run trace protocol
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:6868
EN Memory &address
ZH Chicken &chicken

// DUMP:6869
EN Follow address of memory operand in CPU Dump
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6871
EN String &source
ZH Chicken &chicken

// DUMP:6872
EN Follow register ESI (string source) in CPU Dump
ZH Chicken chicken chicken (chicken chicken) chicken chicken

// DUMP:6874
EN String destination
ZH Chicken chicken

// DUMP:6875
EN Follow register EDI (string destination) in CPU Dump
ZH Chicken chicken chicken (chicken chicken) chicken chicken

// DUMP:6877
EN Address &constant
ZH Chicken &chicken

// DUMP:6878
EN Follow address constant in CPU Dump
ZH Chicken chicken chicken chicken chicken

// DUMP:6880
EN &Immediate constant
ZH &Chicken chicken

// DUMP:6881
EN Follow immediate constant in CPU Dump
ZH Chicken chicken chicken chicken chicken

// DUMP:6883
EN &Address
ZH &Chicken

// DUMP:6886
EN Selection
ZH Chicken

// DUMP:6887
EN Repeat selection in CPU Dump
ZH Chicken chicken chicken chicken

// DUMP:6893
EN Origin
ZH Chicken

// DUMP:6894
EN Follow EIP of current thread
ZH Chicken chicken chicken chicken

// DUMP:6896
EN Expression...
ZH Chicken...

// DUMP:6897
EN Specify location to follow
ZH Chicken chicken chicken

// DUMP:6899
EN Jump or call to selection...
ZH Chicken chicken chicken...

// DUMP:6900
EN Follow one of known jumps or calls to the selected command
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6902
EN Table jump destination...
ZH Chicken chicken chicken...

// DUMP:6903
EN Follow one of known table jump destinations
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6905
EN Switch case...
ZH Chicken chicken...

// DUMP:6906
EN Follow one of known switch cases
ZH Chicken chicken chicken chicken

// DUMP:6908
EN Previous location
ZH Chicken chicken

// DUMP:6909
EN Go to the previous location in the history list
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6911
EN Next location
ZH Chicken chicken

// DUMP:6912
EN Go to the next location in the history list
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6914
EN Previous run trace record
ZH Chicken chicken chicken

// DUMP:6915
EN Go to the previous location in the run trace
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6917
EN Next run trace record
ZH Chicken chicken chicken

// DUMP:6918
EN Go to the next location in the run trace
ZH Chicken chicken chicken chicken chicken

// DUMP:6920
EN MSIL code
ZH Chicken

// DUMP:6921
EN Go to the MSIL code from which selection was JIT-compiled
ZH Chicken chicken chicken chicken chicken chicken-chicken

// DUMP:6923
EN Native code
ZH Chicken chicken

// DUMP:6924
EN Go to the native code that was JIT-compiled from the selection
ZH Chicken chicken chicken chicken-chicken chicken chicken chicken

// DUMP:6926
EN Previous procedure
ZH Chicken chicken

// DUMP:6927
EN Go to the beginning of the previous procedure
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6929
EN Next procedure
ZH Chicken chicken

// DUMP:6930
EN Go to the beginning of the next procedure
ZH Chicken chicken chicken chicken chicken

// DUMP:6932
EN Previous structure
ZH Chicken chicken

// DUMP:6933
EN Go to the beginning of the previous structure
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6935
EN Next structure
ZH Chicken chicken

// DUMP:6936
EN Go to the beginning of the next structure
ZH Chicken chicken chicken chicken chicken

// DUMP:6938
EN Previous frame
ZH Chicken chicken

// DUMP:6939
EN Go to the beginning of the previous stack frame
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6941
EN Next frame
ZH Chicken

// DUMP:6942
EN Go to the beginning of the next stack frame
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6944
EN Previous found item
ZH Chicken chicken chicken

// DUMP:6945
EN Go to the previous found item
ZH Chicken chicken chicken chicken

// DUMP:6947
EN Next found item
ZH Chicken chicken

// DUMP:6948
EN Go to the next found item
ZH Chicken chicken chicken

// DUMP:6951
EN Go to the current stack pointer location
ZH Chicken chicken chicken chicken chicken

// DUMP:6954
EN Go to the current stack frame location
ZH Chicken chicken chicken chicken chicken

// DUMP:6956
EN Executable file
ZH Chicken chicken

// DUMP:6957
EN Follow selection in the executable file
ZH Chicken chicken chicken chicken chicken

// DUMP:6963
EN Names
ZH Chicken

// DUMP:6964
EN Show all names declared in the current module
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6966
EN Command...
ZH Chicken...

// DUMP:6967
EN Find command that matches specified pattern
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6969
EN Sequence of commands...
ZH Chicken chicken chicken...

// DUMP:6970
EN Find sequence of commands that matches specified pattern
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6972
EN Constant...
ZH Chicken...

// DUMP:6973
EN Find command that references supplied constant or expression
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:6975
EN Integer...
ZH Chicken...

// DUMP:6976
EN Find integer number
ZH Chicken chicken chicken

// DUMP:6978
EN Floating-point number...
ZH Chicken-chicken chicken...

// DUMP:6979
EN Find floating-point number
ZH Chicken chicken-chicken chicken

// DUMP:6981
EN Binary string...
ZH Chicken chicken...

// DUMP:6982
EN Find binary data that matches specified pattern
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6984
EN Modification
ZH Chicken chicken

// DUMP:6985
EN Find modified data
ZH Chicken chicken

// DUMP:6987
EN Search again
ZH Chicken chicken

// DUMP:6988
EN Repeat search in the specified direction
ZH Chicken chicken chicken chicken chicken

// DUMP:6990
EN Search reverse
ZH Chicken chicken

// DUMP:6991
EN Repeat search in the direction opposite to specified
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:6993
EN All intermodular calls
ZH Chicken chicken chicken

// DUMP:6994
EN Find all calls to outside the module
ZH Chicken chicken chicken chicken chicken

// DUMP:6996
EN All commands...
ZH Chicken chicken...

// DUMP:6997
EN Find all commands that match specified pattern
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:6999
EN All command sequences...
ZH Chicken chicken chicken...

// DUMP:7000
EN Find all sequences of commands that match specified pattern
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7002
EN All constants...
ZH Chicken chicken...

// DUMP:7004
EN Find all commands that refer to the supplied constant or expression
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7006
EN All modifications
ZH Chicken chicken

// DUMP:7007
EN Find all modifications within the code sections of current module
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7009
EN All referenced strings
ZH Chicken chicken chicken

// DUMP:7010
EN Find all referenced ASCII and UNICODE strings
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7012
EN All referenced GUIDs
ZH Chicken chicken chicken

// DUMP:7013
EN Find all referenced GUIDs
ZH Chicken chicken chicken

// DUMP:7015
EN All user comments
ZH Chicken chicken

// DUMP:7016
EN List all user-defined comments
ZH Chicken chicken-chicken chicken

// DUMP:7018
EN All found procedures
ZH Chicken chicken chicken

// DUMP:7019
EN List call destinations found by Analyser
ZH Chicken chicken chicken chicken chicken

// DUMP:7021
EN All found switches
ZH Chicken chicken

// DUMP:7022
EN List all switches and cascaded ifs found by Analyser
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7024
EN All floating constants
ZH Chicken chicken chicken

// DUMP:7026
EN Find all referenced floating-point constants that reside directly in the code section
ZH Chicken chicken chicken chicken-chicken chicken chicken chicken chicken chicken chicken

// DUMP:7028
EN Last record in run trace
ZH Chicken chicken chicken

// DUMP:7029
EN Find last record in the run trace for the selected command
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7032
EN Find last record in the run trace for the selected command range
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7038
EN Selected command
ZH Chicken chicken

// DUMP:7039
EN Find all commands that refer to the selected command
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7041
EN Selected block
ZH Chicken chicken

// DUMP:7042
EN Find all commands that refer to the selected range
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7044
EN Immediate constant
ZH Chicken chicken

// DUMP:7045
EN Find all commands that refer to the same immediate constant
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7047
EN Jump destination
ZH Chicken chicken

// DUMP:7049
EN Find all commands that refer to the address of the jump destination
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7051
EN Call destination
ZH Chicken chicken

// DUMP:7053
EN Find all commands that refer to the address of the call destination
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7055
EN Address constant
ZH Chicken chicken

// DUMP:7056
EN Find all commands that refer to the constant part of address
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7062
EN Stop highlighting
ZH Chicken chicken

// DUMP:7063
EN Stop register highlighting
ZH Chicken chicken chicken

// DUMP:7066
EN Highlight operands that use EAX, AX, AH or AL
ZH Chicken chicken chicken chicken, CH, Chicken

// DUMP:7069
EN Highlight operands that use ECX, CX, CH or CL
ZH Chicken chicken chicken chicken, CH, Chicken

// DUMP:7072
EN Highlight operands that use EDX, DX, DH or DL
ZH Chicken chicken chicken chicken, CH, Chicken

// DUMP:7075
EN Highlight operands that use EBX, BX, BH or BL
ZH Chicken chicken chicken chicken, CH, Chicken

// DUMP:7078
EN Highlight operands that use ESP (stack pointer)
ZH Chicken chicken chicken chicken (chicken chicken)

// DUMP:7081
EN Highlight operands that use EBP (frame pointer)
ZH Chicken chicken chicken chicken (chicken chicken)

// DUMP:7084
EN Highlight operands that use ESI or SI
ZH Chicken chicken chicken chicken chicken

// DUMP:7087
EN Highlight operands that use EDI or DI
ZH Chicken chicken chicken chicken chicken

// DUMP:7093
EN Absolute
ZH Chicken

// DUMP:7094
EN Show absolute addresses
ZH Chicken chicken chicken

// DUMP:7096
EN Relative to selection
ZH Chicken chicken chicken

// DUMP:7097
EN Show offsets from current selection
ZH Chicken chicken chicken chicken chicken

// DUMP:7099
EN Relative to ESP
ZH Chicken chicken

// DUMP:7100
EN Show offsets relative to current value of ESP
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7102
EN Relative to EBP
ZH Chicken chicken

// DUMP:7103
EN Show offsets relative to current value of EBP
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7105
EN Relative to module base
ZH Chicken chicken chicken

// DUMP:7106
EN Show offsets from the beginning of the module
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7112
EN Show comments
ZH Chicken chicken

// DUMP:7113
EN Show standard comments in the comments column
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7115
EN Show source
ZH Chicken chicken

// DUMP:7116
EN Show source code (if available) in the comments column
ZH Chicken chicken (chicken chicken) chicken chicken chicken

// DUMP:7118
EN Hide profile
ZH Chicken chicken

// DUMP:7119
EN Hide run trace profile counts in the comments column
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7121
EN Show profile
ZH Chicken chicken

// DUMP:7122
EN Show run trace profile counts in the comments column
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7128
EN Analyse code
ZH Chicken chicken

// DUMP:7129
EN Analyse executable code and SFX in the current module
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7131
EN Analyse PE header
ZH Chicken chicken

// DUMP:7134
EN Analyse TIB
ZH Chicken chicken

// DUMP:7135
EN Analyse Thread Information Block
ZH Chicken chicken chicken chicken

// DUMP:7137
EN Analyse Process Parameters Block
ZH Chicken chicken chicken chicken

// DUMP:7140
EN Analyse PEB
ZH Chicken chicken

// DUMP:7141
EN Analyse Process Environment Block
ZH Chicken chicken chicken chicken

// DUMP:7143
EN Analyse User Shared Data
ZH Chicken chicken chicken

// DUMP:7144
EN Analyse User Shared Data structure
ZH Chicken chicken chicken chicken

// DUMP:7146
EN Analyse GDI Handle Table
ZH Chicken chicken chicken

// DUMP:7147
EN Analyse shared table of GDI handles
ZH Chicken chicken chicken chicken chicken

// DUMP:7149
EN Remove analysis from selection
ZH Chicken chicken chicken chicken

// DUMP:7150
EN Remove analysis data from the selection
ZH Chicken chicken chicken chicken chicken

// DUMP:7152
EN Remove analysis from module
ZH Chicken chicken chicken chicken

// DUMP:7153
EN Remove analysis from the currently selected module
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7159
EN Hex/ASCII (16 bytes)
ZH Chi/CHICKEN (16 chicken)

// DUMP:7160
EN Hex bytes (16 per line) and ASCII characters
ZH Chicken (16 chicken) chicken chicken chicken

// DUMP:7162
EN Hex/ASCII (8 bytes)
ZH Chi/CHICKEN (8 chicken)

// DUMP:7163
EN Hex bytes (8 per line) and ASCII characters
ZH Chicken (8 chicken) chicken chicken chicken

// DUMP:7165
EN Hex/UNICODE (16 bytes)
ZH Chi/CHICKEN (16 chicken)

// DUMP:7166
EN Hex bytes (16 per line) and UNICODE characters
ZH Chicken (16 chicken) chicken chicken chicken

// DUMP:7168
EN Hex/UNICODE (8 bytes)
ZH Chi/CHICKEN (8 chicken)

// DUMP:7169
EN Hex bytes (8 per line) and UNICODE characters
ZH Chicken (8 chicken) chicken chicken chicken

// DUMP:7171
EN Hex/multibyte (16 bytes)
ZH Chi/chicken (16 chicken)

// DUMP:7172
EN Hex bytes (at most 16 per line) and multibyte characters
ZH Chicken (chicken 16 chicken) chicken chicken chicken

// DUMP:7174
EN Hex/multibyte (8 bytes)
ZH Chi/chicken (8 chicken)

// DUMP:7175
EN Hex bytes (at most 8 per line) and multibyte characters
ZH Chicken (chicken 8 chicken) chicken chicken chicken

// DUMP:7181
EN ASCII (64 chars)
ZH CHICKEN (64 chicken)

// DUMP:7182
EN ASCII characters (64 per line)
ZH Chicken chicken (64 chicken)

// DUMP:7184
EN ASCII (32 chars)
ZH CHICKEN (32 chicken)

// DUMP:7185
EN ASCII characters (32 per line)
ZH Chicken chicken (32 chicken)

// DUMP:7187
EN UNICODE (64 chars)
ZH CHICKEN (64 chicken)

// DUMP:7188
EN UNICODE characters (64 per line)
ZH Chicken chicken (64 chicken)

// DUMP:7190
EN UNICODE (32 chars)
ZH CHICKEN (32 chicken)

// DUMP:7191
EN UNICODE characters (32 per line)
ZH Chicken chicken (32 chicken)

// DUMP:7193
EN UNICODE (16 chars)
ZH CHICKEN (16 chicken)

// DUMP:7194
EN UNICODE characters (16 per line)
ZH Chicken chicken (16 chicken)

// DUMP:7200
EN Short signed
ZH Chicken chicken

// DUMP:7201
EN 16-bit signed decimal numbers
ZH 16-chicken chicken chicken

// DUMP:7206
EN Short unsigned
ZH Chicken chicken

// DUMP:7207
EN 16-bit unsigned decimal numbers
ZH 16-chicken chicken chicken chicken

// DUMP:7212
EN Short hex
ZH Chicken

// DUMP:7213
EN 16-bit hexadecimal numbers
ZH 16-chicken chicken chicken

// DUMP:7218
EN Long signed
ZH Chicken chicken

// DUMP:7219
EN 32-bit signed decimal numbers
ZH 32-chicken chicken chicken

// DUMP:7224
EN Long unsigned
ZH Chicken chicken

// DUMP:7225
EN 32-bit unsigned decimal numbers
ZH 32-chicken chicken chicken chicken

// DUMP:7230
EN Long hex
ZH Chicken

// DUMP:7231
EN 32-bit hexadecimal numbers
ZH 32-chicken chicken chicken

// DUMP:7237
EN 32-bit hexadecimal address with comments
ZH 32-chicken chicken chicken chicken chicken

// DUMP:7239
EN Address with ASCII dump
ZH Chicken chicken chicken

// DUMP:7240
EN Address with ASCII dump and comments
ZH Chicken chicken chicken chicken chicken

// DUMP:7242
EN Address with UNICODE dump
ZH Chicken chicken chicken

// DUMP:7243
EN Address with UNICODE dump and comments
ZH Chicken chicken chicken chicken chicken

// DUMP:7250
EN 32-bit floating-point numbers (float)
ZH 32-chicken chicken-chicken chicken (chicken)

// DUMP:7256
EN 64-bit floating-point numbers (double)
ZH 64-chicken chicken-chicken chicken (chicken)

// DUMP:7262
EN 80-bit floating-point numbers (long double)
ZH 80-chicken chicken-chicken chicken (chicken chicken)

// DUMP:7285
EN Lock address
ZH Chicken chicken

// DUMP:7286
EN Stop scrolling stack as ESP changes
ZH Chicken chicken chicken chicken chicken

// DUMP:7288
EN Unlock address
ZH Chicken chicken

// DUMP:7289
EN Allow automatic stack scrolling according to ESP
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7293
EN Backup functions
ZH Chicken chicken

// DUMP:7296
EN &Edit
ZH &Chic

// DUMP:7297
EN Select, copy and edit functions
ZH Chicken, chicken chicken chicken

// DUMP:7299
EN Zero whole dump
ZH Chicken chicken

// DUMP:7300
EN Fill whole dump with zeros and update backup
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7302
EN Push DWORD...
ZH Chicken...

// DUMP:7303
EN Push doubleword into the stack
ZH Chicken chicken chicken chicken

// DUMP:7305
EN Pop DWORD
ZH Chicken

// DUMP:7306
EN Pop doubleword from the stack (increments ESP by 4)
ZH Chicken chicken chicken chicken (chicken chicken 4)

// DUMP:7308
EN Add &label...
ZH Chi &chicken...

// DUMP:7309
EN Add custom label at the start of selection
ZH Chicken chicken chicken chicken chicken

// DUMP:7311
EN Edit &label...
ZH Chic &chicken...

// DUMP:7312
EN Edit custom label at the start of selection
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7314
EN &Assemble...
ZH &Chicken...

// DUMP:7315
EN Insert one or more Assembler commands
ZH Chicken chicken chicken chicken chicken

// DUMP:7317
EN Add &comment...
ZH Chi &chicken...

// DUMP:7318
EN Add custom comment at the start of selection
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7320
EN Edit &comment...
ZH Chic &chicken...

// DUMP:7321
EN Edit custom comment at the start of selection
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7324
EN Save file...
ZH Chicken...

// DUMP:7325
EN Save file to the disk
ZH Chicken chicken chicken

// DUMP:7328
EN &Breakpoint
ZH &Chicken

// DUMP:7329
EN Set, reset or edit all kinds of breakpoints
ZH Chi, chicken chicken chicken chicken chicken

// DUMP:7332
EN New origin here
ZH Chicken chicken

// DUMP:7333
EN Set EIP of current thread to selected command
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7336
EN Set EIP of current thread to selected memory address
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7339
EN Follow destination in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// DUMP:7345
EN Follow in CPU Dump pane
ZH Chicken chicken chicken

// DUMP:7347
EN Follow DWORD in Disassembler
ZH Chicken chicken chicken chicken

// DUMP:7348
EN Follow doubleword in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// DUMP:7350
EN Follow DWORD in Dump
ZH Chicken chicken chicken

// DUMP:7351
EN Follow doubleword in CPU Dump
ZH Chicken chicken chicken chicken

// DUMP:7353
EN Follow DWORD in Stack
ZH Chicken chicken chicken

// DUMP:7354
EN Follow doubleword in CPU Stack
ZH Chicken chicken chicken chicken

// DUMP:7357
EN Follow address in CPU Disassembler
ZH Chicken chicken chicken chicken

// DUMP:7366
EN Go to different point
ZH Chicken chicken chicken

// DUMP:7368
EN Select module
ZH Chicken chicken

// DUMP:7369
EN Select module to display
ZH Chicken chicken chicken

// DUMP:7371
EN Select thread
ZH Chicken chicken

// DUMP:7372
EN Select thread to display
ZH Chicken chicken chicken

// DUMP:7375
EN Decode as structure...
ZH Chicken chicken chicken...

// DUMP:7376
EN Decode selection as a known structure in a separate window
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7378
EN Decode as pointer to structure...
ZH Chicken chicken chicken chicken...

// DUMP:7380
EN Decode selection as a pointer to known structure in a separate window
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// DUMP:7382
EN Open in a separate dump window
ZH Chicken chicken chicken chicken

// DUMP:7383
EN Open selected piece in a standalone dump window
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7386
EN Search for
ZH Chicken

// DUMP:7387
EN Search for objects that match search pattern
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7389
EN Find references to
ZH Chicken chicken

// DUMP:7390
EN Search for commands referring to range or constant
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7392
EN Highlight register
ZH Chicken chicken

// DUMP:7393
EN Highlight operands containing specified register
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7395
EN Addressing
ZH Chicken

// DUMP:7396
EN Set absolute or relative addressing
ZH Chicken chicken chicken chicken chicken

// DUMP:7399
EN Set contents of the comments column
ZH Chicken chicken chicken chicken chicken

// DUMP:7402
EN Analysis
ZH Chicken

// DUMP:7403
EN Code analysis
ZH Chicken chicken

// DUMP:7406
EN Help on command
ZH Chicken chicken

// DUMP:7407
EN Get explanation on the first selected command
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7409
EN Help on API function
ZH Chicken chicken chicken

// DUMP:7410
EN Search for symbolic name in API Help file
ZH Chicken chicken chicken chicken chicken

// DUMP:7414
EN Display data as a sequence of hexadecimal bytes
ZH Chicken chicken chicken chicken chicken chicken

// DUMP:7416
EN Text
ZH Chic

// DUMP:7417
EN Display data as a text
ZH Chicken chicken chicken

// DUMP:7419
EN Integer
ZH Chicken

// DUMP:7420
EN Display data as integers
ZH Chicken chicken chicken

// DUMP:7423
EN Display data as floating-point numbers
ZH Chicken chicken chicken-chicken chicken

// DUMP:7425
EN Disassemble
ZH Chicken chicken

// DUMP:7426
EN Decode data as 80x86 commands
ZH Chicken chicken 80c86 chicken

// DUMP:7428
EN Structure...
ZH Chicken...

// DUMP:7429
EN Decode data as known structure
ZH Chicken chicken chicken chicken

// DUMP:7432
EN Columns
ZH Chicken

// DUMP:7433
EN Select columns to display
ZH Chicken chicken chicken

// DUMP:7435
EN Select ASCII code page
ZH Chicken chicken chicken

// DUMP:7436
EN Select code page used to display ASCII character dumps
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:7439
EN Select code page used to display multibyte character dumps
ZH Chicken chicken chicken chicken chicken chicken chicken

// DUMP:8109
EN Unable to open file '%s' for dump
ZH Chicken chicken chicken '%s' chicken

// DUMP:8115
EN Unable to dump file '%s'. It has zero length.
ZH Chicken chicken chicken '%s'. Chicken chicken.

// DUMP:8122
EN Unable to read file '%s'
ZH Chicken chicken chicken '%s'

// DUMP:8208
EN Data dump
ZH Chicken

// EXPRESS:188
EN Expression is too complex
ZH Chicken chicken chicken

// EXPRESS:255
EN Closing parenthesis expected
ZH Chicken chicken chicken chicken

// EXPRESS:267
EN Unary plus is not defined for strings
ZH Chicken chicken chicken chicken chicken

// EXPRESS:283
EN Negation is not defined for strings
ZH Chicken chicken chicken chicken chicken

// EXPRESS:299
EN Logical negation is not defined for strings
ZH Chicken chicken chicken chicken chicken chicken

// EXPRESS:313
EN Bitwise inversion is not defined for floats
ZH Chicken chicken chicken chicken chicken chicken

// EXPRESS:317
EN Bitwise inversion is not defined for strings
ZH Chicken chicken chicken chicken chicken chicken

// EXPRESS:504
EN Unexpected end of line
ZH Chicken chicken chicken

// EXPRESS:548
EN Repeat count is not allowed here
ZH Chicken chicken chicken chicken

// EXPRESS:551
EN Constant repeat count expected
ZH Chicken chicken chicken chicken

// EXPRESS:554
EN Duplicated repeat count
ZH Chicken chicken chicken

// EXPRESS:557
EN Repeat count outside of range 1..%i
ZH Chicken chicken chicken chicken 1..%i

// EXPRESS:619
EN Duplicated selector
ZH Chicken chicken chicken

// EXPRESS:622
EN Invalid type of selector
ZH Chicken chicken chicken

// EXPRESS:683
EN Invalid type of memory address
ZH Chicken chicken chicken chicken

// EXPRESS:687
EN Closing bracket expected
ZH Chicken chicken chicken

// EXPRESS:759
EN Repeat count is allowed only in pure memory references
ZH Chicken chicken chicken chicken chicken chicken chicken

// EXPRESS:907
EN Invalid operation
ZH Chicken chicken

// EXPRESS:986
EN No expression
ZH Chicken chicken

// EXPRESS:1091
EN Too many expressions
ZH Chicken chicken chicken

// EXPRESS:1212
EN Unable to get thread ordinal
ZH Chicken chicken chicken chicken

// EXPRESS:1220
EN Registers are not accessible
ZH Chicken chicken chicken chicken

// EXPRESS:1306
EN SSE registers are not accessible
ZH Chicken chicken chicken chicken

// EXPRESS:1336
EN Expression index out of limits
ZH Chicken chicken chicken chicken

// EXPRESS:1412
EN Unable to get contents of memory
ZH Chicken chicken chicken chicken

// EXPRESS:1443
EN Unable to get base of selector
ZH Chicken chicken chicken chicken

// EXPRESS:1567
EN Division by 0.0
ZH Chicken chicken 0.0

// EXPRESS:1610
EN Division by 0
ZH Chicken chicken 0

// EXPRESS:1725
EN Error in precompiled expression
ZH Chicken chicken chicken chicken

// EXPRESS:1751
EN Invalid expression
ZH Chicken chicken

// EXPRESS:1872
EN Multiple expressions are not allowed
ZH Chicken chicken chicken chicken chicken

// FNDATA:522
EN Saving known data to file
ZH Chicken chicken chicken

// FNDATA:566
EN Error saving data to file '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:568
EN File '%s' created successfully
ZH Chic '%s' chicken chicken chicken

// FNDATA:641
EN Decoding of known functions is not possible due to lack of memory
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// FNDATA:787
EN Corrupt API data, known functions and constants are unavailable
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken

// FNDATA:908
EN Integer constant expected
ZH Chicken chicken chicken

// FNDATA:912
EN Bad constant name
ZH Chicken chicken

// FNDATA:914
EN Constant ends with vertical line
ZH Chicken chicken chicken chicken

// FNDATA:919
EN Low memory, processing interrupted
ZH Chicken, chicken chicken chicken

// FNDATA:938
EN Bad group name
ZH Chicken chicken

// FNDATA:940
EN Length of group name is limited to 31 character
ZH Chicken chicken chicken chicken 31 chicken

// FNDATA:946
EN Too many groups
ZH Chicken chicken

// FNDATA:948
EN Redefined group '%s'
ZH Chicken chicken '%s'

// FNDATA:964
EN Expecting CONST or END
ZH Chicken chicken chicken

// FNDATA:1024
EN Bad name of translator
ZH Chicken chicken chicken

// FNDATA:1026
EN Length of translator name is limited to 30 characters
ZH Chicken chicken chicken chicken chicken 30 chicken

// FNDATA:1033
EN Too many translators
ZH Chicken chicken chicken

// FNDATA:1035
EN Redefined translator '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:1053
EN Expecting translation record or END
ZH Chicken chicken chicken chicken chicken

// FNDATA:1057
EN Too many translation records
ZH Chicken chicken chicken chicken

// FNDATA:1062
EN Missing equal sign between names
ZH Chicken chicken chicken chicken

// FNDATA:1065
EN Expecting output name
ZH Chicken chicken chicken

// FNDATA:1073
EN Empty translator
ZH Chicken chicken

// FNDATA:1081
EN Repeating input name '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:1109
EN Bad type name
ZH Chicken chicken

// FNDATA:1111
EN Length of type name is limited to 30 characters
ZH Chicken chicken chicken chicken 30 chicken

// FNDATA:1125
EN Type description is too long
ZH Chicken chicken chicken chicken

// FNDATA:1131
EN Keyword expected
ZH Chicken chicken

// FNDATA:1136
EN ENDSEL expected
ZH Chicken chicken

// FNDATA:1138
EN ENDIF expected
ZH Chicken chicken

// FNDATA:1148
EN Nesting of SELECT blocks is not allowed
ZH Chicken chicken chicken chicken chicken

// FNDATA:1150
EN Too deep block nesting
ZH Chicken chicken chicken

// FNDATA:1161
EN Expecting MASK, FIELD or SIGFIELD
ZH Chicken chicken, Chicken chicken

// FNDATA:1164
EN Constant expected
ZH Chicken chicken

// FNDATA:1172
EN ENDSEL without corresponding SELECT
ZH Chicken chicken chicken chicken chicken

// FNDATA:1175
EN ENDSEL where ENDIF is expected
ZH Chicken chicken chicken chicken

// FNDATA:1184
EN Too deep nesting
ZH Chicken chicken

// FNDATA:1190
EN ELSEIF without corresponding IF
ZH Chicken chicken chicken chicken

// FNDATA:1192
EN ELSEIF where ENDSEL is expected
ZH Chicken chicken chicken chicken

// FNDATA:1194
EN ELSEIF after ELSE
ZH Chicken chicken

// FNDATA:1199
EN Too many ELSEIF statements
ZH Chicken chicken chicken

// FNDATA:1248
EN 'EQ' or 'NE' expected
ZH 'CH' ch 'CH' chicken

// FNDATA:1274
EN Operation or constant expected
ZH Chicken chicken chicken chicken

// FNDATA:1282
EN ELSE without corresponding IF
ZH Chicken chicken chicken chicken

// FNDATA:1284
EN ELSE where ENDSEL is expected
ZH Chicken chicken chicken chicken

// FNDATA:1286
EN ELSE after ELSE
ZH Chicken chicken

// FNDATA:1300
EN ENDIF without corresponding IF
ZH Chicken chicken chicken chicken

// FNDATA:1303
EN ENDIF where ENDSEL is expected
ZH Chicken chicken chicken chicken

// FNDATA:1320
EN Text expected
ZH Chicken chicken

// FNDATA:1353
EN Name expected
ZH Chicken chicken

// FNDATA:1381
EN OUT applies only to pointers
ZH Chicken chicken chicken chicken

// FNDATA:1577
EN Invalid or unexpected keyword
ZH Chicken chicken chicken chicken

// FNDATA:1598
EN Redefined type '%s'
ZH Chicken chicken '%s'

// FNDATA:1627
EN Bad structure name
ZH Chicken chicken

// FNDATA:1629
EN Length of structure name is limited to 30 characters
ZH Chicken chicken chicken chicken chicken 30 chicken

// FNDATA:1640
EN Expecting field size or END
ZH Chicken chicken chicken chicken

// FNDATA:1643
EN Empty structures are not allowed
ZH Chicken chicken chicken chicken

// FNDATA:1663
EN Redefined structure '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:1685
EN Too many items
ZH Chicken chicken

// FNDATA:1699
EN Field size expected
ZH Chicken chicken chicken

// FNDATA:1703
EN Invalid repeat count
ZH Chicken chicken chicken

// FNDATA:1705
EN Repeat count outside of allowed limits
ZH Chicken chicken chicken chicken chicken

// FNDATA:1710
EN Type name expected
ZH Chicken chicken

// FNDATA:1723
EN Invalid size of FLOAT
ZH Chicken chicken chicken

// FNDATA:1726
EN Invalid size of DOUBLE
ZH Chicken chicken chicken

// FNDATA:1729
EN Invalid size of LDOUBLE
ZH Chicken chicken chicken

// FNDATA:1742
EN Invalid pointer size
ZH Chicken chicken chicken

// FNDATA:1759
EN Pointer to undefined type or structure
ZH Chicken chicken chicken chicken chicken

// FNDATA:1769
EN Bad item name
ZH Chicken chicken

// FNDATA:1776
EN Undefined type
ZH Chicken chicken

// FNDATA:1793
EN Child structure is too comlex
ZH Chicken chicken chicken chicken

// FNDATA:1795
EN Size of field is not multiple of child structure
ZH Chicken chicken chicken chicken chicken chicken

// FNDATA:1797
EN Unable to get description of child structure
ZH Chicken chicken chicken chicken chicken chicken

// FNDATA:1805
EN Resulting name of child structure member is too long
ZH Chicken chicken chicken chicken chicken chicken chicken

// FNDATA:1823
EN Undefined child member type
ZH Chicken chicken chicken chicken

// FNDATA:1849
EN Bad module name
ZH Chicken chicken

// FNDATA:1851
EN Length of module name is limited to 31 character
ZH Chicken chicken chicken chicken chicken 31 chicken

// FNDATA:1858
EN Point after module name expected
ZH Chicken chicken chicken chicken

// FNDATA:1864
EN Bad function name
ZH Chicken chicken

// FNDATA:1866
EN Too long function name
ZH Chicken chicken chicken

// FNDATA:1877
EN Variable number of arguments is not allowed for PASCAL or STDFUNC
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// FNDATA:1879
EN Ellipsis (...) as first and only argument is not allowed
ZH Chicken (...) chicken chicken chicken chicken chicken

// FNDATA:1881
EN Duplicated ellipsis
ZH Chicken chicken chicken

// FNDATA:1884
EN Keyword or name of type expected
ZH Chicken chicken chicken chicken

// FNDATA:1888
EN Function contains too many formats
ZH Chicken chicken chicken chicken

// FNDATA:1925
EN Redefined procedure '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:1938
EN Duplicated RETURNS
ZH Chicken chicken

// FNDATA:1946
EN Return type expected
ZH Chicken chicken chicken

// FNDATA:1951
EN Undefined return type or structure
ZH Chicken chicken chicken chicken

// FNDATA:1953
EN Can't return structure, only pointer to structure
ZH Chi'chicken chicken, chicken chicken chicken

// FNDATA:1962
EN Duplicated PRESERVES
ZH Chicken chicken chicken

// FNDATA:1966
EN Register name expected
ZH Chicken chicken chicken

// FNDATA:1976
EN Comma between register names expected
ZH Chicken chicken chicken chicken chicken

// FNDATA:1982
EN Ellipsis (...) must be last in the list of arguments
ZH Chicken (...) chicken chicken chicken chicken chicken

// FNDATA:1984
EN Too many arguments
ZH Chicken chicken

// FNDATA:2020
EN Structure is not allowed, only pointer to structure
ZH Chicken chicken chicken, chicken chicken chicken

// FNDATA:2030
EN Bad parameter name
ZH Chicken chicken

// FNDATA:2170
EN Bad name of data block
ZH Chicken chicken chicken

// FNDATA:2172
EN Length of data name is limited to 30 characters
ZH Chicken chicken chicken chicken 30 chicken

// FNDATA:2194
EN Data expected
ZH Chicken chicken

// FNDATA:2197
EN Size of raw data exceeds allowed limit
ZH Chicken chicken chicken chicken chicken

// FNDATA:2214
EN Empty raw data block
ZH Chicken chicken chicken

// FNDATA:2234
EN Redefined data block '%s'
ZH Chicken chicken chicken '%s'

// FNDATA:2256
EN Duplicated FEATURES
ZH Chicken chicken chicken

// FNDATA:2277
EN Unrecognized constant or keyword
ZH Chicken chicken chicken chicken

// FNDATA:2284
EN Byte data expected
ZH Chicken chicken

// FNDATA:2307
EN Syntax error in raw data description
ZH Chicken chicken chicken chicken chicken

// FNDATA:2335
EN Out of memory - unable to process descriptions in '%s.arg'
ZH Chicken chicken - chicken chicken chicken chicken '%s.chi'

// FNDATA:2342
EN File '%s.arg' has unsupported UNICODE big endian format
ZH Chic '%s.chi' chicken chicken chicken chicken chicken

// FNDATA:2368
EN Loading function descriptions from '%s.arg'
ZH Chicken chicken chicken chicken '%s.chi'

// FNDATA:2388
EN Invalid type modifier(s)
ZH Chicken chicken chicken(c)

// FNDATA:2437
EN Unexpected keyword
ZH Chicken chicken

// FNDATA:2459
EN Line %i. %s (%s)
ZH Chic %i. %s (%s)

// FNDATA:2461
EN Line %i. %s
ZH Chic %i. %s

// FNDATA:2471
EN Redefined constant '%s'
ZH Chicken chicken '%s'

// FNDATA:2478
EN 1 constant
ZH 1 chicken

// FNDATA:2479
EN %i constants
ZH %i chicken

// FNDATA:2482
EN 1 group
ZH 1 chicken

// FNDATA:2483
EN %i groups
ZH %i chicken

// FNDATA:2486
EN 1 translator
ZH 1 chicken

// FNDATA:2487
EN %i translators
ZH %i chicken chicken

// FNDATA:2490
EN 1 structure
ZH 1 chicken

// FNDATA:2491
EN %i structures
ZH %i chicken

// FNDATA:2494
EN 1 type
ZH 1 chic

// FNDATA:2495
EN %i types
ZH %i chicken

// FNDATA:2498
EN 1 function
ZH 1 chicken

// FNDATA:2499
EN %i functions
ZH %i chicken

// FNDATA:2502
EN 1 data block
ZH 1 chicken

// FNDATA:2503
EN %i data blocks
ZH %i chicken chicken

// FNDATA:2511
EN Total size of known data is %i bytes
ZH Chicken chicken chicken chicken %i chicken

// FNDATA:3442
EN Low: %08X
ZH Chi: %08X

// FNDATA:3450
EN High: %08X
ZH Chic: %08X

// FNDATA:3636
EN Middle: %08X
ZH Chicken: %08X

// FNDATA:3716
EN , class =
ZH , chicken =

// FNDATA:3720
EN , text =
ZH , chic =

// FNDATA:3781
EN (DC or Memory DC)
ZH (Chicken chicken)

// FNDATA:3783
EN (Metafile)
ZH (Chicken)

// FNDATA:3785
EN (Memory DC)
ZH (Chicken)

// FNDATA:3789
EN (DC of window %08X
ZH (Chicken chicken %08X

// FNDATA:3851
EN (DC)
ZH (CH)

// FNDATA:3853
EN (Region
ZH (Chicken

// FNDATA:3869
EN (Bitmap)
ZH (Chicken)

// FNDATA:3871
EN (Path)
ZH (Chic)

// FNDATA:3873
EN (Palette)
ZH (Chicken)

// FNDATA:3875
EN (Color space)
ZH (Chicken chicken)

// FNDATA:3877
EN (Font)
ZH (Chic)

// FNDATA:3879
EN (Brush
ZH (Chicken

// FNDATA:3897
EN (Pen)
ZH (Chi)

// FNDATA:3975
EN , Debuggee
ZH , Chicken

// GUIDS:248
EN Out of memory - unable to process GUIDs in '%s.arg'
ZH Chicken chicken - chicken chicken chicken '%s.chi'

// GUIDS:283
EN Loading GUIDs from '%s.arg'
ZH Chicken chicken '%s.chi'

// GUIDS:296
EN GUID expected
ZH Chicken chicken

// GUIDS:299
EN Invalid GUID
ZH Chicken chicken

// GUIDS:303
EN GUID name expected
ZH Chicken chicken

// GUIDS:379
EN Total number of GUIDs is %i
ZH Chicken chicken chicken %i

// HANDLES:165
EN File (pipe)
ZH Chic (chic)

// HANDLES:168
EN File (char)
ZH Chic (chic)

// HANDLES:184
EN File (dev)
ZH Chic (chi)

// HANDLES:208
EN File (dir)
ZH Chic (chi)

// HANDLES:211
EN File (sys)
ZH Chic (chi)

// HANDLES:214
EN File (temp)
ZH Chic (chic)

// HANDLES:324
EN Original name
ZH Chicken chicken

// HANDLES:325
EN Original name associated with the handle
ZH Chicken chicken chicken chicken chicken

// HANDLES:327
EN Translated name
ZH Chicken chicken

// HANDLES:328
EN Handle Name converted to user-friendly form
ZH Chicken chicken chicken chicken-chicken chicken

// HANDLES:399
EN &Update
ZH &Chicken

// HANDLES:400
EN Update contents of Handles window
ZH Chicken chicken chicken chicken

// HANDLES:402
EN Tag all handles
ZH Chicken chicken

// HANDLES:403
EN User-defined tag allows to distinguish new handles from old
ZH Chic-chicken chicken chicken chicken chicken chicken chicken

// HANDLES:405
EN Untag all handles
ZH Chicken chicken

// HANDLES:408
EN Show original names
ZH Chicken chicken chicken

// HANDLES:409
EN Show handle names as reported by Windows
ZH Chicken chicken chicken chicken chicken

// HANDLES:411
EN Show translated names
ZH Chicken chicken chicken

// HANDLES:412
EN Show handle names converted to user-friendlier form
ZH Chicken chicken chicken chicken chicken-chicken chicken

// HANDLES:414
EN Dump file
ZH Chicken

// HANDLES:415
EN Open file associated with the handle in a separate Dump window
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// HANDLES:536
EN Size %i., pointer %i.
ZH Chic %i., chicken %i.

// HANDLES:538
EN Count %i. of %i.
ZH Chicken %i. ch %i.

// HANDLES:577
EN Handle
ZH Chicken

// HANDLES:578
EN Handle in the context of debugged application
ZH Chicken chicken chicken chicken chicken chicken

// HANDLES:582
EN Type of the handle
ZH Chicken chicken

// HANDLES:585
EN Refs
ZH Chic

// HANDLES:586
EN Reference count
ZH Chicken chicken

// HANDLES:589
EN Access
ZH Chicken

// HANDLES:590
EN Access rights
ZH Chicken chicken

// HANDLES:593
EN Tag
ZH Chi

// HANDLES:594
EN Allows to distinguish new handles from old
ZH Chicken chicken chicken chicken chicken

// HANDLES:598
EN Handle-related information
ZH Chicken-chicken chicken chicken

// HANDLES:621
EN Handles
ZH Chicken

// HELP:966
EN Command help
ZH Chicken chicken

// HELP:970
EN Help
ZH Chic

// HELP:1110
EN Help on item
ZH Chicken chicken

// INSPECT:33
EN Structure %s at
ZH Chicken %s ch

// JUMPDATA:183
EN Low memory!
ZH Chicken!

// JUMPDATA:185
EN Out of memory in jump table. Some calls and jumps will be missed in Jump path and Call tree.
ZH Chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken.

// LIBSCAN:86
EN Not a standard function library
ZH Chicken chicken chicken chicken

// LIBSCAN:203
EN Unreadable or corrupted library
ZH Chicken chicken chicken chicken

// LIBSCAN:207
EN Unable to read library
ZH Chicken chicken chicken

// LIBSCAN:900
EN Unknown record type 0x%02X
ZH Chicken chicken chicken 0c%02X

// LIBSCAN:912
EN Invalid OMF page size
ZH Chicken chicken chicken

// LIBSCAN:913
EN Invalid OMF dictionary size
ZH Chicken chicken chicken chicken

// LIBSCAN:914
EN Unexpected end of OMF file
ZH Chicken chicken chicken

// LIBSCAN:915
EN OMF syntax error
ZH Chicken chicken

// LIBSCAN:916
EN 16-bit OMF file
ZH 16-chicken chicken

// LIBSCAN:917
EN Import library
ZH Chicken chicken

// LIBSCAN:918
EN Contains absolute segments
ZH Chicken chicken chicken

// LIBSCAN:919
EN Contains unsupported fixups
ZH Chicken chicken chicken chicken

// LIBSCAN:1151
EN File is not for 80x86 CPU
ZH Chicken chicken 80c86 CHI

// LIBSCAN:1152
EN COFF section is too big
ZH Chicken chicken chicken

// LIBSCAN:1153
EN COFF syntax error
ZH Chicken chicken

// LIBSCAN:1236
EN Unable to read object file
ZH Chicken chicken chicken

// LIBSCAN:1247
EN Unrecognized object file format
ZH Chicken chicken chicken chicken

// LIBSCAN:1250
EN 1 image
ZH 1 chicken

// LIBSCAN:1252
EN %i images
ZH %i chicken

// LIBSCAN:1342
EN Object and library files:
ZH Chicken chicken chicken:

// LIBSCAN:1349
EN Information or error message
ZH Chicken chicken chicken chicken

// LIBSCAN:1351
EN Load list
ZH Chicken

// LIBSCAN:1352
EN Load file list from existing library
ZH Chicken chicken chicken chicken chicken

// LIBSCAN:1354
EN Add files
ZH Chicken

// LIBSCAN:1355
EN Add object files or libraries to the list
ZH Chicken chicken chicken chicken chicken

// LIBSCAN:1357
EN Delete file
ZH Chicken chicken

// LIBSCAN:1358
EN Remove selected file from the list
ZH Chicken chicken chicken chicken

// LIBSCAN:1363
EN Test
ZH Chic

// LIBSCAN:1364
EN Scan object files
ZH Chicken chicken

// LIBSCAN:1366
EN Signature
ZH Chicken

// LIBSCAN:1368
EN If signature is set, it must appear in the code, or function library will be ignored
ZH Chicken chicken chicken, chicken chicken chicken, chicken chicken chicken chicken chicken

// LIBSCAN:1370
EN Save
ZH Chic

// LIBSCAN:1371
EN Scan files and save library to disc
ZH Chicken chicken chicken chicken chicken

// LIBSCAN:1376
EN Create standard function library
ZH Chicken chicken chicken chicken

// LIBSCAN:1404
EN Unable to create '
ZH Chicken chicken '

// LIBSCAN:1507
EN Library contains %i functions
ZH Chicken chicken %i chicken

// LIBSCAN:1509
EN Unable to save object library
ZH Chicken chicken chicken chicken

// LIBSCAN:1513
EN Error when creating object library
ZH Chicken chicken chicken chicken

// LIBSCAN:1585
EN Select name of image library file
ZH Chicken chicken chicken chicken

// LIBSCAN:1592
EN Library loaded
ZH Chicken chicken

// LIBSCAN:1603
EN Select object files and libraries
ZH Chicken chicken chicken chicken

// LIBSCAN:1704
EN Enter library signature
ZH Chicken chicken chicken

// LIBSCAN:1794
EN Object and library files
ZH Chicken chicken chicken

// LIBSCAN:1795
EN List of object and library files
ZH Chicken chicken chicken chicken

// LIBSCAN:1798
EN Message
ZH Chicken

// LIBSCAN:1799
EN Result of scanning
ZH Chicken chicken

// LIST:310
EN Select log file
ZH Chicken chicken

// LIST:314
EN Unable to open log file '%s'
ZH Chicken chicken chicken '%s'

// LIST:337
EN Show address in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken

// LIST:339
EN Follow in CPU Dump
ZH Chicken chicken

// LIST:339
EN Show address in CPU Dump pane
ZH Chicken chicken chicken chicken

// LIST:341
EN Follow in CPU Stack
ZH Chicken chicken chicken

// LIST:341
EN Show address in CPU Stack pane
ZH Chicken chicken chicken chicken

// LIST:343
EN Clear log
ZH Chicken

// LIST:343
EN Empty log window (doesn't influence log file)
ZH Chicken chicken (chicken'chicken chicken chicken)

// LIST:345
EN Log to file...
ZH Chicken chicken...

// LIST:345
EN Start writing new log data to the file
ZH Chicken chicken chicken chicken chicken

// LIST:347
EN Stop logging
ZH Chicken chicken

// LIST:347
EN Close log file
ZH Chicken chicken

// LIST:395
EN Memory address associated with message
ZH Chicken chicken chicken chicken chicken

// LIST:423
EN Log data
ZH Chicken

// MEMORY:264
EN Invalidating non-flushed cache!
ZH Chicken chicken-chicken chicken!

// MEMORY:286
EN Unable to flush cache at %08X
ZH Chicken chicken chicken %08X

// MEMORY:315
EN Unable to read memory
ZH Chicken chicken chicken

// MEMORY:318
EN Memory at address %08X of size %08X (%i.) bytes can not be read. Either adress points to non-existing memory, or read access to memory is not enforceable.
ZH Chicken chicken %08X chicken %08X (%i.) chicken chicken chicken. Chicken chicken chicken chicken-chicken chicken, chicken chicken chicken chicken chicken chicken.

// MEMORY:536
EN Unable to write to memory
ZH Chicken chicken chicken

// MEMORY:539
EN Memory at address %08X of size %08X (%i.) bytes can not be written to. Either adress points to non-existing memory, or write access to memory is not enforceable.
ZH Chicken chicken %08X chicken %08X (%i.) chicken chicken chicken chicken. Chicken chicken chicken chicken-chicken chicken, chicken chicken chicken chicken chicken chicken.

// MEMORY:1366
EN Unable to set break-on-access
ZH Chicken chicken chicken-ch-chicken

// MEMORY:1385
EN Limit run trace protocol to selected memory block
ZH Chicken chicken chicken chicken chicken chicken

// MEMORY:1387
EN Add memory block to run trace protocol
ZH Chicken chicken chicken chicken chicken

// MEMORY:1419
EN Unable to change memory access rights
ZH Chicken chicken chicken chicken chicken

// MEMORY:1426
EN &No access
ZH &Chicken

// MEMORY:1427
EN Disable access to selected memory block
ZH Chicken chicken chicken chicken chicken

// MEMORY:1429
EN &Read only
ZH &Chicken

// MEMORY:1430
EN Allow only read access to selected memory block
ZH Chicken chicken chicken chicken chicken chicken

// MEMORY:1432
EN Read/&write
ZH Chic/&chicken

// MEMORY:1433
EN Allow read/write access to selected memory block
ZH Chicken/chicken chicken chicken chicken chicken

// MEMORY:1435
EN &Execute
ZH &Chicken

// MEMORY:1436
EN Allow only execution access to selected memory block
ZH Chicken chicken chicken chicken chicken chicken chicken

// MEMORY:1438
EN E&xecute/read
ZH C&chicken/chic

// MEMORY:1439
EN Allow execute/read access to selected memory block
ZH Chicken chicken/chicken chicken chicken chicken chicken

// MEMORY:1441
EN &Full
ZH &Chic

// MEMORY:1442
EN Allow full access to selected memory block
ZH Chicken chicken chicken chicken chicken

// MEMORY:1449
EN Update contents of Memory window
ZH Chicken chicken chicken chicken

// MEMORY:1452
EN Create backup copy of selected memory block
ZH Chicken chicken chicken chicken chicken chicken

// MEMORY:1454
EN View in CPU Disassembler
ZH Chicken chicken chicken

// MEMORY:1455
EN Open memory block in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MEMORY:1457
EN Dump in CPU
ZH Chicken chicken

// MEMORY:1458
EN Open selected memory block in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MEMORY:1461
EN Open selected memory block in standalone Dump window
ZH Chicken chicken chicken chicken chicken chicken chicken

// MEMORY:1463
EN Search...
ZH Chicken...

// MEMORY:1464
EN Search for a sequence of bytes or string
ZH Chicken chicken chicken chicken chicken

// MEMORY:1466
EN Search next
ZH Chicken chicken

// MEMORY:1467
EN Continue search
ZH Chicken chicken

// MEMORY:1469
EN Show free memory
ZH Chicken chicken

// MEMORY:1470
EN Show free and reserved memory areas
ZH Chicken chicken chicken chicken chicken

// MEMORY:1472
EN Set break-on-access
ZH Chicken-ch-chicken

// MEMORY:1473
EN Break on next access to selected memory block
ZH Chicken chicken chicken chicken chicken chicken

// MEMORY:1475
EN Remove break-on-access
ZH Chicken chicken-ch-chicken

// MEMORY:1476
EN Remove break-on-access from selected block
ZH Chicken chicken-ch-chicken chicken chicken

// MEMORY:1479
EN Add selected memory block to the run trace protocol
ZH Chicken chicken chicken chicken chicken chicken chicken

// MEMORY:1481
EN Set access
ZH Chicken

// MEMORY:1482
EN Set allowed type of access to selected memory block
ZH Chicken chicken chicken chicken chicken chicken chicken

// MEMORY:1584
EN (self)
ZH (chic)

// MEMORY:1593
EN Free
ZH Chic

// MEMORY:1595
EN Reserved
ZH Chicken

// MEMORY:1599
EN code,
ZH chic,

// MEMORY:1601
EN data,
ZH chic,

// MEMORY:1603
EN SFX,
ZH CHI,

// MEMORY:1605
EN default heap,
ZH chicken chicken,

// MEMORY:1607
EN heap,
ZH chic,

// MEMORY:1609
EN imports,
ZH chicken,

// MEMORY:1611
EN exports,
ZH chicken,

// MEMORY:1613
EN resources,
ZH chicken,

// MEMORY:1615
EN relocations,
ZH chicken chicken,

// MEMORY:1617
EN stack guarding page,
ZH chicken chicken chicken,

// MEMORY:1620
EN PE header (.NET),
ZH Chicken (.CHI),

// MEMORY:1622
EN PE header,
ZH Chicken,

// MEMORY:1625
EN Process Environment Block,
ZH Chicken chicken chicken,

// MEMORY:1627
EN User Shared Data,
ZH Chicken chicken,

// MEMORY:1629
EN stack,
ZH chicken,

// MEMORY:1632
EN data block,
ZH chicken,

// MEMORY:1635
EN native code,
ZH chicken chicken,

// MEMORY:1637
EN Process Parameters,
ZH Chicken chicken,

// MEMORY:1639
EN Environment,
ZH Chicken chicken,

// MEMORY:1641
EN GDI handles,
ZH Chicken chicken,

// MEMORY:1643
EN Kernel memory,
ZH Chicken chicken,

// MEMORY:1649
EN Code pages,
ZH Chicken,

// MEMORY:1656
EN of
ZH ch

// MEMORY:1665
EN Priv
ZH Chic

// MEMORY:1666
EN Map
ZH Chi

// MEMORY:1667
EN Img
ZH Chi

// MEMORY:1668
EN Kern
ZH Chic

// MEMORY:1686
EN R
ZH C

// MEMORY:1688
EN RW
ZH CH

// MEMORY:1690
EN RW  CopyOnWr
ZH Chicken chicken

// MEMORY:1692
EN E
ZH C

// MEMORY:1694
EN R E
ZH CHI

// MEMORY:1696
EN RWE
ZH CHI

// MEMORY:1698
EN RWE CopyOnWr
ZH Chicken chicken

// MEMORY:1703
EN Guarded
ZH Chicken

// MEMORY:1747
EN Base address of memory block
ZH Chicken chicken chicken chicken

// MEMORY:1751
EN Size of memory block (hex and decimal)
ZH Chicken chicken chicken (chicken chicken)

// MEMORY:1754
EN Owner
ZH Chicken

// MEMORY:1755
EN Owner of memory block
ZH Chicken chicken chicken

// MEMORY:1758
EN Section
ZH Chicken

// MEMORY:1759
EN Name of associated image sections
ZH Chicken chicken chicken chicken

// MEMORY:1762
EN Contains
ZH Chicken

// MEMORY:1763
EN Types of data that memory block contains
ZH Chicken chicken chicken chicken chicken

// MEMORY:1767
EN Type of memory block
ZH Chicken chicken chicken

// MEMORY:1771
EN Memory access rights
ZH Chicken chicken chicken

// MEMORY:1774
EN Initial access
ZH Chicken chicken

// MEMORY:1775
EN Initial memory access rights
ZH Chicken chicken chicken chicken

// MEMORY:1781
EN Mapped as
ZH Chicken

// MEMORY:1782
EN Name of associated memory mapped file
ZH Chicken chicken chicken chicken chicken

// MEMORY:1797
EN Memory map
ZH Chicken

// MENU:127
EN Main menu: File
ZH Chicken: Chic

// MENU:129
EN Open new executable
ZH Chicken chicken chicken

// MENU:131
EN Set command line arguments for next run
ZH Chicken chicken chicken chicken chicken

// MENU:133
EN Attach to running process
ZH Chicken chicken chicken

// MENU:135
EN Detach from the debugged process
ZH Chicken chicken chicken chicken

// MENU:137
EN Close OllyDbg
ZH Chicken chicken

// MENU:140
EN Main menu: View
ZH Chicken: Chic

// MENU:142
EN Open Log window
ZH Chicken chicken

// MENU:144
EN Open Executable modules window
ZH Chicken chicken chicken chicken

// MENU:146
EN Open Memory map window
ZH Chicken chicken chicken

// MENU:148
EN Open list of windows
ZH Chicken chicken chicken

// MENU:150
EN Open Threads window
ZH Chicken chicken chicken

// MENU:152
EN Open CPU window
ZH Chicken chicken

// MENU:154
EN Open Watches window
ZH Chicken chicken chicken

// MENU:156
EN Open Search results window
ZH Chicken chicken chicken

// MENU:158
EN Open Run trace window
ZH Chicken chicken chicken

// MENU:160
EN Open Patches window
ZH Chicken chicken chicken

// MENU:162
EN Open INT3 breakpoints window
ZH Chicken3 chicken chicken

// MENU:164
EN Open Memory breakpoints window
ZH Chicken chicken chicken chicken

// MENU:166
EN Open Hardware breakpoints window
ZH Chicken chicken chicken chicken

// MENU:168
EN Open list of source files
ZH Chicken chicken chicken

// MENU:170
EN Open file
ZH Chicken

// MENU:172
EN Open VEH/SEH chain window
ZH Chicken/Chicken chicken

// MENU:174
EN Open Handles window
ZH Chicken chicken chicken

// MENU:176
EN Open Call stack window
ZH Chicken chicken chicken

// MENU:179
EN Main menu: Debug
ZH Chicken: Chicken

// MENU:181
EN Run debugged application
ZH Chicken chicken chicken

// MENU:183
EN Run only current thread
ZH Chicken chicken chicken

// MENU:185
EN Pause debugged application
ZH Chicken chicken chicken

// MENU:187
EN Step into
ZH Chicken

// MENU:189
EN Step over
ZH Chicken

// MENU:191
EN Execute till return
ZH Chicken chicken chicken

// MENU:193
EN Execute till user code
ZH Chicken chicken chicken

// MENU:195
EN Call DLL export
ZH Chicken chicken

// MENU:197
EN Restart last debugged executable
ZH Chicken chicken chicken chicken

// MENU:199
EN Close debugged application
ZH Chicken chicken chicken

// MENU:206
EN Main menu: Trace
ZH Chicken: Chicken

// MENU:208
EN Open Run trace
ZH Chicken chicken

// MENU:210
EN Close Run trace
ZH Chicken chicken

// MENU:212
EN Animate into
ZH Chicken chicken

// MENU:214
EN Animate over
ZH Chicken chicken

// MENU:216
EN Trace into
ZH Chicken

// MENU:218
EN Trace over
ZH Chicken

// MENU:220
EN Run hit trace
ZH Chicken chicken

// MENU:222
EN Stop hit trace
ZH Chicken chicken

// MENU:224
EN Set run trace break condition
ZH Chicken chicken chicken chicken

// MENU:226
EN Set run trace log condition
ZH Chicken chicken chicken chicken

// MENU:229
EN Main menu: Options
ZH Chicken: Chicken

// MENU:231
EN Open Options dialog
ZH Chicken chicken chicken

// MENU:233
EN Open Plugin options dialog
ZH Chicken chicken chicken

// MENU:235
EN Open Shortcut editor
ZH Chicken chicken chicken

// MENU:238
EN Main menu: Windows
ZH Chicken: Chicken

// MENU:240
EN Topmost status of main window
ZH Chicken chicken chicken chicken

// MENU:242
EN Cascade MDI windows
ZH Chicken chicken chicken

// MENU:244
EN Tile MDI windows horizontally
ZH Chicken chicken chicken chicken

// MENU:246
EN Tile MDI windows vertically
ZH Chicken chicken chicken chicken

// MENU:248
EN Arrange icons
ZH Chicken chicken

// MENU:250
EN Close all MDI windows
ZH Chicken chicken chicken

// MENU:252
EN Maximize or restore active MDI
ZH Chicken chicken chicken chicken

// MENU:254
EN Go to previous MDI window
ZH Chicken chicken chicken

// MENU:256
EN Go to next MDI window
ZH Chicken chicken chicken

// MENU:259
EN Main menu: Help
ZH Chicken: Chic

// MENU:261
EN Open About dialog
ZH Chicken chicken

// MENU:264
EN Generic table shortcuts
ZH Chicken chicken chicken

// MENU:266
EN Go to previous CPU pane
ZH Chicken chicken chicken

// MENU:268
EN Go to next CPU pane
ZH Chicken chicken chicken

// MENU:271
EN Update
ZH Chicken

// MENU:273
EN Copy
ZH Chic

// MENU:275
EN Copy all
ZH Chicken

// MENU:277
EN Cut
ZH Chi

// MENU:279
EN Paste
ZH Chicken

// MENU:281
EN Make MDI window topmost
ZH Chicken chicken chicken

// MENU:283
EN Periodically update contents of window
ZH Chicken chicken chicken chicken chicken

// MENU:285
EN Show or hide bar
ZH Chicken chicken

// MENU:287
EN Show or hide horizontal scrollbar
ZH Chicken chicken chicken chicken

// MENU:289
EN Resize all columns to default width
ZH Chicken chicken chicken chicken chicken

// MENU:292
EN Shortcuts used by different windows
ZH Chicken chicken chicken chicken chicken

// MENU:294
EN Repeat last search
ZH Chicken chicken

// MENU:296
EN Repeat search in inverse direction
ZH Chicken chicken chicken chicken

// MENU:299
EN Dump: Backup
ZH Chic: Chicken

// MENU:301
EN Create or update backup
ZH Chicken chicken chicken

// MENU:303
EN Toggle backup display
ZH Chicken chicken chicken

// MENU:306
EN Dump: Edit
ZH Chic: Chic

// MENU:312
EN Copy data in hexadecimal format
ZH Chicken chicken chicken chicken

// MENU:314
EN Paste data in hexadecimal format
ZH Chicken chicken chicken chicken

// MENU:316
EN Edit first selected item
ZH Chicken chicken chicken

// MENU:318
EN Edit dump selection
ZH Chicken chicken chicken

// MENU:324
EN Fill selection with 0xFF
ZH Chicken chicken chicken 0chi

// MENU:326
EN Select all
ZH Chicken

// MENU:328
EN Select procedure or structure
ZH Chicken chicken chicken chicken

// MENU:332
EN Copy all modifications to executable file
ZH Chicken chicken chicken chicken chicken

// MENU:336
EN Add or edit custom label
ZH Chicken chicken chicken

// MENU:340
EN Add or edit comment
ZH Chicken chicken chicken

// MENU:342
EN Save file to disk
ZH Chicken chicken

// MENU:345
EN Dump: Breakpoints (shared by other windows)
ZH Chic: Chicken chicken (chicken chicken chicken)

// MENU:359
EN Enable or disable INT3 breakpoint
ZH Chicken chicken chicken3 chicken

// MENU:361
EN Set or edit memory breakpoint
ZH Chicken chicken chicken chicken

// MENU:365
EN Enable or disable memory breakpoint
ZH Chicken chicken chicken chicken chicken

// MENU:369
EN Set or edit hardware breakpoint
ZH Chicken chicken chicken chicken

// MENU:373
EN Enable or disable hardware breakpoint
ZH Chicken chicken chicken chicken chicken

// MENU:378
EN Dump: Jumps to location
ZH Chic: Chicken chicken

// MENU:380
EN Set new origin
ZH Chicken chicken

// MENU:384
EN Go to origin (EIP) of current thread
ZH Chicken chicken (CHI) chicken chicken

// MENU:386
EN Go to expression
ZH Chicken chicken

// MENU:388
EN Follow jump or call to selection
ZH Chicken chicken chicken chicken

// MENU:392
EN Go to previous history location
ZH Chicken chicken chicken chicken

// MENU:394
EN Go to next history location
ZH Chicken chicken chicken chicken

// MENU:396
EN Go to previous run trace record
ZH Chicken chicken chicken chicken

// MENU:398
EN Go to next run trace record
ZH Chicken chicken chicken chicken

// MENU:400
EN Go to previous procedure, structure or stack frame
ZH Chicken chicken chicken, chicken chicken chicken

// MENU:402
EN Go to next procedure, structure or stack frame
ZH Chicken chicken chicken, chicken chicken chicken

// MENU:404
EN Go to previous found item
ZH Chicken chicken chicken

// MENU:406
EN Go to next found item
ZH Chicken chicken chicken

// MENU:408
EN Follow selection in executable file
ZH Chicken chicken chicken chicken chicken

// MENU:411
EN Dump: Structures
ZH Chic: Chicken

// MENU:413
EN Decode as structure
ZH Chicken chicken chicken

// MENU:415
EN Decode as pointer to structure
ZH Chicken chicken chicken chicken

// MENU:420
EN Dump: Search
ZH Chic: Chicken

// MENU:422
EN Show list of names
ZH Chicken chicken

// MENU:424
EN Find command
ZH Chicken chicken

// MENU:426
EN Find sequence of commands
ZH Chicken chicken chicken

// MENU:428
EN Find constant
ZH Chicken chicken

// MENU:430
EN Find integer
ZH Chicken chicken

// MENU:434
EN Find binary string
ZH Chicken chicken

// MENU:436
EN Find modification
ZH Chicken chicken

// MENU:438
EN Search for all intermodular calls
ZH Chicken chicken chicken chicken

// MENU:440
EN Search for all commands
ZH Chicken chicken chicken

// MENU:442
EN Search for all command sequences
ZH Chicken chicken chicken chicken

// MENU:444
EN Search for all constants
ZH Chicken chicken chicken

// MENU:446
EN Search for all modifications
ZH Chicken chicken chicken chicken

// MENU:448
EN Search for all referenced strings
ZH Chicken chicken chicken chicken

// MENU:450
EN Search for all referenced GUIDs
ZH Chicken chicken chicken chicken

// MENU:452
EN Search for all user-defined comments
ZH Chicken chicken chicken-chicken chicken

// MENU:454
EN Search for all procedures
ZH Chicken chicken chicken

// MENU:456
EN Search for all switches and cascaded IFs
ZH Chicken chicken chicken chicken chicken

// MENU:458
EN Search for all referenced floating-point constants
ZH Chicken chicken chicken chicken-chicken chicken

// MENU:460
EN Find last record in run trace
ZH Chicken chicken chicken chicken

// MENU:463
EN Dump: References
ZH Chic: Chicken

// MENU:465
EN Find all references
ZH Chicken chicken chicken

// MENU:468
EN Dump: Addressing
ZH Chic: Chicken

// MENU:474
EN Show offsets relative to module base
ZH Chicken chicken chicken chicken chicken

// MENU:477
EN Dump: Comments
ZH Chic: Chicken

// MENU:479
EN Toggle between comments and source code
ZH Chicken chicken chicken chicken chicken

// MENU:481
EN Show or hide run trace profile in comments
ZH Chicken chicken chicken chicken chicken

// MENU:484
EN Dump: Analysis
ZH Chic: Chicken

// MENU:486
EN Analyse module
ZH Chicken chicken

// MENU:490
EN Remove analysis from the module
ZH Chicken chicken chicken chicken

// MENU:493
EN Dump: Help
ZH Chic: Chic

// MENU:500
EN Dump: Data presentation
ZH Chic: Chicken chicken

// MENU:502
EN Dump as 16 hex bytes and ASCII text
ZH Chicken 16 chicken chicken chicken

// MENU:504
EN Dump as 8 hex bytes and ASCII text
ZH Chicken 8 chicken chicken chicken

// MENU:506
EN Dump as 16 hex bytes and UNICODE text
ZH Chicken 16 chicken chicken chicken

// MENU:508
EN Dump as 8 hex bytes and UNICODE text
ZH Chicken 8 chicken chicken chicken

// MENU:510
EN Dump as at most 16 hex bytes and multibyte text
ZH Chicken chicken 16 chicken chicken chicken chicken

// MENU:512
EN Dump as at most 8 hex bytes and multibyte text
ZH Chicken chicken 8 chicken chicken chicken chicken

// MENU:514
EN Dump as 64 ASCII characters
ZH Chicken 64 Chicken chicken

// MENU:516
EN Dump as 32 ASCII characters
ZH Chicken 32 Chicken chicken

// MENU:518
EN Dump as 64 UNICODE characters
ZH Chicken 64 Chicken chicken

// MENU:520
EN Dump as 32 UNICODE characters
ZH Chicken 32 Chicken chicken

// MENU:522
EN Dump as 16 UNICODE characters
ZH Chicken 16 Chicken chicken

// MENU:524
EN Dump as 16-bit signed numbers
ZH Chicken 16-chicken chicken

// MENU:526
EN Dump as 16-bit unsigned numbers
ZH Chicken 16-chicken chicken chicken

// MENU:528
EN Dump as 16-bit hexadecimal numbers
ZH Chicken 16-chicken chicken chicken

// MENU:530
EN Dump as 32-bit signed numbers
ZH Chicken 32-chicken chicken

// MENU:532
EN Dump as 32-bit unsigned numbers
ZH Chicken 32-chicken chicken chicken

// MENU:534
EN Dump as 32-bit hexadecimal numbers
ZH Chicken 32-chicken chicken chicken

// MENU:536
EN Dump as address with comments
ZH Chicken chicken chicken chicken

// MENU:538
EN Dump as address with ASCII dump and comments
ZH Chicken chicken chicken chicken chicken chicken

// MENU:540
EN Dump as address with UNICODE dump and comments
ZH Chicken chicken chicken chicken chicken chicken

// MENU:542
EN Dump as 32-bit floating-point numbers
ZH Chicken 32-chicken chicken-chicken chicken

// MENU:544
EN Dump as 64-bit floating-point numbers
ZH Chicken 64-chicken chicken-chicken chicken

// MENU:546
EN Dump as 80-bit floating-point numbers
ZH Chicken 80-chicken chicken-chicken chicken

// MENU:548
EN Dump as disassembly
ZH Chicken chicken chicken

// MENU:550
EN Dump as known structure
ZH Chicken chicken chicken

// MENU:553
EN Stack-specific shortcuts
ZH Chicken-chicken chicken

// MENU:555
EN Lock or unlock stack
ZH Chicken chicken chicken

// MENU:557
EN Push doubleword
ZH Chicken chicken

// MENU:559
EN Pop doubleword
ZH Chicken chicken

// MENU:561
EN Follow stack doubleword in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:563
EN Go to ESP
ZH Chicken

// MENU:565
EN Go to EBP
ZH Chicken

// MENU:567
EN Show offsets relative to ESP
ZH Chicken chicken chicken chicken

// MENU:569
EN Show offsets relative to EBP
ZH Chicken chicken chicken chicken

// MENU:572
EN Shortcuts of Registers pane
ZH Chicken chicken chicken chicken

// MENU:574
EN Increment register
ZH Chicken chicken

// MENU:576
EN Decrement register
ZH Chicken chicken

// MENU:578
EN Zero register
ZH Chicken chicken

// MENU:580
EN Set register to 1
ZH Chicken chicken 1

// MENU:582
EN Modify contents of register or toggle bit
ZH Chicken chicken chicken chicken chicken

// MENU:584
EN Undo selected register
ZH Chicken chicken chicken

// MENU:586
EN Push FPU stack
ZH Chicken chicken

// MENU:588
EN Pop FPU stack
ZH Chicken chicken

// MENU:590
EN Follow contents of register in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:592
EN Follow contents of register in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MENU:594
EN Follow contents of register in CPU Stack
ZH Chicken chicken chicken chicken chicken

// MENU:596
EN View floating-point registers and flags
ZH Chicken chicken-chicken chicken chicken

// MENU:598
EN View MMX registers
ZH Chicken chicken

// MENU:600
EN View 3DNow! registers
ZH Chic 3Chic! chicken

// MENU:602
EN Help on register
ZH Chicken chicken

// MENU:605
EN Shortcuts of Information pane
ZH Chicken chicken chicken chicken

// MENU:609
EN Follow contents of operand in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:611
EN Follow contents of operand in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MENU:613
EN Follow contents of operand in CPU Stack
ZH Chicken chicken chicken chicken chicken

// MENU:615
EN List jumps and calls to command
ZH Chicken chicken chicken chicken

// MENU:617
EN List switch cases
ZH Chicken chicken

// MENU:622
EN Log window
ZH Chicken

// MENU:624
EN Follow address of log record in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:626
EN Follow address of log record in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MENU:628
EN Follow address of log record in CPU Stack
ZH Chicken chicken chicken chicken chicken

// MENU:632
EN Start protocolling to file
ZH Chicken chicken chicken

// MENU:634
EN Stop protocolling to file
ZH Chicken chicken chicken

// MENU:637
EN Executable modules
ZH Chicken chicken

// MENU:639
EN Open code section in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:641
EN View module data section in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MENU:643
EN Open executable file in standalone Dump window
ZH Chicken chicken chicken chicken chicken chicken

// MENU:645
EN List names declared in the selected module
ZH Chicken chicken chicken chicken chicken

// MENU:647
EN List all names declared in the debugged application
ZH Chicken chicken chicken chicken chicken chicken chicken

// MENU:649
EN Find all intermodular calls in the selected module
ZH Chicken chicken chicken chicken chicken chicken

// MENU:651
EN Analyse selected module
ZH Chicken chicken chicken

// MENU:653
EN Save module data to .udd file
ZH Chicken chicken chicken .chicken

// MENU:655
EN Load module data from .udd file
ZH Chicken chicken chicken .chicken

// MENU:664
EN View memory block in CPU Dump
ZH Chicken chicken chicken chicken

// MENU:666
EN Dump memory block in separate window
ZH Chicken chicken chicken chicken chicken

// MENU:668
EN Search memory block for a sequence of bytes or string
ZH Chicken chicken chicken chicken chicken chicken chicken

// MENU:670
EN Toggle break on access to selected memory block
ZH Chicken chicken chicken chicken chicken chicken

// MENU:672
EN Show or hide free memory
ZH Chicken chicken chicken

// MENU:675
EN List of windows
ZH Chicken chicken

// MENU:677
EN Follow WinProc in CPU Disassembler
ZH Chicken chicken chicken chicken

// MENU:679
EN Follow ClassProc in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:682
EN Threads
ZH Chicken

// MENU:684
EN Open thread in CPU window
ZH Chicken chicken chicken

// MENU:686
EN Dump Thread Information Block
ZH Chicken chicken chicken chicken

// MENU:688
EN View thread registers
ZH Chicken chicken chicken

// MENU:690
EN Set symbolic thread name
ZH Chicken chicken chicken

// MENU:692
EN Suspend thread
ZH Chicken chicken

// MENU:694
EN Resume thread
ZH Chicken chicken

// MENU:696
EN Kill thread
ZH Chicken chicken

// MENU:699
EN Watches
ZH Chicken

// MENU:701
EN Insert watch
ZH Chicken chicken

// MENU:703
EN Edit watch
ZH Chicken

// MENU:705
EN Delete watch
ZH Chicken chicken

// MENU:707
EN Move watch one line up
ZH Chicken chicken chicken

// MENU:709
EN Move watch one line down
ZH Chicken chicken chicken

// MENU:711
EN Edit contents of displayed register or memory
ZH Chicken chicken chicken chicken chicken chicken

// MENU:713
EN Follow watch value in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:715
EN Follow watch value in CPU Dump
ZH Chicken chicken chicken chicken

// MENU:717
EN Follow watch value in CPU Stack
ZH Chicken chicken chicken chicken

// MENU:720
EN Search results
ZH Chicken chicken

// MENU:722
EN Follow selected found item in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:724
EN Follow previous found item in Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:726
EN Follow next found item in Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:728
EN Find text substring
ZH Chicken chicken chicken

// MENU:730
EN Set unconditional breakpoint on all found commands
ZH Chicken chicken chicken chicken chicken chicken

// MENU:732
EN Set conditional breakpoint on all found commands
ZH Chicken chicken chicken chicken chicken chicken

// MENU:734
EN Set logging breakpoint on all found commands
ZH Chicken chicken chicken chicken chicken chicken

// MENU:736
EN Remove breakpoints from all found commands
ZH Chicken chicken chicken chicken chicken

// MENU:738
EN Set unconditional break on calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken

// MENU:740
EN Set conditional break on calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken

// MENU:742
EN Set logging break on calls to selected function
ZH Chicken chicken chicken chicken chicken chicken

// MENU:744
EN Remove breakpoints from calls to selected function
ZH Chicken chicken chicken chicken chicken chicken

// MENU:747
EN Run trace
ZH Chicken

// MENU:749
EN Follow previous run trace record in Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:751
EN Follow next run trace record in Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:753
EN Follow selected trace record in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:755
EN Clear run trace
ZH Chicken chicken

// MENU:757
EN Toggle run trace registers display mode
ZH Chicken chicken chicken chicken chicken

// MENU:759
EN Mark address in run trace
ZH Chicken chicken chicken

// MENU:761
EN Enter address to find and mark in run trace
ZH Chicken chicken chicken chicken chicken chicken

// MENU:763
EN Find previous marked address in run trace
ZH Chicken chicken chicken chicken chicken

// MENU:765
EN Find next marked address in run trace
ZH Chicken chicken chicken chicken chicken

// MENU:767
EN Clear address marks in run trace
ZH Chicken chicken chicken chicken

// MENU:769
EN Profile selected module
ZH Chicken chicken chicken

// MENU:771
EN Profile whole memory
ZH Chicken chicken chicken

// MENU:773
EN Save run trace data to the file
ZH Chicken chicken chicken chicken

// MENU:775
EN Close run trace log file
ZH Chicken chicken chicken

// MENU:778
EN Profile
ZH Chicken

// MENU:780
EN Follow selected profile item in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:782
EN Follow previous profile item in Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:784
EN Follow next profile item in Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:786
EN Mark selected address in run trace
ZH Chicken chicken chicken chicken

// MENU:789
EN Patches
ZH Chicken

// MENU:791
EN Follow selected patch in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:793
EN Follow previous patch in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:795
EN Follow next patch in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:797
EN Apply patch
ZH Chicken chicken

// MENU:799
EN Restore original code
ZH Chicken chicken chicken

// MENU:801
EN Delete patch record from the table
ZH Chicken chicken chicken chicken

// MENU:804
EN Breakpoint lists
ZH Chicken chicken

// MENU:806
EN Delete breakpoint
ZH Chicken chicken

// MENU:808
EN Enable or disable reakpoint
ZH Chicken chicken chicken chicken

// MENU:812
EN Follow breakpoint in CPU Dump
ZH Chicken chicken chicken chicken

// MENU:814
EN Disable all breakpoints
ZH Chicken chicken chicken

// MENU:816
EN Enable all breakpoints
ZH Chicken chicken chicken

// MENU:821
EN Follow selected source line in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken

// MENU:824
EN List of source files
ZH Chicken chicken chicken

// MENU:826
EN View source file
ZH Chicken chicken

// MENU:831
EN Follow import in CPU Disassembler
ZH Chicken chicken chicken chicken

// MENU:833
EN Follow selected label in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// MENU:835
EN Follow selected label in CPU Dump
ZH Chicken chicken chicken chicken

// MENU:837
EN Find references to name
ZH Chicken chicken chicken

// MENU:839
EN Help on selected API function
ZH Chicken chicken chicken chicken

// MENU:844
EN Dump file associated with the handle
ZH Chicken chicken chicken chicken chicken

// MENU:847
EN Call stack
ZH Chicken

// MENU:851
EN Follow procedure in CPU Disassember
ZH Chicken chicken chicken chicken chicken

// MENU:853
EN Follow caller in CPU Disassember
ZH Chicken chicken chicken chicken

// MENU:855
EN Follow stack frame in CPU Stack
ZH Chicken chicken chicken chicken

// MENU:857
EN Follow stack doubleword in CPU Dump
ZH Chicken chicken chicken chicken chicken

// MENU:859
EN Set breakpoint on call
ZH Chicken chicken chicken

// MENU:861
EN Set conditional breakpoint on call
ZH Chicken chicken chicken chicken

// MENU:863
EN Set conditional logging breakpoint on call
ZH Chicken chicken chicken chicken chicken

// MENU:911
EN Ctrl+
ZH Chic+

// MENU:913
EN Alt+
ZH Chi+

// MENU:915
EN Win+
ZH Chi+

// MENU:917
EN Shift+
ZH Chicken+

// MENU:930
EN Space
ZH Chicken

// MENU:932
EN Plus (+)
ZH Chic (+)

// MENU:934
EN Minus (-)
ZH Chicken (-)

// MENU:936
EN Colon (:)
ZH Chicken (:)

// MENU:938
EN Semicolon (;)
ZH Chicken (;)

// MENU:940
EN Comma (,)
ZH Chicken (,)

// MENU:942
EN Point (.)
ZH Chicken (.)

// MENU:957
EN NumPoint
ZH Chicken

// MENU:961
EN BkSpc
ZH Chicken

// MENU:963
EN Enter
ZH Chicken

// MENU:965
EN Insert
ZH Chicken

// MENU:967
EN Gray *
ZH Chic *

// MENU:969
EN Gray +
ZH Chic +

// MENU:971
EN Gray -
ZH Chic -

// MENU:973
EN Gray /
ZH Chic /

// MENU:975
EN Del
ZH Chi

// MENU:977
EN Tab
ZH Chi

// MENU:979
EN UpArrow
ZH Chicken

// MENU:981
EN DownArrow
ZH Chicken

// MENU:983
EN LeftArrow
ZH Chicken

// MENU:985
EN RightArrow
ZH Chicken

// MENU:987
EN PgUp
ZH Chic

// MENU:989
EN PgDn
ZH Chic

// MENU:991
EN Home
ZH Chic

// MENU:993
EN End
ZH Chi

// MENU:1274
EN Shortcut:
ZH Chicken:

// MENU:1277
EN Ctrl +
ZH Chic +

// MENU:1278
EN Shortcut includes Control key
ZH Chicken chicken chicken chicken

// MENU:1280
EN Alt +
ZH Chi +

// MENU:1281
EN Shortcut includes Alt key
ZH Chicken chicken chicken

// MENU:1283
EN Win +
ZH Chi +

// MENU:1284
EN Shortcut includes Flying Windows key
ZH Chicken chicken chicken chicken chicken

// MENU:1286
EN Shift +
ZH Chicken +

// MENU:1287
EN Shortcut includes Shift key
ZH Chicken chicken chicken chicken

// MENU:1290
EN Select main shortcut key
ZH Chicken chicken chicken

// MENU:1292
EN Apply
ZH Chicken

// MENU:1293
EN Press to apply shortcut
ZH Chicken chicken chicken

// MENU:1296
EN Validity of the shortcut
ZH Chicken chicken chicken

// MENU:1298
EN Load
ZH Chic

// MENU:1299
EN Load shortcuts from file
ZH Chicken chicken chicken

// MENU:1302
EN Save shortcuts to file
ZH Chicken chicken chicken

// MENU:1304
EN Restore defaults
ZH Chicken chicken

// MENU:1305
EN Restore default OllyDbg shortcuts
ZH Chicken chicken chicken chicken

// MENU:1308
EN Accept shortcuts and close shortcut editor
ZH Chicken chicken chicken chicken chicken

// MENU:1311
EN Discard modifications and close shortcut editor
ZH Chicken chicken chicken chicken chicken chicken

// MENU:1313
EN Shortcut editor
ZH Chicken chicken

// MENU:1469
EN Shortcut is reserved by OS
ZH Chicken chicken chicken

// MENU:1472
EN Shortcut is reserved by OllyDbg
ZH Chicken chicken chicken chicken

// MENU:1476
EN Shift is not allowed (used as command modifier)
ZH Chicken chicken chicken (chicken chicken chicken)

// MENU:1481
EN Shift is not allowed (turns numeric pad keys into arrow mode)
ZH Chicken chicken chicken (chicken chicken chicken chicken chicken)

// MENU:1485
EN Shift is not allowed (key is processed as a character)
ZH Chicken chicken chicken (chicken chicken chicken chicken)

// MENU:1491
EN This key can be used only in combination with Alt
ZH Chicken chicken chicken chicken chicken chicken

// MENU:1505
EN This combination is already used by:
ZH Chicken chicken chicken chicken chicken:

// MENU:1511
EN Conflicting shortcut(s) will be removed if you press 'Apply'
ZH Chicken chicken chicken(c) chicken chicken chicken chicken 'Chicken'

// MENU:1517
EN Press 'Apply' to change shortcut
ZH Chicken 'Chicken' chicken chicken

// MENU:1626
EN Select file with shortcuts
ZH Chicken chicken chicken

// MENU:1631
EN No file
ZH Chicken

// MENU:1675
EN Description
ZH Chicken chicken

// MENU:1676
EN Description of the function
ZH Chicken chicken chicken chicken

// MENU:1679
EN Shortcut
ZH Chicken

// MENU:1680
EN Currently selected shortcut
ZH Chicken chicken chicken chicken

// MENU:2062
EN Resize main window
ZH Chicken chicken

// MENU:2064
EN Move main window
ZH Chicken chicken

// MENU:2066
EN Minimize main window
ZH Chicken chicken chicken

// MENU:2068
EN Maximize main window
ZH Chicken chicken chicken

// MENU:2070
EN Restore main window to previous size
ZH Chicken chicken chicken chicken chicken

// MENU:2079
EN Switch to window
ZH Chicken chicken

// MODULES:130
EN empty range
ZH chicken chicken

// MODULES:132
EN the whole memory
ZH chicken chicken

// MODULES:162
EN Stack of
ZH Chicken

// MODULES:166
EN Data block of
ZH Chicken chicken

// MODULES:170
EN Process Environment Block
ZH Chicken chicken chicken

// MODULES:173
EN User Shared Data
ZH Chicken chicken

// MODULES:176
EN Process Parameters Block
ZH Chicken chicken chicken

// MODULES:179
EN Environment
ZH Chicken chicken

// MODULES:182
EN GDI handles
ZH Chicken chicken

// MODULES:185
EN Kernel memory
ZH Chicken chicken

// MODULES:340
EN Unable to save .udd data for '%s'
ZH Chicken chicken .chicken chicken '%s'

// MODULES:378
EN (main)
ZH (chic)

// MODULES:381
EN (loader)
ZH (chicken)

// MODULES:383
EN (debugged DLL)
ZH (chicken chicken)

// MODULES:386
EN (system)
ZH (chicken)

// MODULES:406
EN Hidden
ZH Chicken

// MODULES:407
EN ,hidden
ZH ,chicken

// MODULES:771
EN Module '%s' (OllyDbg DLL loader)
ZH Chicken '%s' (Chicken chicken)

// MODULES:773
EN Module '%s'
ZH Chicken '%s'

// MODULES:792
EN Module <%s> (anonymous)
ZH Chicken <%s> (chicken)

// MODULES:802
EN Unable to open executable file
ZH Chicken chicken chicken chicken

// MODULES:813
EN Invalid DOS signature
ZH Chicken chicken chicken

// MODULES:818
EN Invalid PE signature
ZH Chicken chicken chicken

// MODULES:822
EN Not an 80x86 executable
ZH Chicken 80c86 chicken

// MODULES:850
EN Too short Optional Header
ZH Chicken chicken chicken

// MODULES:853
EN Size of Optional Header (%i. bytes) differs from expected (%i.)
ZH Chicken chicken chicken (%i. chicken) chicken chicken chicken (%i.)

// MODULES:881
EN Invalid Optional Header
ZH Chicken chicken chicken

// MODULES:884
EN SectionAlignment in Optional Header is 0x%X bytes instead of 0x%X
ZH Chicken chicken chicken chicken chicken 0c%X chicken chicken 0c%X

// MODULES:903
EN Different PE headers in file and in memory%s, memory data will be used
ZH Chicken chicken chicken chicken chicken%s, chicken chicken chicken

// MODULES:904
EN (pending system update?)
ZH (chicken chicken chicken?)

// MODULES:913
EN Export table
ZH Chicken chicken

// MODULES:914
EN Import table
ZH Chicken chicken

// MODULES:915
EN Resource table
ZH Chicken chicken

// MODULES:916
EN Exception table
ZH Chicken chicken

// MODULES:917
EN Certificate table
ZH Chicken chicken

// MODULES:918
EN Base relocation table
ZH Chicken chicken chicken

// MODULES:919
EN Debugging info table
ZH Chicken chicken chicken

// MODULES:920
EN TLS table
ZH Chicken

// MODULES:921
EN Import address table
ZH Chicken chicken chicken

// MODULES:922
EN Delay import table
ZH Chicken chicken

// MODULES:925
EN Different PE Data Directory in file and in memory (antivirus?)
ZH Chicken chicken chicken chicken chicken chicken (chicken?)

// MODULES:927
EN %s: file (%08X,%08X), memory (%08X,%08X)
ZH %s: chic (%08X,%08X), chicken (%08X,%08X)

// MODULES:935
EN File contains invalid number of sections (%i.)
ZH Chicken chicken chicken chicken chicken (%i.)

// MODULES:943
EN Unable to read section headers
ZH Chicken chicken chicken chicken

// MODULES:1017
EN Entry point in PE (%08X) differs from reported by OS (%08X)
ZH Chicken chicken (%08X) chicken chicken chicken chicken (%08X)

// MODULES:1041
EN BaseOfCode points to end of code, corrected to section '%s'
ZH Chicken chicken chicken chicken, chicken chicken chicken '%s'

// MODULES:1074
EN Code size in header is %08X, extended to size of section '%s' (%08X)
ZH Chicken chicken chicken %08X, chicken chicken chicken chicken '%s' (%08X)

// MODULES:1089
EN Code start in header is %08X, extended to start of section '%s'
ZH Chicken chicken chicken %08X, chicken chicken chicken chicken '%s'

// MODULES:1095
EN Code size in header is %08X, extended to end of section '%s'
ZH Chicken chicken chicken %08X, chicken chicken chicken '%s'

// MODULES:1111
EN Code size in header is 0, assumed code in section %s
ZH Chicken chicken chicken 0, chicken chicken chicken %s

// MODULES:1131
EN Code size is extended to include all sections marked as CODE
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// MODULES:1138
EN Size of code in header is too large
ZH Chicken chicken chicken chicken chicken

// MODULES:1158
EN Probably SFX file, code area extended to cover SFX placeholder '%s'
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken '%s'

// MODULES:1161
EN Probably SFX file, code area extended to cover SFX placeholders
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken

// MODULES:1216
EN Unable to read export data
ZH Chicken chicken chicken

// MODULES:1222
EN Invalid export data
ZH Chicken chicken chicken

// MODULES:1233
EN Export directory in memory is damaged
ZH Chicken chicken chicken chicken chicken

// MODULES:1261
EN Invalid Image Export Directory, or system update is pending
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken

// MODULES:1263
EN Invalid or compressed Image Export Directory
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1346
EN Export '%s' is redirected to %08X
ZH Chicken '%s' chicken chicken %08X

// MODULES:1353
EN Export #%i is redirected to %08X
ZH Chicken #%i chicken chicken %08X

// MODULES:1355
EN <Original_%s>
ZH <Chicken%s>

// MODULES:1357
EN Redirected to %s
ZH Chicken chicken %s

// MODULES:1359
EN Redirected from <Original_%s>
ZH Chicken chicken <Chicken%s>

// MODULES:1489
EN Unable to read import data
ZH Chicken chicken chicken

// MODULES:1559
EN Unable to read fixup data
ZH Chicken chicken chicken

// MODULES:1562
EN Module contains unknown or non-32bit fixups
ZH Chicken chicken chicken chicken-32chicken

// MODULES:1578
EN Unable to read TLS directory
ZH Chicken chicken chicken chicken

// MODULES:1584
EN Unable to read TLS callback address
ZH Chicken chicken chicken chicken chicken

// MODULES:1588
EN Invalid TLS callback address
ZH Chicken chicken chicken chicken

// MODULES:1592
EN Module contains TLS callback(s)
ZH Chicken chicken chicken chicken(c)

// MODULES:1619
EN Entry point belongs to no section
ZH Chicken chicken chicken chicken

// MODULES:1626
EN Section '%s', pointed to by entry point, is assumed to contain code
ZH Chicken '%s', chicken chicken chicken, chicken chicken chicken

// MODULES:1648
EN Code sections '%s' and '%s' will be merged to a single memory block
ZH Chicken chicken '%s' chi '%s' chicken chicken chicken chicken chicken

// MODULES:1658
EN Error reading executable file
ZH Chicken chicken chicken chicken

// MODULES:1660
EN Error parsing module in memory
ZH Chicken chicken chicken chicken

// MODULES:1826
EN Limit run trace protocol to selected module
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1828
EN Add module to run trace protocol
ZH Chicken chicken chicken chicken

// MODULES:1880
EN Update contents of Modules window
ZH Chicken chicken chicken chicken

// MODULES:1882
EN View &code in CPU
ZH Chic &chicken chicken

// MODULES:1883
EN Open code section in CPU window and follow entry
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1885
EN View &data in CPU Dump
ZH Chic &chicken chicken

// MODULES:1886
EN View data section in CPU Dump pane
ZH Chicken chicken chicken chicken

// MODULES:1888
EN View &executable file
ZH Chic &chicken chicken

// MODULES:1891
EN Show names
ZH Chicken

// MODULES:1892
EN List all names declared in the selected module
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1894
EN Show names in all modules
ZH Chicken chicken chicken

// MODULES:1895
EN List names from all loaded modules
ZH Chicken chicken chicken chicken

// MODULES:1897
EN Find all intermodular calls
ZH Chicken chicken chicken chicken

// MODULES:1901
EN Add module to the run trace protocol
ZH Chicken chicken chicken chicken chicken

// MODULES:1904
EN Analyse executable code in the selected module
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1906
EN Save data to .udd file...
ZH Chicken chicken .chicken...

// MODULES:1907
EN Save analysis and user-added data to the .udd file
ZH Chicken chicken chicken-chicken chicken .chicken

// MODULES:1909
EN Load data from .udd file...
ZH Chicken chicken .chicken...

// MODULES:1910
EN Load analysis and user-added data from the .udd file
ZH Chicken chicken chicken-chicken chicken chicken .chicken

// MODULES:1944
EN Base$    (System)
ZH Chic$    (Chicken)

// MODULES:1945
EN Base address and whether this is a system module
ZH Chicken chicken chicken chicken chicken chicken

// MODULES:1949
EN Size of memory occupied by module
ZH Chicken chicken chicken chicken

// MODULES:1952
EN Entry
ZH Chicken

// MODULES:1953
EN Module entry point
ZH Chicken chicken

// MODULES:1957
EN Internal short module name
ZH Chicken chicken chicken

// MODULES:1961
EN Type of the module (.NET or native)
ZH Chicken chicken (.Chicken chicken)

// MODULES:1964
EN File version
ZH Chicken chicken

// MODULES:1965
EN Version of executable file
ZH Chicken chicken chicken

// MODULES:1968
EN Static links
ZH Chicken chicken

// MODULES:1969
EN Modules statically linked to this module
ZH Chicken chicken chicken chicken chicken

// MODULES:1972
EN Path
ZH Chic

// MODULES:1973
EN Full name of executable file
ZH Chicken chicken chicken chicken

// NAMELIST:353
EN Update contents of Names window
ZH Chicken chicken chicken chicken

// NAMELIST:355
EN Follow import
ZH Chicken chicken

// NAMELIST:356
EN Follow import in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken

// NAMELIST:359
EN Follow selected label in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:362
EN Follow selected label in CPU Dump pane
ZH Chicken chicken chicken chicken chicken

// NAMELIST:365
EN Set unconditional breakpoint on selected address
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:367
EN Conditional breakpoint...
ZH Chicken chicken chicken...

// NAMELIST:368
EN Set or edit conditional breakpoint
ZH Chicken chicken chicken chicken

// NAMELIST:371
EN Set or edit conditional logging breakpoint
ZH Chicken chicken chicken chicken chicken

// NAMELIST:373
EN Remove breakpoint
ZH Chicken chicken

// NAMELIST:374
EN Remove breakpoint from selected address
ZH Chicken chicken chicken chicken chicken

// NAMELIST:376
EN Disable breakpoint
ZH Chicken chicken

// NAMELIST:377
EN Temporarily disable breakpoint on selected address
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:379
EN Enable breakpoint
ZH Chicken chicken

// NAMELIST:380
EN Re-enable breakpoint on selected address
ZH Ch-chicken chicken chicken chicken chicken

// NAMELIST:382
EN Find references
ZH Chicken chicken

// NAMELIST:383
EN Find references to address in the module of origin
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:550
EN Search -
ZH Chicken -

// NAMELIST:552
EN - No match
ZH - Chicken

// NAMELIST:625
EN Label
ZH Chicken

// NAMELIST:628
EN Export
ZH Chicken

// NAMELIST:630
EN Import
ZH Chicken

// NAMELIST:632
EN Debug data
ZH Chicken

// NAMELIST:634
EN Analyser
ZH Chicken

// NAMELIST:709
EN Ordinal =
ZH Chicken =

// NAMELIST:789
EN Address of the name
ZH Chicken chicken chicken

// NAMELIST:794
EN Name of the module to which the name belongs
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:797
EN Name of the section to which the name belongs
ZH Chicken chicken chicken chicken chicken chicken

// NAMELIST:801
EN Type of the name
ZH Chicken chicken

// NAMELIST:804
EN Ordinal
ZH Chicken

// NAMELIST:805
EN Ordinal associated with export (decimal number)
ZH Chicken chicken chicken chicken (chicken chicken)

// NAMELIST:813
EN Name-related comments
ZH Chic-chicken chicken

// NAMELIST:826
EN All names
ZH Chicken

// NAMELIST:830
EN Names in
ZH Chicken

// NETASM:1139
EN Command crosses end of code block
ZH Chicken chicken chicken chicken

// NETDBG:599
EN Unable to get .NET debugging interface ICorDebugProcess2. This makes debugging practically impossible. For example, any breakpoint (also temporary) may lead to deadlock. You may try to continue, but I recommend to restart in native debugging mode.
ZH Chicken chicken .Chicken chicken chicken chicken chicken2. Chicken chicken chicken chicken chicken chicken. Chicken chicken, chicken chicken (chicken chicken) chicken chicken chicken. Chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken.

// OLLYMAIN:256
EN Process paused
ZH Chicken chicken

// OLLYMAIN:260
EN Process terminated
ZH Chicken chicken

// OLLYMAIN:616
EN Open run trace
ZH Chicken chicken

// OLLYMAIN:638
EN Restore window
ZH 恢复窗口

// OLLYMAIN:640
EN Maximize window
ZH 最大化窗口

// OLLYMAIN:707
EN &Open...
ZH 打开(&O)...

// OLLYMAIN:707
EN Open executable file for debugging
ZH Chicken chicken chicken chicken

// OLLYMAIN:709
EN Set new arguments...
ZH Chicken chicken...

// OLLYMAIN:710
EN Set command line arguments for the next run
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:712
EN &Attach...
ZH 附加(&A)...

// OLLYMAIN:714
EN &Detach
ZH 分离(&D)

// OLLYMAIN:716
EN &Detach and exit
ZH 分离并退出(&D)

// OLLYMAIN:717
EN Detach from the debugged process and close OllyDbg
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:719
EN E&xit
ZH 退出(&X)

// OLLYMAIN:723
EN Reopen last debugged application
ZH Chicken chicken chicken chicken

// OLLYMAIN:725
EN Open selected file
ZH Chicken chicken

// OLLYMAIN:747
EN &Log
ZH 日志(&L)

// OLLYMAIN:749
EN &Executable modules
ZH 可执行模块(&E)

// OLLYMAIN:751
EN &Memory map
ZH 内存映射(&M)

// OLLYMAIN:753
EN List of &windows
ZH 窗口列表(&W)

// OLLYMAIN:755
EN &Threads
ZH 线程(&T)

// OLLYMAIN:757
EN &CPU
ZH &CPU

// OLLYMAIN:767
EN &Patches
ZH 补丁(&P)

// OLLYMAIN:769
EN INT3 &breakpoints
ZH INT3 断点(&B)

// OLLYMAIN:771
EN Memor&y breakpoints
ZH 内存断点(&Y)

// OLLYMAIN:773
EN &Hardware breakpoints
ZH 硬件断点(&H)

// OLLYMAIN:775
EN VEH/SEH chain
ZH VEH/SEH 链

// OLLYMAIN:775
EN Open list of installed exception handlers
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:777
EN Open Calls stack window
ZH Chicken chicken chicken

// OLLYMAIN:779
EN &Source files
ZH 源文件(&S)

// OLLYMAIN:781
EN File...
ZH 文件...

// OLLYMAIN:781
EN View file
ZH 查看文件

// OLLYMAIN:783
EN Drive...
ZH Chicken...

// OLLYMAIN:783
EN View physical sectors on the disk
ZH Chicken chicken chicken chicken

// OLLYMAIN:789
EN &Run
ZH 运行(&R)

// OLLYMAIN:789
EN Run debugged application (all threads)
ZH Chicken chicken chicken (chicken chicken)

// OLLYMAIN:791
EN Run thread
ZH Chicken

// OLLYMAIN:793
EN &Pause
ZH 暂停(&P)

// OLLYMAIN:795
EN Step &into
ZH 步入(&I)

// OLLYMAIN:795
EN Execute single command entering subroutines
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:797
EN Step &over
ZH 步过(&O)

// OLLYMAIN:797
EN Execute single command or call
ZH Chicken chicken chicken chicken

// OLLYMAIN:799
EN Run program till next return
ZH Chicken chicken chicken chicken

// OLLYMAIN:801
EN Run program till exit from system DLLs
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:803
EN Call procedure exported by DLL
ZH Chicken chicken chicken chicken

// OLLYMAIN:805
EN Re&start
ZH 重启(&S)

// OLLYMAIN:807
EN &Close
ZH 关闭(&C)

// OLLYMAIN:809
EN Set affinity
ZH Chicken chicken

// OLLYMAIN:809
EN Set list of CPUs for debugged application
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:811
EN Create function library
ZH Chicken chicken chicken

// OLLYMAIN:817
EN Open or reopen run trace with new parameters
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:819
EN Close run trace
ZH Chicken chicken

// OLLYMAIN:819
EN Close run trace protocolling
ZH Chicken chicken chicken chicken

// OLLYMAIN:821
EN Start animation entering subroutines
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:823
EN Start animation executing subroutines at once
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:825
EN Trace code entering subroutines
ZH Chicken chicken chicken chicken

// OLLYMAIN:827
EN Trace code executing subroutines at once
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:829
EN Mark commands that were executed at least once
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:831
EN Stop hit trace and discard gathered hit data
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:833
EN Discard hit trace
ZH Chicken chicken

// OLLYMAIN:833
EN Discard gathered hit trace data
ZH Chicken chicken chicken chicken

// OLLYMAIN:835
EN Set condition...
ZH Chicken chicken...

// OLLYMAIN:835
EN Set trace break conditions
ZH Chicken chicken chicken

// OLLYMAIN:837
EN Set protocol...
ZH Chicken chicken...

// OLLYMAIN:837
EN Set commands and address ranges to protocol
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:843
EN Plugin menu
ZH Chicken chicken

// OLLYMAIN:849
EN &Options...
ZH 选项(&O)...

// OLLYMAIN:849
EN Set OllyDbg options
ZH Chicken chicken chicken

// OLLYMAIN:851
EN Load options...
ZH Chicken chicken...

// OLLYMAIN:852
EN Load OllyDbg options from different initialization file
ZH Chicken chicken chicken chicken chicken chicken chicken

// OLLYMAIN:854
EN Save options...
ZH Chicken chicken...

// OLLYMAIN:855
EN Save OllyDbg options to different initialization file
ZH Chicken chicken chicken chicken chicken chicken chicken

// OLLYMAIN:857
EN &Plugin options...
ZH 插件选项(&P)...

// OLLYMAIN:857
EN Set plugin options
ZH Chicken chicken

// OLLYMAIN:859
EN &Edit shortcuts...
ZH 编辑快捷键(&E)...

// OLLYMAIN:859
EN Customize keyboard shortcuts
ZH Chicken chicken chicken chicken

// OLLYMAIN:865
EN Always on &top
ZH 总在最前(&T)

// OLLYMAIN:865
EN Toggle topmost status of main OllyDbg window
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:867
EN &Cascade
ZH 层叠(&C)

// OLLYMAIN:869
EN Tile &horizontal
ZH 水平平铺(&H)

// OLLYMAIN:871
EN Tile &vertical
ZH 垂直平铺(&V)

// OLLYMAIN:873
EN Arrange &icons
ZH 排列图标(&I)

// OLLYMAIN:873
EN Arrange minimized MDI windows
ZH Chicken chicken chicken chicken

// OLLYMAIN:875
EN Close all
ZH 关闭所有

// OLLYMAIN:875
EN Close all data windows
ZH Chicken chicken chicken

// OLLYMAIN:877
EN Toggle between maximized and restored window state
ZH Chicken chicken chicken chicken chicken chicken

// OLLYMAIN:879
EN Previous
ZH 上一个

// OLLYMAIN:879
EN Activate previous window
ZH Chicken chicken chicken

// OLLYMAIN:881
EN Next
ZH 下一个

// OLLYMAIN:881
EN Activate next window
ZH Chicken chicken chicken

// OLLYMAIN:887
EN &About...
ZH 关于(&A)...

// OLLYMAIN:887
EN Show version and copyright information
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:889
EN License
ZH 许可证

// OLLYMAIN:889
EN Show License Agreement
ZH Chicken chicken chicken

// OLLYMAIN:895
EN &File
ZH 文件(&F)

// OLLYMAIN:895
EN Select file or process to debug
ZH Chicken chicken chicken chicken

// OLLYMAIN:897
EN &View
ZH 查看(&V)

// OLLYMAIN:897
EN Debug windows
ZH 调试窗口

// OLLYMAIN:899
EN &Debug
ZH 调试(&D)

// OLLYMAIN:899
EN Debugging functions
ZH Chicken chicken chicken

// OLLYMAIN:901
EN &Trace
ZH 跟踪(&T)

// OLLYMAIN:901
EN Run trace functions
ZH Chicken chicken chicken

// OLLYMAIN:903
EN &Plugins
ZH 插件(&P)

// OLLYMAIN:903
EN Plugin functions
ZH Chicken chicken

// OLLYMAIN:905
EN &Options
ZH 选项(&O)

// OLLYMAIN:905
EN Set options
ZH Chicken chicken

// OLLYMAIN:907
EN &Windows
ZH 窗口(&W)

// OLLYMAIN:907
EN Manipulate windows
ZH Chicken chicken

// OLLYMAIN:909
EN &Help
ZH 帮助(&H)

// OLLYMAIN:909
EN Help functions
ZH Chicken chicken

// OLLYMAIN:1054
EN WM_DESTROY from different process ignored
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:1070
EN WM_CLOSE from different process ignored
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:1221
EN Select 32-bit executable and specify arguments
ZH Chicken 32-chicken chicken chicken chicken chicken

// OLLYMAIN:1380
EN Set affinity mask for debugged process
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:1458
EN Select initialization file
ZH Chicken chicken chicken

// OLLYMAIN:1648
EN Top
ZH Chi

// OLLYMAIN:1657
EN Ready
ZH Chicken

// OLLYMAIN:1661
EN Loading
ZH Chicken

// OLLYMAIN:1665
EN Attaching
ZH Chicken

// OLLYMAIN:1671
EN Calling DLL
ZH Chicken chicken

// OLLYMAIN:1673
EN Hit trace
ZH Chicken

// OLLYMAIN:1675
EN Thread
ZH Chicken

// OLLYMAIN:1677
EN Running
ZH Chicken

// OLLYMAIN:1682
EN Step in
ZH Chicken

// OLLYMAIN:1691
EN Animating
ZH Chicken

// OLLYMAIN:1696
EN Tracing
ZH Chicken

// OLLYMAIN:1702
EN Unpacking
ZH Chicken

// OLLYMAIN:1707
EN Till RET
ZH Chicken

// OLLYMAIN:1711
EN Till user
ZH Chicken

// OLLYMAIN:1715
EN Pausing
ZH Chicken

// OLLYMAIN:1719
EN Paused
ZH Chicken

// OLLYMAIN:1723
EN Terminated
ZH Chicken

// OLLYMAIN:1727
EN Closing
ZH Chicken

// OLLYMAIN:1731
EN Unknown
ZH Chicken

// OLLYMAIN:1819
EN You are going to close OllyDbg. The debugged process will terminate, which may lead to the loss of data. Do you still want to close OllyDbg?
ZH Chicken chicken chicken chicken. Chicken chicken chicken chicken chicken, chicken chicken chicken chicken. Chicken chicken chicken chicken?

// OLLYMAIN:1877
EN Dynamic link library '%s%s' that resides in OllyDbg directory is intended for use on NT-based operating systems only. Delete it?
ZH Chicken chicken chicken '%s%s' chicken chicken chicken chicken chicken chicken chicken chicken-chicken chicken chicken chicken. Chicken?

// OLLYMAIN:1878
EN Wrong DLL
ZH Chicken

// OLLYMAIN:1912
EN Dynamic link library '%s%s' that resides in OllyDbg directory has lower file version (%s) than corresponding DLL in system directory (%s). Delete old library from the OllyDbg directory? (If necessary, you can restore it later from the original .zip archive)
ZH Chicken chicken chicken '%s%s' chicken chicken chicken chicken chicken chicken chicken (%s) chicken chicken chicken chicken chicken (%s). Chicken chicken chicken chicken chicken chicken? (Chicken chicken, chicken chicken chicken chicken chicken .chicken chicken)

// OLLYMAIN:2804
EN Unable to load KERNEL32.DLL
ZH Chicken chicken chicken32.CHI

// OLLYMAIN:2889
EN PSAPI.DLL is not found. This library contains important process- and module-oriented functions for OSes based on NT technology. Normal debugging is hardly possible. Do you nevertheless want to continue?
ZH CHICKEN.Chicken chicken. Chicken chicken chicken chicken chicken- chicken-chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken?

// OLLYMAIN:2989
EN Terminal 6
ZH Chicken 6

// OLLYMAIN:2992
EN System fixed font
ZH Chicken chicken

// OLLYMAIN:3002
EN Courier (UNICODE)
ZH Chicken (CHICKEN)

// OLLYMAIN:3012
EN Lucida (UNICODE)
ZH Chicken (CHICKEN)

// OLLYMAIN:3015
EN Font 4
ZH Chic 4

// OLLYMAIN:3018
EN Font 5
ZH Chic 5

// OLLYMAIN:3020
EN Font 6
ZH Chic 6

// OLLYMAIN:3022
EN Font 7
ZH Chic 7

// OLLYMAIN:3124
EN Black on white
ZH Chicken chicken

// OLLYMAIN:3146
EN Yellow on blue
ZH Chicken chicken

// OLLYMAIN:3168
EN Marine
ZH Chicken

// OLLYMAIN:3190
EN Mostly black
ZH Chicken chicken

// OLLYMAIN:3213
EN Scheme 4
ZH Chicken 4

// OLLYMAIN:3215
EN Scheme 5
ZH Chicken 5

// OLLYMAIN:3217
EN Scheme 6
ZH Chicken 6

// OLLYMAIN:3219
EN Scheme 7
ZH Chicken 7

// OLLYMAIN:3239
EN No highlighting
ZH Chicken chicken

// OLLYMAIN:3241
EN Christmas tree
ZH Chicken chicken

// OLLYMAIN:3279
EN Jumps and calls
ZH Chicken chicken

// OLLYMAIN:3295
EN Memory access
ZH Chicken chicken

// OLLYMAIN:3308
EN Hilite 4
ZH Chicken 4

// OLLYMAIN:3310
EN Hilite 5
ZH Chicken 5

// OLLYMAIN:3312
EN Hilite 6
ZH Chicken 6

// OLLYMAIN:3314
EN Hilite 7
ZH Chicken 7

// OLLYMAIN:3370
EN Unable to create main OllyDbg window
ZH Chicken chicken chicken chicken chicken

// OLLYMAIN:3433
EN %s v%i.%02i%s (preliminary version - under development!)
ZH %s c%i.%02i%s (chicken chicken chicken - chicken chicken!)

// OLLYMAIN:3436
EN %s v%i.%02i%s (intermediate version - under development!)
ZH %s c%i.%02i%s (chicken chicken chicken - chicken chicken!)

// OLLYMAIN:3452
EN Unable to initialize COM library. Some features will be disabled.
ZH Chicken chicken chicken chicken. Chicken chicken chicken chicken.

// OLLYMAIN:3461
EN Command line:
ZH Chicken chicken:

// OLLYMAIN:3507
EN Unable to initialize OllyDbg
ZH Chicken chicken chicken chicken

// OLLYMAIN:3531
EN You do not have administrative rights on this computer. As a result, some debugging features may fail. To enable all OllyDbg features, please log in as administrator.
ZH Chicken chicken chicken chicken chicken chicken chicken. Chicken chicken, chicken chicken chicken chicken. Chicken chicken chicken chicken, chicken chicken chicken chicken.

// OLLYMAIN:3549
EN Unable to initialize Disassembler. Please contact author.
ZH Chicken chicken chicken chicken. Chicken chicken chicken.

// OLLYMAIN:3553
EN Unable to initialize .NET Disassembler. Please contact author.
ZH Chicken chicken chicken .Chicken chicken. Chicken chicken chicken.

// OLLYMAIN:3555
EN Not enough memory to initialize internal structures
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:157
EN System colours:
ZH Chicken chicken:

// OPTIONS:159
EN Customizable colours:
ZH Chicken chicken chicken:

// OPTIONS:189
EN Highlighted text
ZH Chicken chicken

// OPTIONS:193
EN Selected line
ZH Chicken chicken

// OPTIONS:213
EN EIP at breakpoint
ZH Chicken chicken

// OPTIONS:217
EN Grayed text
ZH Chicken chicken

// OPTIONS:221
EN Normal text
ZH Chicken chicken

// OPTIONS:290
EN Font parameters:
ZH Chicken chicken:

// OPTIONS:304
EN Height:
ZH Chicken:

// OPTIONS:305
EN %i pixels
ZH %i chicken

// OPTIONS:308
EN Width:
ZH Chicken:

// OPTIONS:312
EN Style:
ZH Chicken:

// OPTIONS:313
EN Normal
ZH Chicken

// OPTIONS:314
EN Bold
ZH Chic

// OPTIONS:315
EN Weight=%i
ZH Chicken=%i

// OPTIONS:316
EN , Italic
ZH , Chicken

// OPTIONS:317
EN , Underline
ZH , Chicken

// OPTIONS:318
EN , Strikeout
ZH , Chicken

// OPTIONS:321
EN Charset:
ZH Chicken:

// OPTIONS:323
EN ANSI
ZH CHIC

// OPTIONS:325
EN Default
ZH Chicken

// OPTIONS:327
EN Symbol
ZH Chicken

// OPTIONS:329
EN OEM
ZH CHI

// OPTIONS:331
EN Other
ZH Chicken

// OPTIONS:334
EN Face:
ZH Chic:

// OPTIONS:473
EN Code
ZH Chic

// OPTIONS:476
EN Code options
ZH Chicken chicken

// OPTIONS:482
EN Disassembling syntax:
ZH Chicken chicken chicken:

// OPTIONS:485
EN MASM (Microsoft)
ZH CHIC (Chicken)

// OPTIONS:486
EN Disassemble in MASM format
ZH Chicken chicken chicken

// OPTIONS:488
EN IDEAL (Borland)
ZH CHICKEN (Chicken)

// OPTIONS:489
EN Disassemble in Borland's IDEAL format
ZH Chicken chicken chicken'chicken chicken

// OPTIONS:491
EN HLA (Randall Hyde)
ZH CHI (Chicken chicken)

// OPTIONS:492
EN Disassemble in High Level Assembly format
ZH Chicken chicken chicken chicken chicken

// OPTIONS:494
EN Linux (AT&&T) - only disassembly!
ZH Chicken (CH&&C) - chicken chicken!

// OPTIONS:495
EN Disassemble in AT&T format, unsupported by Assembler!
ZH Chicken chicken&Chicken, chicken chicken chicken!

// OPTIONS:497
EN Disassemble in lowercase
ZH Chicken chicken chicken

// OPTIONS:498
EN Display mnemonics, registers and keywords in lowercase
ZH Chicken chicken, chicken chicken chicken chicken chicken

// OPTIONS:500
EN Tab between mnemonics and arguments
ZH Chicken chicken chicken chicken chicken

// OPTIONS:501
EN Start operands from the 9th character position
ZH Chicken chicken chicken 9chicken chicken chicken

// OPTIONS:503
EN Extra space between arguments
ZH Chicken chicken chicken chicken

// OPTIONS:504
EN Insert additional space character between arguments
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:506
EN Show default segments
ZH Chicken chicken chicken

// OPTIONS:507
EN Show implicit segment registers in memory addresses
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:509
EN Always show size of memory operands
ZH Chicken chicken chicken chicken chicken

// OPTIONS:510
EN Show size of memory operand even if it is unambiguous
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:512
EN Show NEAR jump modifiers
ZH Chicken chicken chicken

// OPTIONS:513
EN Mark indirect intrasegment jumps as NEAR
ZH Chicken chicken chicken chicken chicken

// OPTIONS:515
EN Show local module name
ZH Chicken chicken chicken

// OPTIONS:516
EN Precede local addresses with the name of the module
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:518
EN Show symbolic addresses
ZH Chicken chicken chicken

// OPTIONS:519
EN Show known symbolic addresses instead of constants
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:521
EN Demangle symbolic names
ZH Chicken chicken chicken

// OPTIONS:522
EN Convert encoded C++ names into the readable form
ZH Chicken chicken++ chicken chicken chicken chicken

// OPTIONS:525
EN Apply selected options
ZH Chicken chicken chicken

// OPTIONS:528
EN Undo modifications
ZH Chicken chicken

// OPTIONS:530
EN Options
ZH Chicken

// OPTIONS:534
EN Mnemonics
ZH Chicken

// OPTIONS:543
EN Guess alternative forms of conditional commands
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:544
EN Like JZ, JC instead of JE, JAE. Analysis necessary!
ZH Chicken, Chicken chicken, CHI. Chicken chicken!

// OPTIONS:546
EN Form of string commands:
ZH Chicken chicken chicken:

// OPTIONS:549
EN Long (MOVS [DWORD EDI],[DWORD ESI]...)
ZH Chic (CHIC [CHICKEN],[CHICKEN]...)

// OPTIONS:550
EN State assumed string operands explicitly
ZH Chicken chicken chicken chicken chicken

// OPTIONS:552
EN Short (MOVSB...)
ZH Chicken (CHICKEN...)

// OPTIONS:553
EN Do not specify assumed string operands
ZH Chicken chicken chicken chicken chicken

// OPTIONS:555
EN Decode near returns as:
ZH Chicken chicken chicken:

// OPTIONS:559
EN Emphasize that return is near
ZH Chicken chicken chicken chicken

// OPTIONS:562
EN Almost all returns are near in flat mode applications
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:564
EN Decode size-sensitive 16/32-bit mnemonics like:
ZH Chicken chicken-chicken 16/32-chicken chicken:

// OPTIONS:568
EN No suffix for 16-bit, suffix D for 32-bit mnemonics
ZH Chicken chicken 16-chi, chicken chicken 32-chicken chicken

// OPTIONS:571
EN Suffix W for 16-bit, suffix D for 32-bit mnemonics
ZH Chicken chicken 16-chi, chicken chicken 32-chicken chicken

// OPTIONS:574
EN Suffix W for 16-bit, no suffix for 32-bit mnemonics
ZH Chicken chicken 16-chi, chicken chicken 32-chicken chicken

// OPTIONS:576
EN Decode jump hints as:
ZH Chicken chicken chicken:

// OPTIONS:580
EN Plus if jump is mainly taken, minus if not
ZH Chicken chicken chicken chicken, chicken chicken

// OPTIONS:583
EN Prefixes 'Branch Hint Taken', 'Branch Hint Not Taken'
ZH Chicken 'Chicken chicken', 'Chicken chicken chicken'

// OPTIONS:595
EN Operands
ZH Chicken

// OPTIONS:604
EN Decode top of FPU stack as:
ZH Chicken chicken chicken:

// OPTIONS:608
EN Decode top of FPU stack as ST(0) (full form)
ZH Chicken chicken chicken chicken(0) (chicken)

// OPTIONS:611
EN Decode top of FPU stack as ST (simplified form)
ZH Chicken chicken chicken chicken (chicken chicken)

// OPTIONS:613
EN Decode size of 16/32-byte SSE operands as:
ZH Chicken chicken 16/32-chicken chicken chicken:

// OPTIONS:616
EN DQWORD/QQWORD (Double/Quad Quadword)
ZH CHICKEN/CHICKEN (Chicken/Chicken chicken)

// OPTIONS:617
EN Decode SSE memory operands like [DQWORD EDX]
ZH Chicken chicken chicken chicken [CHICKEN]

// OPTIONS:619
EN XMMWORD/YMMWORD (as XMM/YMM registers)
ZH CHICKEN/CHICKEN (chicken/Chicken chicken)

// OPTIONS:620
EN Decode SSE memory operands like [XMMWORD EDX]
ZH Chicken chicken chicken chicken [CHICKEN CHICKEN]

// OPTIONS:641
EN Underline fixups
ZH Chicken chicken

// OPTIONS:642
EN Underline fixups in dump columns or windows
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:644
EN Use wide characters in UNICODE && multibyte dumps
ZH Chicken chicken chicken chicken && chicken chicken

// OPTIONS:645
EN So that Kanji symbols are not clipped
ZH Chicken chicken chicken chicken chicken

// OPTIONS:647
EN Disable GDI scripting support
ZH Chicken chicken chicken chicken

// OPTIONS:649
EN Gets rid of dump artefacts, but some UNICODE characters may be replaced by spaceholders
ZH Chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:651
EN Replace non-printable ASCII characters with dots
ZH Chicken chicken-chicken chicken chicken chicken chicken

// OPTIONS:652
EN Do not display non-printable ASCII characters in dump
ZH Chicken chicken-chicken chicken chicken chicken

// OPTIONS:654
EN Display addresses in address column as:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:657
EN Hex, Symbol
ZH Chi, Chicken

// OPTIONS:658
EN Hex address, followed by symbolic name, if available
ZH Chicken chicken, chicken chicken chicken, chicken chicken

// OPTIONS:660
EN Symbol, Hex
ZH Chicken, Chi

// OPTIONS:661
EN If symbolic name is available, put it first
ZH Chicken chicken chicken chicken, chicken chicken

// OPTIONS:663
EN Symbol or Hex
ZH Chicken chicken

// OPTIONS:665
EN If symbolic name is available, show name, otherwise hexadecimal address
ZH Chicken chicken chicken chicken, chicken, chicken chicken chicken chicken

// OPTIONS:667
EN Highlight symbolic names in address column
ZH Chicken chicken chicken chicken chicken

// OPTIONS:670
EN Doubleclick on address:
ZH Chicken chicken chicken:

// OPTIONS:673
EN Sets relative addressing
ZH Chicken chicken chicken

// OPTIONS:674
EN Doubleclick on address to toggle relative addressing
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:676
EN Labels address
ZH Chicken chicken

// OPTIONS:677
EN Doubleclick on address to place user-defined label
ZH Chicken chicken chicken chicken chicken-chicken chicken

// OPTIONS:679
EN ASCII code page
ZH Chicken chicken

// OPTIONS:683
EN Code page used in ASCII dumps and data input dialogs
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:685
EN Multibyte code page
ZH Chicken chicken chicken

// OPTIONS:690
EN Code page used in multibyte character dumps and data input dialogs
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:702
EN Strings
ZH Chicken

// OPTIONS:711
EN Decode Pascal-style string constants
ZH Chicken chicken-chicken chicken chicken

// OPTIONS:712
EN Pascal strings are preceded with the character count
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:714
EN Allow diacritical symbols (à,ñ,ø...)
ZH Chicken chicken chicken (à,ñ,ø...)

// OPTIONS:715
EN Increases number of improperly recognized strings
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:717
EN To recognize UNICODE strings:
ZH Chicken chicken chicken chicken:

// OPTIONS:720
EN Use internal heuristics (ASCII subset)
ZH Chicken chicken chicken (Chicken chicken)

// OPTIONS:721
EN Search is limited to extended ASCII subset only
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:723
EN Use IsTextUnicode()
ZH Chicken chicken()

// OPTIONS:725
EN Let Windows determine if valid UNICODE string. ATTENTION, danger of misinterpretations!
ZH Chicken chicken chicken chicken chicken chicken. CHICKEN, chicken chicken chicken chicken!

// OPTIONS:727
EN Mode of string decoding:
ZH Chicken chicken chicken:

// OPTIONS:730
EN Plain ("abcdef")
ZH Chicken ("chichi")

// OPTIONS:731
EN Display text strings without conversion
ZH Chicken chicken chicken chicken chicken

// OPTIONS:733
EN Assembler ("abc",LF,"def")
ZH Chicken ("chi",CH,"chi")

// OPTIONS:734
EN Convert strings to more or less MASM-compatible form
ZH Chicken chicken chicken chicken chicken-chicken chicken

// OPTIONS:736
EN C ("abc\\ndef")
ZH C ("chi\\chic")

// OPTIONS:737
EN Convert recognized strings to C-compatible form
ZH Chicken chicken chicken chicken-chicken chicken

// OPTIONS:749
EN Debugging
ZH Chicken

// OPTIONS:752
EN Debugging options
ZH Chicken chicken

// OPTIONS:758
EN Assume flat selectors
ZH Chicken chicken chicken

// OPTIONS:759
EN Assume that CS, DS, SS and ES always have zero offset
ZH Chicken chicken, CH, Chicken chicken chicken chicken

// OPTIONS:761
EN After Execute till return, step over RET
ZH Chicken chicken chicken, chicken chicken

// OPTIONS:762
EN When return is reached, execute it
ZH Chicken chicken chicken, chicken

// OPTIONS:764
EN Allow fast command emulation
ZH Chicken chicken chicken chicken

// OPTIONS:765
EN Emulate execution of commands in OllyDbg
ZH Chicken chicken chicken chicken chicken

// OPTIONS:767
EN Auto backup user code
ZH Chicken chicken chicken

// OPTIONS:768
EN Create backups of non-system code sections
ZH Chicken chicken chicken-chicken chicken chicken

// OPTIONS:770
EN Use HW breakpoints for stepping
ZH Chicken chicken chicken chicken

// OPTIONS:771
EN Use less invasive hardware breakpoints instead of INT3
ZH Chicken chicken chicken chicken chicken chicken chicken3

// OPTIONS:773
EN Hide unimportant handles
ZH Chicken chicken chicken

// OPTIONS:775
EN Don't list unimportant standard handles in the Handles window
ZH Chi'chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:777
EN Set permanent breakpoints on system calls
ZH Chicken chicken chicken chicken chicken

// OPTIONS:779
EN Set INT3 on ZwContinue(), UnhandledExceptionFilter(), KiUserExceptionDispatcher() etc.
ZH Chicken3 chicken chicken(), Chicken chicken chicken(), Chicken chicken chicken() chi.

// OPTIONS:781
EN To pause running application:
ZH Chicken chicken chicken chicken:

// OPTIONS:784
EN Set breakpoint in every thread
ZH Chicken chicken chicken chicken

// OPTIONS:785
EN Set memory traps or single-step breaks in every thread
ZH Chicken chicken chicken-chicken chicken chicken chicken

// OPTIONS:787
EN Call DebugBreakProcess()
ZH Chicken chicken chicken()

// OPTIONS:788
EN Use this special system call (if supported by OS)
ZH Chicken chicken chicken chicken (chicken chicken)

// OPTIONS:790
EN When terminating the running application:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:793
EN Immediately call TerminateProcess()
ZH Chicken chicken chicken chicken()

// OPTIONS:794
EN Works fast, but open files may get corrupted
ZH Chicken, chicken chicken chicken chicken

// OPTIONS:796
EN Try to use ExitProcess() first
ZH Chicken chicken chicken() chicken

// OPTIONS:797
EN Tricky, but a bit safer
ZH Chicken, chicken chicken

// OPTIONS:799
EN Command used as a soft breakpoint (experimental):
ZH Chicken chicken chicken chicken (chicken chicken):

// OPTIONS:804
EN Select command used as a soft breakpoint. Use INT3 if in doubt!
ZH Chicken chicken chicken chicken chicken. Chicken3 chicken chicken!

// OPTIONS:816
EN Debugging data
ZH Chicken chicken

// OPTIONS:825
EN Use debugging data
ZH Chicken chicken

// OPTIONS:826
EN Allow DBGHELP.DLL
ZH Chicken chicken.CHI

// OPTIONS:828
EN Use dbghelp.dll for stack walk
ZH Chicken chicken.chicken chicken

// OPTIONS:829
EN Use DBGHELP.StackWalk64() to walk CPU stack
ZH Chicken chicken.Chicken64() chicken chicken

// OPTIONS:831
EN Directories containing debugging data (.pdb,.dbg...).
ZH Chicken chicken chicken chicken chicken (.chi,.chi...).

// OPTIONS:834
EN Dbghelp.dll will also recurse into subdirectories:
ZH Chicken.chicken chicken chicken chicken chicken:

// OPTIONS:838
EN Directory containing debugging data (.pdb,.dbg...)
ZH Chicken chicken chicken chicken chicken (.chi,.chi...)

// OPTIONS:841
EN Select directory where debugging data is kept
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:855
EN Allow access to Microsoft Symbol Server
ZH Chicken chicken chicken chicken chicken

// OPTIONS:857
EN Download debugging data for system DLLs from Internet (http://msdl.microsoft.com/download/symbols)
ZH Chicken chicken chicken chicken chicken chicken chicken (chic://chic.chicken.chi/chicken/chicken)

// OPTIONS:859
EN Don't list missing source files
ZH Chi'chicken chicken chicken chicken

// OPTIONS:860
EN For example, those used to build system libraries
ZH Chicken chicken, chicken chicken chicken chicken chicken

// OPTIONS:862
EN Don't list internal compiler labels
ZH Chi'chicken chicken chicken chicken

// OPTIONS:863
EN Constant strings, floating constants, imports etc.
ZH Chicken chicken, chicken chicken, chicken chicken.

// OPTIONS:865
EN Skip leading spaces from source lines in comments
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:866
EN Only affects Disassembler comments
ZH Chicken chicken chicken chicken

// OPTIONS:870
EN WARNING: Microsoft Symbol Server sends and receives data over the Internet!\nModifications made on this page will take full effect only after restart.
ZH CHICKEN: Chicken chicken chicken chicken chicken chicken chicken chicken!\nChicken chicken chicken chicken chicken chicken chicken chicken chicken.

// OPTIONS:882
EN Start
ZH Chicken

// OPTIONS:891
EN When starting application, make first pause at:
ZH Chicken chicken chicken, chicken chicken chicken:

// OPTIONS:895
EN Make first pause when OS executes DbgBreakPoint()
ZH Chicken chicken chicken chicken chicken chicken()

// OPTIONS:897
EN TLS callback (if defined)
ZH Chicken chicken (chicken)

// OPTIONS:899
EN Make first pause at TLS callback, or at entry point of main module if callbacks are absent
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:902
EN Make first pause at entry point of main module
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:904
EN WinMain (if location is known)
ZH Chicken (chicken chicken chicken)

// OPTIONS:906
EN Make first pause at WinMain, or at entry point of main module if WinMain is unknown
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:908
EN No pause
ZH Chicken

// OPTIONS:909
EN Make no pause, immediately run application
ZH Chicken chicken, chicken chicken chicken chicken

// OPTIONS:911
EN When attaching to application, make first pause at:
ZH Chicken chicken chicken chicken, chicken chicken chicken:

// OPTIONS:916
EN When attaching, pause application on system breakpoint in the temporary thread
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:918
EN Application code
ZH Chicken chicken

// OPTIONS:919
EN When attaching, pause on application code
ZH Chicken chicken, chicken chicken chicken

// OPTIONS:922
EN When attaching, run application without pause
ZH Chicken chicken, chicken chicken chicken chicken

// OPTIONS:924
EN When loading DLL, make first pause at:
ZH Chicken chicken, chicken chicken chicken:

// OPTIONS:929
EN When loading DLL, pause application on the entry point of DLL loader
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken

// OPTIONS:931
EN DLL entry point (if defined)
ZH Chicken chicken (chicken)

// OPTIONS:933
EN When loading DLL, pause application on the DLL entry point (also known as DllMain() or DllEntryPoint())
ZH Chicken chicken, chicken chicken chicken chicken chicken (chicken chicken chicken() chicken chicken())

// OPTIONS:935
EN After call to LoadLibrary()
ZH Chicken chicken chicken()

// OPTIONS:937
EN When loading DLL, pause after return from call to LoadLibrary() in LOADDLL.EXE
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken() chicken.CHI

// OPTIONS:940
EN When loading DLL, run LOADDLL.EXE without pause
ZH Chicken chicken, chicken chicken.Chicken chicken

// OPTIONS:952
EN Events
ZH Chicken

// OPTIONS:955
EN Debugging events
ZH Chicken chicken

// OPTIONS:961
EN Warn on frequent events
ZH Chicken chicken chicken

// OPTIONS:962
EN Flash warning if debugging events are frequent
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:964
EN Pause on new module (DLL)
ZH Chicken chicken chicken (CHI)

// OPTIONS:966
EN When new DLL loads, pause on entry point (if available)
ZH Chicken chicken, chicken chicken chicken (chicken chicken)

// OPTIONS:968
EN Pause on module (DLL) unloading
ZH Chicken chicken (CHI) chicken

// OPTIONS:969
EN Pause when DLL is removed from the memory
ZH Chicken chicken chicken chicken chicken

// OPTIONS:971
EN Only on the following modules:
ZH Chicken chicken chicken chicken:

// OPTIONS:972
EN Pause only on listed new/unloading modules
ZH Chicken chicken chicken/chicken chicken

// OPTIONS:975
EN Full path, file.ext, file or internal module name
ZH Chicken, chic.chi, chicken chicken chicken chicken

// OPTIONS:977
EN Add
ZH Chi

// OPTIONS:978
EN Add module to the list
ZH Chicken chicken chicken

// OPTIONS:980
EN Remove
ZH Chicken

// OPTIONS:981
EN Remove selected module from the list
ZH Chicken chicken chicken chicken chicken

// OPTIONS:983
EN Pause on new thread
ZH Chicken chicken chicken

// OPTIONS:984
EN When new thread starts, pause on its entry point
ZH Chicken chicken chicken, chicken chicken chicken

// OPTIONS:986
EN Pause on thread end
ZH Chicken chicken chicken

// OPTIONS:987
EN Pause when thread terminates
ZH Chicken chicken chicken chicken

// OPTIONS:989
EN Pause on debug string
ZH Chicken chicken chicken

// OPTIONS:990
EN Pause when application emits debug string
ZH Chicken chicken chicken chicken chicken

// OPTIONS:992
EN Debug child processes
ZH Chicken chicken chicken

// OPTIONS:994
EN Start new OllyDbg instance for processes spawned by Debuggee
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:998
EN WARNING: debugging of child processes is possible only when Debuggee was created by OllyDbg and only if option 'Debug child processes' was active.
ZH CHICKEN: chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken 'Chicken chicken chicken' chicken.

// OPTIONS:1010
EN Exceptions
ZH Chicken

// OPTIONS:1013
EN Ignored exceptions
ZH Chicken chicken

// OPTIONS:1019
EN Ignore memory access violations in KERNEL32
ZH Chicken chicken chicken chicken chicken32

// OPTIONS:1020
EN May occur in KERNEL32.IsBadReadPtr() and similar APIs
ZH Chicken chicken chicken32.Chicken chicken() chicken chicken

// OPTIONS:1022
EN Step over INT3 breaks in MSCORWKS
ZH Chicken chicken3 chicken chicken

// OPTIONS:1023
EN In this way .NET engine alerts Debugger to events
ZH Chicken chicken .Chicken chicken chicken chicken chicken

// OPTIONS:1025
EN Ignore (pass to debugged program) following exceptions:
ZH Chicken (chicken chicken chicken) chicken chicken chicken:

// OPTIONS:1028
EN INT3 breaks
ZH CHI3 chicken

// OPTIONS:1029
EN Let program process breaks on INT3 set by program
ZH Chicken chicken chicken chicken3 chicken chicken

// OPTIONS:1031
EN Single-step breaks
ZH Chicken-chicken chicken

// OPTIONS:1032
EN Let program process breaks on TRAP bit set by program
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1034
EN Memory access violations
ZH Chicken chicken chicken

// OPTIONS:1035
EN Let program process breaks on invalid memory access
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1037
EN Integer division by 0
ZH Chicken chicken chicken 0

// OPTIONS:1038
EN Let program process breaks on integer division by zero
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1040
EN Invalid or privileged instructions
ZH Chicken chicken chicken chicken

// OPTIONS:1041
EN Let program process breaks on invalid instruction
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1043
EN All FPU exceptions
ZH Chicken chicken

// OPTIONS:1044
EN Let program process breaks on all FPU exceptions
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1046
EN All service exceptions
ZH Chicken chicken chicken

// OPTIONS:1047
EN Process exceptions (mis)used by OS
ZH Chicken chicken (chi)chicken

// OPTIONS:1049
EN Ignore also the following custom exceptions or ranges:
ZH Chicken chicken chicken chicken chicken chicken chicken:

// OPTIONS:1050
EN Activate list of custom exceptions
ZH Chicken chicken chicken chicken

// OPTIONS:1053
EN List of custom exceptions to be passed to debuggee
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1055
EN Add current
ZH Chicken chicken

// OPTIONS:1056
EN Add exception that paused the debugged application
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1059
EN Add range of exceptions
ZH Chicken chicken chicken

// OPTIONS:1062
EN Remove selected exception or range from the list
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1065
EN Pass unprocessed exceptions to Unhandled Exception Filter
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1066
EN Note: program may terminate if custom filter is not installed!
ZH Chic: chicken chicken chicken chicken chicken chicken chicken!

// OPTIONS:1068
EN Report ignored exceptions to log
ZH Chicken chicken chicken chicken

// OPTIONS:1069
EN Report ignored (passed to debuggee) exceptions to log
ZH Chicken chicken (chicken chicken) chicken chicken

// OPTIONS:1090
EN Size of run trace buffer
ZH Chicken chicken chicken

// OPTIONS:1093
EN 1 M|2 M|4 M|8 M|16 M|32 M|64 M|128 M|256 M
ZH 1 C|2 C|4 C|8 C|16 C|32 C|64 C|128 C|256 C

// OPTIONS:1094
EN Approximate size of run trace buffer, bytes
ZH Chicken chicken chicken chicken chicken, chicken

// OPTIONS:1098
EN Trace all threads
ZH Chicken chicken

// OPTIONS:1100
EN If multithread application, switch between threads every 50 ms when tracing
ZH Chicken chicken chicken, chicken chicken chicken chicken 50 chicken chicken

// OPTIONS:1104
EN When tracing or animating into:
ZH Chicken chicken chicken chicken:

// OPTIONS:1107
EN Don't enter system DLLs
ZH Chi'chicken chicken chicken

// OPTIONS:1108
EN In automatic mode, always trace over API calls
ZH Chicken chicken, chicken chicken chicken chicken

// OPTIONS:1110
EN Always trace over string commands
ZH Chicken chicken chicken chicken

// OPTIONS:1111
EN In automatic mode, execute string commands at once
ZH Chicken chicken, chicken chicken chicken chicken

// OPTIONS:1113
EN Remember commands
ZH Chicken chicken

// OPTIONS:1114
EN Facilitates debugging of self-modifiable code
ZH Chicken chicken chicken chicken-chicken chicken

// OPTIONS:1116
EN Remember memory
ZH Chicken chicken

// OPTIONS:1117
EN Save accessed memory to run trace
ZH Chicken chicken chicken chicken

// OPTIONS:1119
EN Remember FPU registers
ZH Chicken chicken chicken

// OPTIONS:1120
EN Save FPU registers to run trace
ZH Chicken chicken chicken chicken

// OPTIONS:1122
EN Synchronize CPU and run trace
ZH Chicken chicken chicken chicken

// OPTIONS:1123
EN Synchronize CPU display and run trace selection
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1125
EN Animation delay
ZH Chicken chicken

// OPTIONS:1128
EN 0 ms|20 ms|50 ms|100 ms|200 ms|500 ms|1000 ms
ZH 0 ch|20 ch|50 ch|100 ch|200 ch|500 ch|1000 ch

// OPTIONS:1130
EN Duration of step in 'Animate into' and 'Animate over' modi
ZH Chicken chicken chicken 'Chicken chicken' chi 'Chicken chicken' chic

// OPTIONS:1133
EN WARNING: some run trace options will take effect only after clearing the trace buffer.
ZH CHICKEN: chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// OPTIONS:1154
EN When starting hit test:
ZH Chicken chicken chicken:

// OPTIONS:1157
EN Set breakpoints on known callbacks
ZH Chicken chicken chicken chicken

// OPTIONS:1158
EN According to the system DLL entering mode
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1160
EN When indirect or table-based jump or call is hit:
ZH Chicken chicken chicken-chicken chicken chicken:

// OPTIONS:1163
EN Check destination each time
ZH Chicken chicken chicken chicken

// OPTIONS:1164
EN Keep trace breakpoint set (slow but reliable method)
ZH Chicken chicken chicken (chicken chicken chicken)

// OPTIONS:1166
EN Use analysis data to guess destinations
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1168
EN Use destinations found by Analyzer (fast but may be unreliable)
ZH Chicken chicken chicken chicken (chicken chicken chicken)

// OPTIONS:1170
EN When next destination is analysed as data:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:1173
EN Continue hit trace
ZH Chicken chicken

// OPTIONS:1174
EN Ignore analysis and continue hit trace in standard way
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1176
EN Pause hit trace
ZH Chicken chicken

// OPTIONS:1177
EN Pause hit trace if next destination is data
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1179
EN When next destination is outside the code section:
ZH Chicken chicken chicken chicken chicken chicken:

// OPTIONS:1183
EN Continue hit trace outside the code in a standard way
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1186
EN Pause hit trace if command is outside the code section
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1188
EN Trace code command by command
ZH Chicken chicken chicken chicken

// OPTIONS:1189
EN Run trace commands outside the code section
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1191
EN Keep hit trace between sessions
ZH Chicken chicken chicken chicken

// OPTIONS:1192
EN Dangerous if code is self-modifiable
ZH Chicken chicken chicken-chicken

// OPTIONS:1195
EN WARNING: keeping hit trace between sessions may lead to crash if debugged application is self-modifiable.
ZH CHICKEN: chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken-chicken.

// OPTIONS:1208
EN SFX
ZH CHI

// OPTIONS:1211
EN Self-extractable modules
ZH Chic-chicken chicken chicken

// OPTIONS:1217
EN Unpack SFX modules automatically
ZH Chicken chicken chicken chicken

// OPTIONS:1218
EN When module is recognized as SFX, unpack it automatically
ZH Chicken chicken chicken chicken, chicken chicken chicken

// OPTIONS:1220
EN Use hit trace (fast!)
ZH Chicken chicken (chic!)

// OPTIONS:1221
EN Much faster but can be easily fooled
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1223
EN Use run trace (reliable)
ZH Chicken chicken (chicken)

// OPTIONS:1224
EN Slow but more reliable than hit trace
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1226
EN Use real entry from previous run
ZH Chicken chicken chicken chicken

// OPTIONS:1227
EN Accelerate SFX extraction if real entry point is already known
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1229
EN Pass exceptions to SFX extractor
ZH Chicken chicken chicken chicken

// OPTIONS:1230
EN Ignore (pass to extractor) all exceptions during extraction
ZH Chicken (chicken chicken) chicken chicken chicken chicken

// OPTIONS:1242
EN Just-in-time
ZH Chic-ch-chic

// OPTIONS:1245
EN Just-in-time debugging
ZH Chic-ch-chicken chicken

// OPTIONS:1251
EN Current just-in-time debugger:
ZH Chicken chicken-ch-chicken chicken:

// OPTIONS:1255
EN Name of current just-in-time debugger
ZH Chicken chicken chicken-ch-chicken chicken

// OPTIONS:1257
EN Set OllyDbg
ZH Chicken chicken

// OPTIONS:1258
EN Press to set OllyDbg as active just-in-time debugger
ZH Chicken chicken chicken chicken chicken-ch-chicken chicken

// OPTIONS:1260
EN Previous just-in-time debugger:
ZH Chicken chicken-ch-chicken chicken:

// OPTIONS:1264
EN Name of previous just-in-time debugger
ZH Chicken chicken chicken-ch-chicken chicken

// OPTIONS:1266
EN Restore
ZH Chicken

// OPTIONS:1267
EN Press to restore previous just-in-time debugger
ZH Chicken chicken chicken chicken-ch-chicken chicken

// OPTIONS:1269
EN Confirm before attaching
ZH Chicken chicken chicken

// OPTIONS:1270
EN Whether OS should ask before calling JIT debugger
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1285
EN Analysis options
ZH Chicken chicken

// OPTIONS:1291
EN Recognition of procedures:
ZH Chicken chicken chicken:

// OPTIONS:1294
EN Strict
ZH Chicken

// OPTIONS:1295
EN Allow only sure procedures to be recognized as such
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1297
EN Fuzzy
ZH Chicken

// OPTIONS:1298
EN Recognize any linked piece of code as procedure
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1300
EN Automatical module analysis:
ZH Chicken chicken chicken chicken:

// OPTIONS:1303
EN Off
ZH Chi

// OPTIONS:1304
EN No automatical analysis
ZH Chicken chicken chicken

// OPTIONS:1306
EN Main module
ZH Chicken chicken

// OPTIONS:1307
EN Only main module is analysed automatically
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1309
EN Non-system modules
ZH Chi-chicken chicken

// OPTIONS:1311
EN All modules outside the system directory will be analysed
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1313
EN All modules
ZH Chicken chicken

// OPTIONS:1314
EN Analyse all modules as they are loaded
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1316
EN Show predicted register values
ZH Chicken chicken chicken chicken

// OPTIONS:1317
EN Show contents of registers predicted by Analyser
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1319
EN Don't predict register contents for system DLLs
ZH Chi'chicken chicken chicken chicken chicken chicken

// OPTIONS:1321
EN Spares memory, but no ARGs, LOCALs and unreliable stack walk
ZH Chicken chicken, chicken chicken, Chicken chicken chicken chicken

// OPTIONS:1323
EN Show recognized ARGs and LOCALs in disassembly
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1325
EN Display arguments and local variables in disassembled code
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1327
EN Show recognized ARGs and LOCALs in comments
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1328
EN Display arguments and local variables in comments
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1330
EN Use symbolic names for ARGs, if known
ZH Chicken chicken chicken chicken, chicken

// OPTIONS:1331
EN Like ARG.hCurrInstance instead of ARG.1 in WinMain
ZH Chicken.chicken chicken chicken chicken.1 chicken

// OPTIONS:1343
EN Advanced
ZH Chicken

// OPTIONS:1346
EN Advanced analysis
ZH Chicken chicken

// OPTIONS:1352
EN Decode tricky code sequences
ZH Chicken chicken chicken chicken

// OPTIONS:1353
EN Decode tricky (mostly hand-written) code sequences
ZH Chicken chicken (chicken chicken-chicken) chicken chicken

// OPTIONS:1355
EN Decode cascaded IFs as switches
ZH Chicken chicken chicken chicken

// OPTIONS:1357
EN Treat 'IF i==1 ... ELSEIF i==2 ... ELSE ...' as a switch
ZH Chicken 'Chic==1 ... Chicken==2 ... CHIC ...' chicken chicken

// OPTIONS:1359
EN Allow arguments renaming for known functions
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1361
EN Rename arguments which meaning depends on other argument
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1363
EN Guess number of arguments of unknown functions
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1364
EN Guess number of argument directly from machine code
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1366
EN Extract arguments from mangled names
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1368
EN Use information hidden in mangled names to guess arguments
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1370
EN Guess meaning of unknown arguments
ZH Chicken chicken chicken chicken

// OPTIONS:1372
EN Try to recognize format strings, windows functions etc.
ZH Chicken chicken chicken chicken, chicken chicken chicken.

// OPTIONS:1374
EN Show arguments even if their number varies
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1376
EN I.e. number of recognized arguments in different calls is different
ZH C.c. chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1378
EN Detect standard library functions (*.udl)
ZH Chicken chicken chicken chicken (*.chi)

// OPTIONS:1380
EN Prepare .udl files via main menu, Debug -> Create function library
ZH Chicken .chicken chicken chicken, Chicken -> Chicken chicken chicken

// OPTIONS:1382
EN Comment constant operands of known functions:
ZH Chicken chicken chicken chicken chicken chicken:

// OPTIONS:1385
EN All known
ZH Chicken

// OPTIONS:1386
EN Comment all known constant operands
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1388
EN Only those marked as important
ZH Chicken chicken chicken chicken

// OPTIONS:1389
EN Comment only operands marked as important
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1391
EN Unknown functions preserve registers:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:1394
EN None
ZH Chic

// OPTIONS:1395
EN Unknown functions may modify any register
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1397
EN EBP
ZH CHI

// OPTIONS:1398
EN Unknown functions preserve EBP (frame pointer)
ZH Chicken chicken chicken chicken (chicken chicken)

// OPTIONS:1400
EN EBX, EBP, ESI and EDI
ZH CHI, CHI, Chicken chicken

// OPTIONS:1401
EN Unknown functions follow stdcall convention
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1403
EN Ignore braces in .udd path
ZH Chicken chicken .chicken

// OPTIONS:1405
EN Ignore parts of path enclosed into braces when opening .udd file
ZH Chicken chicken chicken chicken chicken chicken chicken .chicken

// OPTIONS:1417
EN Invalid commands
ZH Chicken chicken

// OPTIONS:1426
EN Accept following potentially invalid commands:
ZH Chicken chicken chicken chicken chicken chicken:

// OPTIONS:1429
EN Far calls and returns
ZH Chicken chicken chicken

// OPTIONS:1431
EN Far calls and returns are unnecessary in flat Win32 model
ZH Chicken chicken chicken chicken chicken chicken32 chicken

// OPTIONS:1433
EN Modifications of segment registers
ZH Chicken chicken chicken chicken

// OPTIONS:1434
EN Segment registers are fixed in flat Win32 model
ZH Chicken chicken chicken chicken chicken32 chicken

// OPTIONS:1436
EN Privileged commands
ZH Chicken chicken chicken

// OPTIONS:1437
EN Privileged commands are not allowed in user mode
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1439
EN I/O commands
ZH C/Chicken

// OPTIONS:1440
EN Direct access to hardware under Windows is deprecated
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1442
EN Commands equivalent to NOP
ZH Chicken chicken chicken

// OPTIONS:1443
EN Optimizing compilers do not emit executable NOPs
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1445
EN Shifts out of range 1..31
ZH Chicken chicken chicken 1..31

// OPTIONS:1447
EN Shift count out of the main range is allowed but unusual
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1449
EN Superfluous prefixes
ZH Chicken chicken chicken

// OPTIONS:1450
EN Compilers never emit unnecessary prefixes
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1452
EN LOCK prefixes
ZH Chicken chicken

// OPTIONS:1453
EN LOCK is used mainly in system routines
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1455
EN Default selectors
ZH Chicken chicken

// OPTIONS:1457
EN Explicitly used default selectors slow down the execution
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1459
EN Unaligned stack operations
ZH Chicken chicken chicken

// OPTIONS:1460
EN Win32 programs usually keep stack doubleword-aligned
ZH Chi32 chicken chicken chicken chicken chicken-chicken

// OPTIONS:1462
EN Suspicious ESP modifications
ZH Chicken chicken chicken chicken

// OPTIONS:1463
EN Invalid ESP may lead to crash
ZH Chicken chicken chicken chicken

// OPTIONS:1465
EN Undocumented commands
ZH Chicken chicken chicken

// OPTIONS:1466
EN Sane compilers never use undocumented commands
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1468
EN Access to nonexisting memory
ZH Chicken chicken chicken chicken

// OPTIONS:1469
EN Access to nonexisting memory will throw exception
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1471
EN Interrupt commands
ZH Chicken chicken

// OPTIONS:1472
EN INT commands in user mode are seldom
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1487
EN Search options
ZH Chicken chicken

// OPTIONS:1493
EN Use predictions in search
ZH Chicken chicken chicken

// OPTIONS:1495
EN Use predicted contents of registers in search operations
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1497
EN Include indirect call/jump destinations in references
ZH Chicken chicken chicken/chicken chicken chicken chicken

// OPTIONS:1499
EN For example, call to jump to import will be listed as a reference to the import
ZH Chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1501
EN Add origin to the list of found commands
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1503
EN Add it, even if command doesn't meet the search criterium
ZH Chicken, chicken chicken chicken'chicken chicken chicken chicken

// OPTIONS:1505
EN Preferable language of resource data:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:1510
EN If resource exists in several languages, show this language first
ZH Chicken chicken chicken chicken chicken, chicken chicken chicken

// OPTIONS:1525
EN CPU window options
ZH Chicken chicken

// OPTIONS:1531
EN Gray inactive panes
ZH Chicken chicken chicken

// OPTIONS:1532
EN Gray text in CPU panes without focus
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1534
EN Gray register names
ZH Chicken chicken chicken

// OPTIONS:1535
EN Gray names of registers in the Registers pane
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1537
EN Show direction of jumps
ZH Chicken chicken chicken

// OPTIONS:1538
EN Draw small arrows indicating direction of jump
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1540
EN Show jump path
ZH Chicken chicken

// OPTIONS:1541
EN Draw arrows showing jumps to or from selected location
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1543
EN Show grayed path if jump is not taken
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1545
EN Draw arrow showing jump from selected location in gray if jump is not taken
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1547
EN Enable SSE registers
ZH Chicken chicken chicken

// OPTIONS:1549
EN Use and display SSE registers (if supported by CPU and OS)
ZH Chicken chicken chicken chicken (chicken chicken chicken)

// OPTIONS:1551
EN Decode contents of registers:
ZH Chicken chicken chicken chicken:

// OPTIONS:1554
EN Only for current EIP
ZH Chicken chicken chicken

// OPTIONS:1556
EN Registers are volatile, use them only to decode currently executed command (pointed by EIP)
ZH Chicken chicken chicken, chicken chicken chicken chicken chicken chicken (chicken chicken)

// OPTIONS:1558
EN For EIP and selected command
ZH Chicken chicken chicken chicken

// OPTIONS:1560
EN Although registers are volatile, use them as a hint to decode operands of the selected command
ZH Chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1562
EN For any command
ZH Chicken chicken

// OPTIONS:1564
EN Use current registers to decode all commands, not only pointed by EIP. Note that this may be highly misleading!
ZH Chicken chicken chicken chicken chicken chicken, chicken chicken chicken. Chicken chicken chicken chicken chicken!

// OPTIONS:1566
EN Hide 'current registers' warning
ZH Chic 'chicken chicken' chicken

// OPTIONS:1567
EN I am experienced, don't annoy me
ZH Chicken chicken, chi'chicken

// OPTIONS:1569
EN Automatic FPU/MMX/3DNow! registers:
ZH Chicken chicken/CHI/3Chic! chicken:

// OPTIONS:1573
EN Let user decide how to decode FPU registers
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1575
EN On events
ZH Chicken

// OPTIONS:1577
EN Set mode according to command at EIP when execution pauses
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1581
EN Set mode depending on the command selected in Disassembler
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1593
EN More CPU
ZH Chicken

// OPTIONS:1596
EN More CPU window options
ZH Chicken chicken chicken

// OPTIONS:1602
EN When letter key is pressed in Disassembler:
ZH Chicken chicken chicken chicken chicken:

// OPTIONS:1605
EN Add label
ZH Chicken

// OPTIONS:1606
EN When letter key is pressed, add user-defined label
ZH Chicken chicken chicken, chicken-chicken chicken

// OPTIONS:1608
EN Assemble command
ZH Chicken chicken

// OPTIONS:1609
EN When letter key is pressed, assemble command
ZH Chicken chicken chicken, chicken chicken

// OPTIONS:1611
EN Add comment
ZH Chicken chicken

// OPTIONS:1612
EN When letter key is pressed, add user-defined comment
ZH Chicken chicken chicken, chicken-chicken chicken

// OPTIONS:1614
EN Repeat last action
ZH Chicken chicken

// OPTIONS:1616
EN When letter key is pressed, repeat the most recent action
ZH Chicken chicken chicken, chicken chicken chicken chicken

// OPTIONS:1628
EN Directories
ZH Chicken chicken

// OPTIONS:1637
EN Directory for .udd files:
ZH Chicken chicken .chicken:

// OPTIONS:1641
EN Directory where .udd files are kept
ZH Chicken chicken .chicken chicken

// OPTIONS:1644
EN Select directory where user data files are kept
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1646
EN Directory for standard function libraries (.udl):
ZH Chicken chicken chicken chicken chicken (.chi):

// OPTIONS:1650
EN Directory where .udl files are kept
ZH Chicken chicken .chicken chicken

// OPTIONS:1654
EN Select directory where standard function libraries are kept
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1656
EN Plugin directory:
ZH Chicken chicken:

// OPTIONS:1660
EN Directory where plugins are kept
ZH Chicken chicken chicken chicken

// OPTIONS:1663
EN Select directory where plugins files are kept
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1665
EN Location of API help file (.hlp or .chm):
ZH Chicken chicken chicken (.chicken .chi):

// OPTIONS:1670
EN Location of file with help on Windows API (either in .hlp or .chm format)
ZH Chicken chicken chicken chicken chicken (chicken .chicken .chicken)

// OPTIONS:1673
EN Select file with help on Windows API
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1685
EN Errors and warnings
ZH Chicken chicken chicken

// OPTIONS:1694
EN Warn if not administrator
ZH Chicken chicken chicken

// OPTIONS:1696
EN Some debugging operations require administrator rights
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1698
EN Restore all errors and warnings
ZH Chicken chicken chicken chicken

// OPTIONS:1700
EN Re-enable all messages that were hidden on your request
ZH Ch-chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1702
EN Restore all actions
ZH Chicken chicken chicken

// OPTIONS:1704
EN Re-enable all questions that were hidden on your request
ZH Ch-chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1706
EN WARNING: You can't undo errors, warnings and actions.
ZH CHICKEN: Chicken'chicken chicken, chicken chicken chicken.

// OPTIONS:1719
EN Appearance
ZH Chicken

// OPTIONS:1722
EN Appearance options
ZH Chicken chicken

// OPTIONS:1728
EN Bring OllyDbg to top on pause
ZH Chicken chicken chicken chicken

// OPTIONS:1729
EN When Debuggee pauses, bring OllyDbg window to top
ZH Chicken chicken chicken, chicken chicken chicken chicken

// OPTIONS:1731
EN Keep between sessions:
ZH Chicken chicken chicken:

// OPTIONS:1734
EN Position and appearance of tables
ZH Chicken chicken chicken chicken

// OPTIONS:1735
EN Restore position and appearance of table windows
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1737
EN Width of columns
ZH Chicken chicken

// OPTIONS:1738
EN Restore width of columns in table windows
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1740
EN Sorting column
ZH Chicken chicken

// OPTIONS:1741
EN Restore sorting column in table windows
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1743
EN Snow-free drawing (slow on very old systems)
ZH Chic-chicken chicken (chicken chicken chicken)

// OPTIONS:1745
EN Activate if tables are snowy when scrolling or redrawing
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1747
EN Highlight bar in sorted column
ZH Chicken chicken chicken chicken

// OPTIONS:1748
EN Highlight bar button in column used to sort table data
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1750
EN UNICODE edit font
ZH Chicken chicken

// OPTIONS:1754
EN Font used in UNICODE edit controls
ZH Chicken chicken chicken chicken

// OPTIONS:1756
EN Duration of flash
ZH Chicken chicken

// OPTIONS:1759
EN 0.5 s|0.75 s|1 s|1.25 s|1.5 s|1.75 s|2 s|2.25 s|2.5 s
ZH 0.5 c|0.75 c|1 c|1.25 c|1.5 c|1.75 c|2 c|2.25 c|2.5 c

// OPTIONS:1760
EN Duration of flash in the status bar of main window
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1763
EN Test duration of flash warning
ZH Chicken chicken chicken chicken

// OPTIONS:1765
EN Autoupdate interval
ZH Chicken chicken chicken

// OPTIONS:1768
EN 50 ms|100 ms|200 ms|500 ms|1 s|2 s|5 s|10 s
ZH 50 ch|100 ch|200 ch|500 ch|1 c|2 c|5 c|10 c

// OPTIONS:1769
EN Refresh interval for automatically updated windows
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1771
EN Visible lines
ZH Chicken chicken

// OPTIONS:1774
EN 0|1|2|3|4|5
ZH 0|1|2|3|4|5

// OPTIONS:1775
EN Number of visible lines before and after cursor in Disassembler when scrolling by keyboard
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1787
EN Defaults
ZH Chicken

// OPTIONS:1790
EN Default settings
ZH Chicken chicken

// OPTIONS:1796
EN Default font
ZH Chicken chicken

// OPTIONS:1800
EN Default font for new OllyDbg windows
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1802
EN Default colour scheme
ZH Chicken chicken chicken

// OPTIONS:1806
EN Default colour scheme for new OllyDbg windows
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1808
EN Horizontal scroll by default
ZH Chicken chicken chicken chicken

// OPTIONS:1809
EN Show horizontal scroll in new OllyDbg windows
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1813
EN WARNING: Default settings apply only to the newly created windows, and only if their appearance is not restored from the initialization file.
ZH CHICKEN: Chicken chicken chicken chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// OPTIONS:1825
EN Startup
ZH Chicken

// OPTIONS:1828
EN Startup options
ZH Chicken chicken

// OPTIONS:1834
EN Use system colours
ZH Chicken chicken

// OPTIONS:1835
EN Influences main window, toolbar and table bars
ZH Chicken chicken chicken, chicken chicken chicken

// OPTIONS:1837
EN Layout of main window:
ZH Chicken chicken chicken:

// OPTIONS:1840
EN Non-scrollable MDI
ZH Chi-chicken chicken

// OPTIONS:1841
EN Data windows are placed inside the fixed main window
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1843
EN Scrollable MDI
ZH Chicken chicken

// OPTIONS:1845
EN Data windows are placed inside the scrollable main window
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1847
EN Independent windows
ZH Chicken chicken chicken

// OPTIONS:1848
EN Data windows are placed directly on the desktop
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1850
EN Toolbar:
ZH Chicken:

// OPTIONS:1854
EN Do not show toolbar at all
ZH Chicken chicken chicken

// OPTIONS:1856
EN Horizontal
ZH Chicken

// OPTIONS:1857
EN Show toolbar on the top of the main window
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1859
EN Vertical
ZH Chicken

// OPTIONS:1860
EN Show toolbar on the left side of the main window
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1862
EN Display run status of the application in the:
ZH Chicken chicken chicken chicken chicken chicken:

// OPTIONS:1865
EN Info bar
ZH Chicken

// OPTIONS:1866
EN Display status in the status bar (bottom right corner)
ZH Chicken chicken chicken chicken (chicken chicken chicken)

// OPTIONS:1868
EN Horizontal toolbar
ZH Chicken chicken

// OPTIONS:1869
EN Display status in the toolbar (top left corner)
ZH Chicken chicken chicken chicken (chicken chicken)

// OPTIONS:1871
EN Size of log buffer
ZH Chicken chicken

// OPTIONS:1874
EN 64 k|128 k|256 k|512 k|1 M|2 M|4 M|8 M|16 M
ZH 64 c|128 c|256 c|512 c|1 C|2 C|4 C|8 C|16 C

// OPTIONS:1875
EN Size of message buffer in the Log window
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1877
EN Scan registry for GUIDs
ZH Chicken chicken chicken

// OPTIONS:1879
EN Adds registered GUIDs to the list of known GUIDs. If activated, makes startup significantly slower!
ZH Chicken chicken chicken chicken chicken chicken. Chicken chicken, chicken chicken chicken chicken!

// OPTIONS:1882
EN WARNING: modifications made on this page will take effect only after restart.
ZH CHICKEN: chicken chicken chicken chicken chicken chicken chicken chicken chicken.

// OPTIONS:1894
EN Fonts
ZH Chicken

// OPTIONS:1903
EN Font:
ZH Chic:

// OPTIONS:1907
EN Font selected for edit
ZH Chicken chicken chicken

// OPTIONS:1909
EN Rename
ZH Chicken

// OPTIONS:1910
EN Press to rename actually selected font
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1912
EN Change
ZH Chicken

// OPTIONS:1913
EN Press to edit font properties
ZH Chicken chicken chicken chicken

// OPTIONS:1916
EN Information about currently selected font
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1918
EN Height adjust: top
ZH Chicken chicken: chi

// OPTIONS:1922
EN -5 pixels|-4 pixels|-3 pixels|-2 pixels|-1 pixel|None|+1 pixel|+2 pixels|+3 pixels|+4 pixels|+5 pixels
ZH -5 chicken|-4 chicken|-3 chicken|-2 chicken|-1 chicken|Chic|+1 chicken|+2 chicken|+3 chicken|+4 chicken|+5 chicken

// OPTIONS:1924
EN Adjusts space on the top of the lines in the table
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1926
EN , bottom
ZH , chicken

// OPTIONS:1932
EN Adjusts space on the bottom of the lines in the table
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:1934
EN Example:
ZH Chicken:

// OPTIONS:1938
EN Sample colouring
ZH Chicken chicken

// OPTIONS:1941
EN Restore default font
ZH Chicken chicken chicken

// OPTIONS:1953
EN Colours
ZH Chicken

// OPTIONS:1962
EN Scheme:
ZH Chicken:

// OPTIONS:1966
EN Colour scheme selected for edit
ZH Chicken chicken chicken chicken

// OPTIONS:1969
EN Press to rename actually selected colour scheme
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:1971
EN Elements of selected scheme:
ZH Chicken chicken chicken chicken:

// OPTIONS:1977
EN Normal text|Highlighted text|Grayed text|Current EIP|Unconditional breakpoint|Conditional breakpoint|Disabled breakpoint|Breakpoint at EIP|Auxiliary elements|Underline & select
ZH Chicken chicken|Chicken chicken|Chicken chicken|Chicken chicken|Chicken chicken chicken|Chicken chicken chicken|Chicken chicken chicken|Chicken chicken|Chicken chicken|Chicken & chicken

// OPTIONS:1978
EN Select element of colour scheme to edit
ZH Chicken chicken chicken chicken chicken

// OPTIONS:1988
EN Left click selects text colour, right - background. To edit custom colour, doubleclick it.
ZH Chicken chicken chicken chicken, chicken - chicken. Chicken chicken chicken, chicken chicken.

// OPTIONS:1991
EN Restore colours default for selected scheme
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2003
EN Code highlighting
ZH Chicken chicken

// OPTIONS:2016
EN Code highlighting scheme selected for edit
ZH Chicken chicken chicken chicken chicken

// OPTIONS:2019
EN Press to rename actually selected highlighting scheme
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:2029
EN Plain commands|Unconditional jumps|Conditional jumps|PUSH/POP commands|Calls|Returns|FPU/MMX/SSE commands|Bad/system/privileged commands|Fillings|Modified commands|General registers|FPU/MMX/SSE registers|Selectors and system registers|Stack memory|Other memory|Constants pointing to memory|Other constants
ZH Chicken chicken|Chicken chicken chicken|Chicken chicken|CHIC/Chicken chicken|Chicken|Chicken|CHI/CHI/Chicken chicken|Chi/chicken/chicken chicken chicken|Chicken|Chicken chicken|Chicken chicken|CHI/CHI/Chicken chicken|Chicken chicken chicken chicken|Chicken chicken|Chicken chicken|Chicken chicken chicken chicken|Chicken chicken

// OPTIONS:2030
EN Select element of highlighting scheme to edit
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2032
EN Highlight operands
ZH Chicken chicken

// OPTIONS:2033
EN Check to allow separate highlighting of operands
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2035
EN Highlight modified
ZH Chicken chicken

// OPTIONS:2036
EN Check to allow highlighting of modified commands
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2041
EN Left click selects text colour, right - background, last custom colour is transparent. To edit custom colour, doubleclick it.
ZH Chicken chicken chicken chicken, chicken - chicken, chicken chicken chicken chicken. Chicken chicken chicken, chicken chicken.

// OPTIONS:2045
EN Restore default colours for selected highlighting scheme
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:2057
EN Text-to-speech
ZH Chic-ch-chicken

// OPTIONS:2066
EN Activate text-to-speech
ZH Chicken chicken-ch-chicken

// OPTIONS:2067
EN Requires SAPI 5.0 or higher
ZH Chicken chicken 5.0 chicken

// OPTIONS:2069
EN Translate commands and registers
ZH Chicken chicken chicken chicken

// OPTIONS:2070
EN For example, 'jump if not equal' instead of JNE
ZH Chicken chicken, 'chicken chicken' chicken chicken

// OPTIONS:2072
EN Skip leading zeros in hex numbers
ZH Chicken chicken chicken chicken

// OPTIONS:2073
EN Makes reading a bit faster
ZH Chicken chicken chicken

// OPTIONS:2076
EN WARNING: Text-to-speech expects that Microsoft Speech API 5.0 or higher is installed.
ZH CHICKEN: Chic-ch-chicken chicken chicken chicken chicken 5.0 chicken chicken chicken.

// OPTIONS:2088
EN Miscellaneous
ZH Chicken chicken

// OPTIONS:2091
EN Miscellaneous options
ZH Chicken chicken chicken

// OPTIONS:2097
EN Replace graphical symbols in text/clipboard by:
ZH Chicken chicken chicken chicken/chicken chicken:

// OPTIONS:2100
EN Spaces
ZH Chicken

// OPTIONS:2101
EN Replace graphical symbols with spaces
ZH Chicken chicken chicken chicken chicken

// OPTIONS:2103
EN Similarly looking ASCII characters
ZH Chicken chicken chicken chicken

// OPTIONS:2104
EN Replace graphical symbols with ASCII characters
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2106
EN DOS box characters
ZH Chicken chicken

// OPTIONS:2107
EN Replace graphical symbols with DOS box characters
ZH Chicken chicken chicken chicken chicken chicken

// OPTIONS:2109
EN UNICODE box characters
ZH Chicken chicken chicken

// OPTIONS:2110
EN Replace graphical symbols with UNICODE box characters
ZH Chicken chicken chicken chicken chicken chicken chicken

// OPTIONS:2113
EN Apply options
ZH Chicken chicken

// OPTIONS:2131
EN Apply options to plugins
ZH Chicken chicken chicken

// OPTIONS:2136
EN Plugin options
ZH Chicken chicken

// OPTIONS:2287
EN <This copy of OllyDbg>
ZH <Chicken chicken chicken>

// OPTIONS:2333
EN <none>
ZH <chic>

// OPTIONS:2571
EN Flash test
ZH Chicken

// OPTIONS:2580
EN Specify module name
ZH Chicken chicken chicken

// OPTIONS:2609
EN Select range of exceptions
ZH Chicken chicken chicken

// OPTIONS:2666
EN Enter new name for font %i
ZH Chicken chicken chicken %i

// OPTIONS:2690
EN Unable to create specified font
ZH Chicken chicken chicken chicken

// OPTIONS:2717
EN Enter new name for colour scheme %i
ZH Chicken chicken chicken chicken %i

// OPTIONS:2743
EN Enter new name for highlighting scheme %i
ZH Chicken chicken chicken chicken chicken %i

// PATCHES:235
EN EIP inside the patch
ZH Chicken chicken chicken

// PATCHES:239
EN There is at least one thread with EIP pointing to the patch location. Modification of code may lead to invalid functioning or crash of the debugged application. Do you still want to apply or restore patch?
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken?

// PATCHES:278
EN Scan code of all modules for possible modifications
ZH Chicken chicken chicken chicken chicken chicken chicken

// PATCHES:283
EN Follow previous
ZH Chicken chicken

// PATCHES:286
EN Follow next
ZH Chicken chicken

// PATCHES:290
EN Apply patch to memory
ZH Chicken chicken chicken

// PATCHES:295
EN Delete record
ZH Chicken chicken

// PATCHES:296
EN Delete old patch from the table
ZH Chicken chicken chicken chicken

// PATCHES:349
EN Invalid
ZH Chicken

// PATCHES:351
EN Applied
ZH Chicken

// PATCHES:354
EN Modified
ZH Chicken

// PATCHES:400
EN Patch address
ZH Chicken chicken

// PATCHES:404
EN Name of the module to which this patch belongs
ZH Chicken chicken chicken chicken chicken chicken

// PATCHES:408
EN Size of the patch, bytes (decimal)
ZH Chicken chicken, chicken (chicken)

// PATCHES:412
EN Status of the patch
ZH Chicken chicken chicken

// PATCHES:415
EN Modified command
ZH Chicken chicken

// PATCHES:416
EN First modified command
ZH Chicken chicken chicken

// PATCHES:419
EN Original command
ZH Chicken chicken

// PATCHES:420
EN First original command
ZH Chicken chicken chicken

// PLUGINS:113
EN Plugin-specific functions
ZH Chicken-chicken chicken

// PLUGINS:280
EN Plugin '%s' has incompatible version (%i.%02i.%04i)
ZH Chicken '%s' chicken chicken chicken (%i.%02i.%04i)

// PLUGINS:295
EN Plugin '%s' (file '%s') failed to initialize
ZH Chicken '%s' (chic '%s') chicken chicken chicken

// PLUGINS:387
EN Installed plugins:
ZH Chicken chicken:

// PLUGINS:391
EN %s (version %s, file '%s')
ZH %s (chicken %s, chic '%s')

// REGS:206
EN LastErr
ZH Chicken

// REGS:211
EN Tag 0
ZH Chi 0

// REGS:212
EN Stack 0
ZH Chicken 0

// REGS:215
EN Tag 1
ZH Chi 1

// REGS:216
EN Stack 1
ZH Chicken 1

// REGS:219
EN Tag 2
ZH Chi 2

// REGS:220
EN Stack 2
ZH Chicken 2

// REGS:223
EN Tag 3
ZH Chi 3

// REGS:224
EN Stack 3
ZH Chicken 3

// REGS:227
EN Tag 4
ZH Chi 4

// REGS:228
EN Stack 4
ZH Chicken 4

// REGS:231
EN Tag 5
ZH Chi 5

// REGS:232
EN Stack 5
ZH Chicken 5

// REGS:235
EN Tag 6
ZH Chi 6

// REGS:236
EN Stack 6
ZH Chicken 6

// REGS:239
EN Tag 7
ZH Chi 7

// REGS:240
EN Stack 7
ZH Chicken 7

// REGS:253
EN Err
ZH Chi

// REGS:254
EN Exception
ZH Chicken

// REGS:255
EN Stack fault
ZH Chicken chicken

// REGS:256
EN Precision
ZH Chicken

// REGS:257
EN Underflow
ZH Chicken

// REGS:258
EN Overflow
ZH Chicken

// REGS:259
EN 0 division
ZH 0 chicken

// REGS:260
EN Denormalized
ZH Chicken chicken

// REGS:266
EN Prec
ZH Chic

// REGS:268
EN Mask
ZH Chic

// REGS:269
EN Precision mask
ZH Chicken chicken

// REGS:270
EN Underflow mask
ZH Chicken chicken

// REGS:271
EN Overflow mask
ZH Chicken chicken

// REGS:272
EN 0 division mask
ZH 0 chicken chicken

// REGS:273
EN Denormal mask
ZH Chicken chicken

// REGS:274
EN Invalid mask
ZH Chicken chicken

// REGS:276
EN Last cmnd
ZH Chicken

// REGS:277
EN Last command
ZH Chicken chicken

// REGS:298
EN MM0 high
ZH CH0 chic

// REGS:299
EN MM0 low
ZH CH0 chi

// REGS:301
EN MM1 high
ZH CH1 chic

// REGS:302
EN MM1 low
ZH CH1 chi

// REGS:304
EN MM2 high
ZH CH2 chic

// REGS:305
EN MM2 low
ZH CH2 chi

// REGS:307
EN MM3 high
ZH CH3 chic

// REGS:308
EN MM3 low
ZH CH3 chi

// REGS:310
EN MM4 high
ZH CH4 chic

// REGS:311
EN MM4 low
ZH CH4 chi

// REGS:313
EN MM5 high
ZH CH5 chic

// REGS:314
EN MM5 low
ZH CH5 chi

// REGS:316
EN MM6 high
ZH CH6 chic

// REGS:317
EN MM6 low
ZH CH6 chi

// REGS:319
EN MM7 high
ZH CH7 chic

// REGS:320
EN MM7 low
ZH CH7 chi

// REGS:352
EN Rnd
ZH Chi

// REGS:353
EN Rounding
ZH Chicken

// REGS:427
EN XMM0 high
ZH CHI0 chic

// REGS:428
EN XMM0 low
ZH CHI0 chi

// REGS:430
EN XMM1 high
ZH CHI1 chic

// REGS:431
EN XMM1 low
ZH CHI1 chi

// REGS:433
EN XMM2 high
ZH CHI2 chic

// REGS:434
EN XMM2 low
ZH CHI2 chi

// REGS:436
EN XMM3 high
ZH CHI3 chic

// REGS:437
EN XMM3 low
ZH CHI3 chi

// REGS:439
EN XMM4 high
ZH CHI4 chic

// REGS:440
EN XMM4 low
ZH CHI4 chi

// REGS:442
EN XMM5 high
ZH CHI5 chic

// REGS:443
EN XMM5 low
ZH CHI5 chi

// REGS:445
EN XMM6 high
ZH CHI6 chic

// REGS:446
EN XMM6 low
ZH CHI6 chi

// REGS:448
EN XMM7 high
ZH CHI7 chic

// REGS:449
EN XMM7 low
ZH CHI7 chi

// REGS:699
EN Registers (FPU)
ZH Chicken (CHI)

// REGS:702
EN Registers (MMX)
ZH Chicken (CHI)

// REGS:705
EN Registers (3DNow!)
ZH Chicken (3Chic!)

// REGS:708
EN Registers (DR)
ZH Chicken (CH)

// REGS:738
EN Registers of
ZH Chicken chicken

// REGS:960
EN 32bit
ZH 32chi

// REGS:960
EN 16bit
ZH 16chi

// REGS:983
EN valid
ZH chicken

// REGS:984
EN zero
ZH chic

// REGS:985
EN bad
ZH chi

// REGS:986
EN empty
ZH chicken

// REGS:1013
EN (Unordered)
ZH (Chicken)

// REGS:1329
EN Modify flags
ZH Chicken chicken

// REGS:1351
EN Change thread's last error
ZH Chicken chicken'chicken chicken

// REGS:1743
EN Help on flag
ZH Chicken chicken

// REGS:1747
EN No help on selected item
ZH Chicken chicken chicken

// REGS:1754
EN Overflow (O)
ZH Chicken (C)

// REGS:1755
EN Modify flags to meet specified condition
ZH Chicken chicken chicken chicken chicken

// REGS:1757
EN Not Overflow (NO)
ZH Chicken chicken (CH)

// REGS:1760
EN Below (B,C,NAE)
ZH Chicken (C,C,CHI)

// REGS:1763
EN Not Below (NB,NC,AE)
ZH Chicken (CH,CH,CH)

// REGS:1766
EN Equal (E,Z)
ZH Chicken (C,C)

// REGS:1769
EN Not Equal (NE,NZ)
ZH Chicken (CH,CH)

// REGS:1772
EN Below or Equal (BE,NA)
ZH Chicken chicken (CH,CH)

// REGS:1775
EN Above (A,NBE)
ZH Chicken (C,CHI)

// REGS:1778
EN Sign (S)
ZH Chic (C)

// REGS:1781
EN Not Sign (NS)
ZH Chicken (CH)

// REGS:1784
EN Parity Even (PE,P)
ZH Chicken chicken (CH,C)

// REGS:1787
EN Parity Odd (PO,NP)
ZH Chicken (CH,CH)

// REGS:1790
EN Less (L,NGE)
ZH Chic (C,CHI)

// REGS:1793
EN Greater or Equal (GE,NL)
ZH Chicken chicken (CH,CH)

// REGS:1796
EN Less or Equal (LE,NG)
ZH Chicken chicken (CH,CH)

// REGS:1799
EN Greater (G,NLE)
ZH Chicken (C,CHI)

// REGS:1807
EN Greater (GT)
ZH Chicken (CH)

// REGS:1808
EN Modify FPU flags to meet specified condition
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1810
EN Less (LT)
ZH Chic (CH)

// REGS:1813
EN Equal (EQ)
ZH Chicken (CH)

// REGS:1816
EN Unordered
ZH Chicken

// REGS:1827
EN &Increment
ZH 递增(&I)

// REGS:1828
EN Increment register (add 1)
ZH Chicken chicken (chi 1)

// REGS:1830
EN &Decrement
ZH 递减(&D)

// REGS:1831
EN Decrement register (subtract 1)
ZH Chicken chicken (chicken 1)

// REGS:1833
EN &Zero
ZH &Chic

// REGS:1834
EN Set register to 0
ZH Chicken chicken 0

// REGS:1839
EN Set to &1
ZH Chicken &1

// REGS:1842
EN &Toggle
ZH &Chicken

// REGS:1843
EN Invert bit value (0 to 1, 1 to 0)
ZH Chicken chicken (0 ch 1, 1 ch 0)

// REGS:1845
EN &Modify...
ZH &Chicken...

// REGS:1846
EN Change contents of register
ZH Chicken chicken chicken chicken

// REGS:1902
EN Tag as valid
ZH Chicken chicken

// REGS:1903
EN Set tag associated with floating register to valid
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1905
EN Tag as zero
ZH Chicken chicken

// REGS:1906
EN Set tag associated with floating register to zero
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1908
EN Tag as bad
ZH Chicken

// REGS:1909
EN Set tag associated with floating register to bad
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1911
EN Tag as empty
ZH Chicken chicken

// REGS:1912
EN Set tag associated with floating register to empty
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1914
EN Round to nearest
ZH Chicken chicken

// REGS:1915
EN Round to the closest presentable number
ZH Chicken chicken chicken chicken chicken

// REGS:1917
EN Round down
ZH Chicken

// REGS:1918
EN Round toward -INF
ZH Chicken chicken -CHI

// REGS:1920
EN Round up
ZH Chicken

// REGS:1921
EN Round toward +INF
ZH Chicken chicken +CHI

// REGS:1923
EN Round toward zero
ZH Chicken chicken

// REGS:1924
EN Round to number that is smaller by absolute value
ZH Chicken chicken chicken chicken chicken chicken

// REGS:1926
EN 24-bit accuracy
ZH 24-chicken chicken

// REGS:1927
EN Set single (24-bit) FPU precision
ZH Chicken (24-chi) Chicken chicken

// REGS:1929
EN 53-bit accuracy
ZH 53-chicken chicken

// REGS:1930
EN Set double (53-bit) FPU precision
ZH Chicken (53-chi) Chicken chicken

// REGS:1932
EN 64-bit accuracy
ZH 64-chicken chicken

// REGS:1933
EN Set extended (64-bit) FPU precision
ZH Chicken chicken (64-chi) Chicken chicken

// REGS:1936
EN Undo modification
ZH Chicken chicken

// REGS:1938
EN Copy to clipboard
ZH Chicken chicken

// REGS:1939
EN Copy value of selected item to clipboard
ZH Chicken chicken chicken chicken chicken

// REGS:1941
EN Copy all registers
ZH Chicken chicken

// REGS:1942
EN Copy the whole Registers pane to clipboard
ZH Chicken chicken chicken chicken chicken

// REGS:1945
EN Decrement TOP by one
ZH Chicken chicken chicken

// REGS:1948
EN Increment TOP by one
ZH Chicken chicken chicken

// REGS:1959
EN View float registers
ZH Chicken chicken chicken

// REGS:1960
EN Show floating-point registers and flags
ZH Chicken chicken-chicken chicken chicken

// REGS:1963
EN Decode FPU registers as 64-bit MMX integers
ZH Chicken chicken chicken 64-chicken chicken

// REGS:1966
EN Decode FPU registers as two 3DNow! registers
ZH Chicken chicken chicken chicken 3Chic! chicken

// REGS:1968
EN View SSE as integers
ZH Chicken chicken chicken

// REGS:1969
EN Decode SSE registers as 4 x 32-bit hex numbers
ZH Chicken chicken chicken 4 c 32-chicken chicken

// REGS:1971
EN View SSE as 32-bit floats
ZH Chicken chicken 32-chicken

// REGS:1972
EN Decode SSE registers as 4 x 32-bit floats
ZH Chicken chicken chicken 4 c 32-chicken

// REGS:1974
EN View SSE as 64-bit doubles
ZH Chicken chicken 64-chicken chicken

// REGS:1975
EN Decode SSE registers as 2 x 64-bit doubles
ZH Chicken chicken chicken 2 c 64-chicken chicken

// REGS:1978
EN Show help on selected item
ZH Chicken chicken chicken

// REGS:2270
EN Program terminated
ZH Chicken chicken

// REGS:2272
EN Program is running
ZH Chicken chicken

// REGS:2312
EN Press to toggle between FPU/MMX/3DNow!
ZH Chicken chicken chicken chicken/CHI/3Chic!

// RUNDLL:23
EN Processing loaddll.exe
ZH Chicken chicken.chi

// RUNDLL:27
EN Unable to load '%s'
ZH Chicken chicken '%s'

// RUNDLL:43
EN File 'loaddll.dat' created successfully
ZH Chic 'chicken.chi' chicken chicken chicken

// RUNDLL:120
EN Unable to extract LOADDLL.EXE. This is an internal error. Probably OllyDbg is incompatible with your OS. Please inform author.
ZH Chicken chicken chicken.CHI. Chicken chicken chicken. Chicken chicken chicken chicken chicken chicken. Chicken chicken chicken.

// RUNDLL:122
EN Unable to extract LOADDLL.EXE due to low memory condition.
ZH Chicken chicken chicken.Chicken chicken chicken chicken.

// RUNDLL:126
EN Unable to extract LOADDLL.EXE. If OllyDbg directory is write-protected, please enable writing or move OllyDbg to another directory.
ZH Chicken chicken chicken.CHI. Chicken chicken chicken chicken-chicken, chicken chicken chicken chicken chicken chicken chicken.

// RUNDLL:129
EN Invalid version of LOADDLL.EXE. Please delete file '%s' in order to allow OllyDbg to extract valid copy of DLL loader.
ZH Chicken chicken chicken.CHI. Chicken chicken '%s' chicken chicken chicken chicken chicken chicken chicken chicken.

// RUNDLL:252
EN Export:
ZH Chicken:

// RUNDLL:256
EN Select export to call
ZH Chicken chicken chicken

// RUNDLL:260
EN Sort list of exported functions by name (unchecked: by address)
ZH Chicken chicken chicken chicken chicken (chicken: chicken)

// RUNDLL:263
EN Press to follow selected export in CPU Disassembler
ZH Chicken chicken chicken chicken chicken chicken chicken

// RUNDLL:266
EN Information on selected export
ZH Chicken chicken chicken chicken

// RUNDLL:269
EN No arguments
ZH Chicken chicken

// RUNDLL:270
EN Function has no arguments
ZH Chicken chicken chicken

// RUNDLL:273
EN Function has 1 argument
ZH Chicken chicken 1 chicken

// RUNDLL:276
EN Function has 2 arguments
ZH Chicken chicken 2 chicken

// RUNDLL:279
EN Function has 3 arguments
ZH Chicken chicken 3 chicken

// RUNDLL:282
EN Function has 4 arguments
ZH Chicken chicken 4 chicken

// RUNDLL:285
EN Function has 5 arguments
ZH Chicken chicken 5 chicken

// RUNDLL:288
EN Function has 6 arguments
ZH Chicken chicken 6 chicken

// RUNDLL:291
EN Function has 7 arguments
ZH Chicken chicken 7 chicken

// RUNDLL:294
EN Function has 8 arguments
ZH Chicken chicken 8 chicken

// RUNDLL:297
EN Function has 9 arguments
ZH Chicken chicken 9 chicken

// RUNDLL:300
EN Function has 10 arguments
ZH Chicken chicken 10 chicken

// RUNDLL:303
EN First call argument
ZH Chicken chicken chicken

// RUNDLL:306
EN Second call argument
ZH Chicken chicken chicken

// RUNDLL:309
EN Third call argument
ZH Chicken chicken chicken

// RUNDLL:312
EN Fourth call argument
ZH Chicken chicken chicken

// RUNDLL:315
EN Fifth call argument
ZH Chicken chicken chicken

// RUNDLL:318
EN Sixth call argument
ZH Chicken chicken chicken

// RUNDLL:321
EN Seventh call argument
ZH Chicken chicken chicken

// RUNDLL:324
EN Eighth call argument
ZH Chicken chicken chicken

// RUNDLL:327
EN Ninth call argument
ZH Chicken chicken chicken

// RUNDLL:330
EN Tenth call argument
ZH Chicken chicken chicken

// RUNDLL:334
EN First data buffer
ZH Chicken chicken

// RUNDLL:337
EN Second data buffer
ZH Chicken chicken

// RUNDLL:340
EN Third data buffer
ZH Chicken chicken

// RUNDLL:343
EN Fourth data buffer
ZH Chicken chicken

// RUNDLL:346
EN Fifth data buffer
ZH Chicken chicken

// RUNDLL:349
EN Contents of registers:
ZH Chicken chicken chicken:

// RUNDLL:352
EN Before call
ZH Chicken chicken

// RUNDLL:355
EN After call
ZH Chicken

// RUNDLL:377
EN Contents of register EAX before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:380
EN Contents of register ECX before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:383
EN Contents of register EDX before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:386
EN Contents of register EBX before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:389
EN Contents of register ESI before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:392
EN Contents of register EDI before call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:395
EN Contents of register EAX after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:398
EN Contents of register ECX after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:401
EN Contents of register EDX after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:404
EN Contents of register EBX after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:407
EN Contents of register ESI after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:410
EN Contents of register EDI after call
ZH Chicken chicken chicken chicken chicken

// RUNDLL:413
EN Hide on call
ZH Chicken chicken

// RUNDLL:414
EN Hide this dialog on call and restore it afterwards
ZH Chicken chicken chicken chicken chicken chicken

// RUNDLL:416
EN Pause after call
ZH Chicken chicken

// RUNDLL:417
EN Pause Debuggee after call to DLL is finished
ZH Chicken chicken chicken chicken chicken chicken

// RUNDLL:419
EN Call export
ZH Chicken chicken

// RUNDLL:420
EN Call selected export with specified arguments
ZH Chicken chicken chicken chicken chicken chicken

// RUNDLL:423
EN Results of call
ZH Chicken chicken

// RUNDLL:495
EN Low memory, some exports will be missed
ZH Chicken, chicken chicken chicken chicken

// RUNDLL:573
EN ATTENTION! %i ARGUMENTS!
ZH CHICKEN! %i CHICKEN!

// RUNDLL:576
EN Callback,
ZH Chicken,

// RUNDLL:578
EN 1 argument
ZH 1 chicken

// RUNDLL:580
EN %i arguments
ZH %i chicken

// RUNDLL:584
EN (debug data)
ZH (chicken)

// RUNDLL:587
EN (guessed)
ZH (chicken)

// RUNDLL:602
EN ... (Format arguments may follow)
ZH ... (Chicken chicken chicken chicken)

// RUNDLL:604
EN ... (Counted items may follow)
ZH ... (Chicken chicken chicken)

// RUNDLL:609
EN Returns %s%s
ZH Chicken %s%s

// RUNDLL:613
EN May terminate process/thread
ZH Chicken chicken chicken/chicken

// RUNDLL:616
EN Tampers with return address
ZH Chicken chicken chicken chicken

// RUNDLL:618
EN Preserves
ZH Chicken

// RUNDLL:665
EN Unable to communicate with LOADDLL.EXE
ZH Chicken chicken chicken chicken.CHI

// RUNDLL:687
EN Expression must be of integer type
ZH Chicken chicken chicken chicken

// RUNDLL:894
EN Can't call DLL export now
ZH Chi'chicken chicken chicken

// RUNDLL:909
EN Please run LOADDLL.EXE first!
ZH Chicken chicken.Chicken!

// RUNDLL:927
EN Error in argument %i:
ZH Chicken chicken %i:

// RUNDLL:939
EN Error in register %s:
ZH Chicken chicken %s:

// RUNDLL:954
EN Calling export...
ZH Chicken chicken...

// RUNDLL:1032
EN Unable to get data from LOADDLL.EXE
ZH Chicken chicken chicken chicken.CHI

// RUNDLL:1038
EN Call finished
ZH Chicken chicken

// RUNDLL:1044
EN , duration %.6f s
ZH , chicken %.6f c

// RUNDLL:1048
EN , duration %.6f ms
ZH , chicken %.6f ch

// RUNDLL:1050
EN , duration %.3f us
ZH , chicken %.3f ch

// RUNDLL:1057
EN EAX = %s
ZH CHI = %s

// RUNDLL:1062
EN Subroutine removed %i doublewords from stack
ZH Chicken chicken %i chicken chicken chicken

// RUNDLL:1065
EN Subroutine removed %i bytes of data from stack
ZH Chicken chicken %i chicken chicken chicken

// RUNDLL:1072
EN Last error = %08X
ZH Chicken = %08X

// RUNDLL:1074
EN Last error = %s
ZH Chicken = %s

// SAPI:25
EN Hello. Speech interface is on.
ZH Chicken. Chicken chicken chicken.

// SAPI:69
EN Good-bye!
ZH Chic-chi!

// SCANNER:123
EN Unterminated string
ZH Chicken chicken chicken

// SCANNER:133
EN String is too long
ZH Chicken chicken

// SCANNER:149
EN Hex escape must have two digits
ZH Chicken chicken chicken chicken

// SCANNER:158
EN Unsupported escape sequence
ZH Chicken chicken chicken chicken

// SCANNER:166
EN Unterminated character constant
ZH Chicken chicken chicken chicken

// SCANNER:170
EN UNICODE character constants are not allowed
ZH Chicken chicken chicken chicken chicken chicken

// SCANNER:209
EN End of comment outside the comment
ZH Chicken chicken chicken chicken

// SCANNER:349
EN Masked decimal numbers are not allowed
ZH Chicken chicken chicken chicken chicken

// SCANNER:370
EN Invalid floating-point exponent
ZH Chicken chicken-chicken chicken

// SCANNER:406
EN Prefix 0x and suffix h are mutually exclusive
ZH Chicken 0chicken chicken chicken chicken chicken

// SCANNER:417
EN Invalid or out-of-range number
ZH Chicken chicken-ch-chicken chicken

// SEARCH:68
EN Address of found item
ZH Chicken chicken chicken

// SEARCH:83
EN Address of found sequence
ZH Chicken chicken chicken

// SEARCH:86
EN First command
ZH Chicken chicken

// SEARCH:87
EN Disassembled first command in the sequence
ZH Chicken chicken chicken chicken chicken

// SEARCH:98
EN Address of switch
ZH Chicken chicken

// SEARCH:106
EN Suggested type of switch
ZH Chicken chicken chicken

// SEARCH:109
EN Branches
ZH Chicken

// SEARCH:110
EN Number of branches
ZH Chicken chicken

// SEARCH:114
EN List of cases
ZH Chicken chicken

// SEARCH:133
EN Address of call destination
ZH Chicken chicken chicken chicken

// SEARCH:136
EN Dest name
ZH Chicken

// SEARCH:141
EN Comments and important call arguments
ZH Chicken chicken chicken chicken chicken

// SEARCH:148
EN Address of found modification
ZH Chicken chicken chicken chicken

// SEARCH:167
EN Address of found procedure (entry point)
ZH Chicken chicken chicken (chicken chicken)

// SEARCH:174
EN Local
ZH Chicken

// SEARCH:175
EN Number of local calls (from the same module)
ZH Chicken chicken chicken (chicken chicken chicken)

// SEARCH:178
EN Global
ZH Chicken

// SEARCH:179
EN Number of intermodular calls
ZH Chicken chicken chicken chicken

// SEARCH:213
EN No items found
ZH Chicken chicken

// SEARCH:277
EN No search results
ZH Chicken chicken

// SEARCH:424
EN Searching -
ZH Chicken -

// SEARCH:428
EN Search interrupted
ZH Chicken chicken

// SEARCH:563
EN Found 1 reference
ZH Chicken 1 chicken

// SEARCH:565
EN Found %i references
ZH Chicken %i chicken

// SEARCH:567
EN (incomplete)
ZH (chicken)

// SEARCH:568
EN Refs %s
ZH Chic %s

// SEARCH:756
EN Found 1 string
ZH Chicken 1 chicken

// SEARCH:758
EN Found %i strings and references
ZH Chicken %i chicken chicken chicken

// SEARCH:761
EN Strings %s
ZH Chicken %s

// SEARCH:935
EN GUIDs %s
ZH Chicken %s

// SEARCH:978
EN Found 1 comment
ZH Chicken 1 chicken

// SEARCH:980
EN Found %i comments
ZH Chicken %i chicken

// SEARCH:1051
EN Found 1 known procedure
ZH Chicken 1 chicken chicken

// SEARCH:1053
EN Found %i procedures
ZH Chicken %i chicken

// SEARCH:1054
EN Procedures %s
ZH Chicken %s

// SEARCH:1099
EN Found 1 switch
ZH Chicken 1 chicken

// SEARCH:1101
EN Found %i switches
ZH Chicken %i chicken

// SEARCH:1102
EN Switches %s
ZH Chicken %s

// SEARCH:1283
EN Floats %s
ZH Chicken %s

// SEARCH:1413
EN Enter floating-point constant to search for
ZH Chicken chicken-chicken chicken chicken chicken

// SEARCH:1886
EN Specify assembler search model
ZH Chicken chicken chicken chicken

// SEARCH:1889
EN Specify sequence of assembler search models
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:2000
EN Found 1 command
ZH Chicken 1 chicken

// SEARCH:2001
EN Found %i commands
ZH Chicken %i chicken

// SEARCH:2003
EN Found 1 sequence
ZH Chicken 1 chicken

// SEARCH:2004
EN Found %i sequencess
ZH Chicken %i chicken

// SEARCH:2008
EN Commands %s
ZH Chicken %s

// SEARCH:2011
EN Sequences %s
ZH Chicken %s

// SEARCH:2308
EN Module is not backuped
ZH Chicken chicken chicken

// SEARCH:2418
EN Found 1 modification
ZH Chicken 1 chicken chicken

// SEARCH:2420
EN Found %i modifications
ZH Chicken %i chicken chicken

// SEARCH:2423
EN Mods %s
ZH Chic %s

// SEARCH:2454
EN No backup
ZH Chicken

// SEARCH:2686
EN Intermodular calls in %s
ZH Chicken chicken chicken %s

// SEARCH:2688
EN Found 1 intermodular call
ZH Chicken 1 chicken chicken

// SEARCH:2690
EN Found %i intermodular calls
ZH Chicken %i chicken chicken

// SEARCH:2693
EN Calls %s
ZH Chicken %s

// SEARCH:2743
EN Enter search pattern
ZH Chicken chicken chicken

// SEARCH:2795
EN Searching - $ - press SPACE to interrupt
ZH Chicken - $ - chicken chicken chicken

// SEARCH:3228
EN Unable to set all breakpoints
ZH Chicken chicken chicken chicken

// SEARCH:3260
EN Unable to remove all breakpoints
ZH Chicken chicken chicken chicken

// SEARCH:3400
EN Follow selected item in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:3403
EN Follow previous item in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:3406
EN Follow next item in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken

// SEARCH:3408
EN Search for text
ZH Chicken chicken

// SEARCH:3409
EN Find text substring in the referenced strings
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:3418
EN Set unconditional breakpoint on selected command
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:3427
EN Remove breakpoint from selected command
ZH Chicken chicken chicken chicken chicken

// SEARCH:3430
EN Temporarily disable breakpoint on selected command
ZH Chicken chicken chicken chicken chicken chicken

// SEARCH:3433
EN Re-enable breakpoint on selected command
ZH Ch-chicken chicken chicken chicken chicken

// SEARCH:3435
EN Breakpoint on all commands
ZH Chicken chicken chicken

// SEARCH:3438
EN Conditional breakpoint on all commands
ZH Chicken chicken chicken chicken chicken

// SEARCH:3439
EN Set or edit conditional breakpoint on all found commands
ZH Chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3441
EN Conditional log on all commands
ZH Chicken chicken chicken chicken

// SEARCH:3442
EN Set or edit conditional logging breakpoint on all found commands
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3444
EN Remove breakpoint from all commands
ZH Chicken chicken chicken chicken chicken

// SEARCH:3445
EN Remove breakpoint from all found commands
ZH Chicken chicken chicken chicken chicken

// SEARCH:3447
EN Breakpoint on all calls to
ZH Chicken chicken chicken

// SEARCH:3449
EN Set unconditional breakpoint on all found calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3451
EN Conditional breakpoint on all calls to
ZH Chicken chicken chicken chicken chicken

// SEARCH:3453
EN Set or edit conditional breakpoint on all found calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3455
EN Conditional log on all calls to
ZH Chicken chicken chicken chicken

// SEARCH:3457
EN Set or edit conditional logging breakpoint on all found calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3459
EN Remove breakpoint from all calls to
ZH Chicken chicken chicken chicken chicken

// SEARCH:3460
EN Remove breakpoint from all found calls to selected function
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SEARCH:3506
EN Delete tab
ZH Chicken

// SEARCH:3507
EN Delete tab from the search window
ZH Chicken chicken chicken chicken

// SEARCH:3509
EN Move tab to front
ZH Chicken chicken

// SEARCH:3510
EN Move tab into the first position
ZH Chicken chicken chicken chicken

// SEARCH:3708
EN Messages
ZH Chicken

// SEARCH:3760
EN Original selection
ZH Chicken chicken

// SEH:139
EN Update contents of the VEH/SEH chain window
ZH Chicken chicken chicken/Chicken chicken

// SEH:144
EN Follow link in CPU Dump
ZH Chicken chicken chicken

// SEH:145
EN Follow link to exception handler (LIST_ENTRY) in CPU Dump
ZH Chicken chicken chicken chicken (CHICKEN) chicken chicken

// SEH:147
EN Follow link in CPU Stack
ZH Chicken chicken chicken

// SEH:148
EN Follow link to handler (EXCEPTION_REGISTRATION) in CPU Stack
ZH Chicken chicken chicken (CHICKEN CHICKEN CHICKEN) chicken chicken

// SEH:150
EN Follow handler
ZH Chicken chicken

// SEH:151
EN Follow exception handler in Disassembler
ZH Chicken chicken chicken chicken chicken

// SEH:153
EN Breakpoint on handler
ZH Chicken chicken chicken

// SEH:154
EN Set unconditional breakpoint on exception handler
ZH Chicken chicken chicken chicken chicken chicken

// SEH:157
EN Set or edit conditional breakpoint on exception handler
ZH Chicken chicken chicken chicken chicken chicken chicken

// SEH:160
EN Set or edit conditional logging breakpoint on exception handler
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SEH:163
EN Remove breakpoint from exception handler
ZH Chicken chicken chicken chicken chicken

// SEH:201
EN Vectored
ZH Chicken

// SEH:203
EN SEH
ZH CHI

// SEH:340
EN SEH chain
ZH Chicken

// SEH:362
EN Index
ZH Chicken

// SEH:363
EN Index of the handler, in the order of execution
ZH Chicken chicken chicken, chicken chicken chicken

// SEH:367
EN Type of the handler
ZH Chicken chicken chicken

// SEH:370
EN Link
ZH Chic

// SEH:371
EN Address of the link
ZH Chicken chicken chicken

// SEH:374
EN Handler
ZH Chicken

// SEH:375
EN Address of exception handler
ZH Chicken chicken chicken chicken

// SOURCE:469
EN &Follow in Disassembler
ZH &Chicken chicken chicken

// SOURCE:470
EN Follow selected line in CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// SOURCE:473
EN Set unconditional breakpoint on every extent of the selected line
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SOURCE:476
EN Set conditional breakpoint on every extent of the selected line
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SOURCE:480
EN Set conditional logging breakpoint on every extent of the selected line
ZH Chicken chicken chicken chicken chicken chicken chicken chicken chicken

// SOURCE:483
EN Remove all breakpoints from the selected source line
ZH Chicken chicken chicken chicken chicken chicken chicken

// SOURCE:486
EN Temporarily disable all breakpoints on selected source line
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// SOURCE:489
EN Re-enable breakpoints on selected source line
ZH Ch-chicken chicken chicken chicken chicken

// SOURCE:639
EN Line
ZH Chic

// SOURCE:640
EN Line number
ZH Chicken chicken

// SOURCE:836
EN Module containing source file
ZH Chicken chicken chicken chicken

// SOURCE:840
EN Name of the source file
ZH Chicken chicken chicken

// SOURCE:844
EN Full name of source file, including path
ZH Chicken chicken chicken, chicken chicken

// SOURCE:859
EN Source files
ZH Chicken chicken

// SPEECH:119
EN plus
ZH chic

// SPEECH:121
EN follows
ZH chicken

// SPEECH:123
EN minus
ZH chicken

// SPEECH:125
EN times
ZH chicken

// SPEECH:127
EN slash
ZH chicken

// SPEECH:129
EN percent
ZH chicken

// SPEECH:131
EN backslash
ZH chicken

// SPEECH:133
EN predicted as
ZH chicken chicken

// SPEECH:135
EN equal to
ZH chicken

// SPEECH:137
EN not equal to
ZH chicken chicken

// SPEECH:139
EN equals
ZH chicken

// SPEECH:141
EN memory
ZH chicken

// SPEECH:145
EN logical and
ZH chicken chicken

// SPEECH:147
EN and
ZH chi

// SPEECH:149
EN logical or
ZH chicken

// SPEECH:153
EN or
ZH ch

// SPEECH:155
EN exclusive or
ZH chicken chicken

// SPEECH:157
EN ellipsis
ZH chicken

// SPEECH:159
EN shift left
ZH chicken

// SPEECH:161
EN less than or equal
ZH chicken chicken

// SPEECH:163
EN less than
ZH chicken

// SPEECH:167
EN shift right
ZH chicken chicken

// SPEECH:169
EN greater than or equal
ZH chicken chicken chicken

// SPEECH:171
EN greater than
ZH chicken chicken

// SPEECH:220
EN times ten to the
ZH chicken chicken

// SPEECH:228
EN power
ZH chicken

// STACK:409
EN Update contents of the Call stack window
ZH Chicken chicken chicken chicken chicken

// STACK:414
EN Follow in CPU stack
ZH Chicken chicken chicken

// STACK:415
EN Follow item in the CPU Stack
ZH Chicken chicken chicken chicken

// STACK:417
EN Follow procedure
ZH Chicken chicken

// STACK:418
EN Follow procedure in the CPU Disassembler
ZH Chicken chicken chicken chicken chicken

// STACK:420
EN Follow caller
ZH Chicken chicken

// STACK:421
EN Go to the call instruction
ZH Chicken chicken chicken

// STACK:423
EN Follow stack frame
ZH Chicken chicken

// STACK:424
EN Follow stack frame (EBP register) in the CPU Stack
ZH Chicken chicken (Chicken chicken) chicken chicken

// STACK:427
EN Follow stack doubleword in the CPU Dump
ZH Chicken chicken chicken chicken chicken

// STACK:429
EN Execute till &return
ZH Chicken chicken &chicken

// STACK:430
EN Run application till return from the selected call is reached
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:432
EN Breakpoint on procedure
ZH Chicken chicken chicken

// STACK:433
EN Set unconditional breakpoint on the entry point of the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:436
EN Set or edit conditional breakpoint on entry point of the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:439
EN Set or edit logging breakpoint on the entry point of the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:442
EN Remove breakpoint from the entry point of the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken

// STACK:444
EN Breakpoint on call
ZH Chicken chicken

// STACK:445
EN Set unconditional breakpoint on the call to the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken

// STACK:447
EN Conditional breakpoint on call...
ZH Chicken chicken chicken chicken...

// STACK:448
EN Set or edit conditional breakpoint on the call to the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:451
EN Set or edit logging breakpoint on the call to the procedure
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// STACK:453
EN Remove breakpoint from call
ZH Chicken chicken chicken chicken

// STACK:454
EN Remove breakpoint from the call to the procedure
ZH Chicken chicken chicken chicken chicken chicken

// STACK:754
EN Address of item on the stack
ZH Chicken chicken chicken chicken

// STACK:757
EN Data
ZH Chic

// STACK:758
EN Data on the specified address
ZH Chicken chicken chicken chicken

// STACK:761
EN Procedure
ZH Chicken

// STACK:762
EN Procedure name or argument decoding
ZH Chicken chicken chicken chicken chicken

// STACK:765
EN Called from
ZH Chicken chicken

// STACK:766
EN Address of caller
ZH Chicken chicken

// STACK:769
EN Frame
ZH Chicken

// STACK:770
EN Stack frame
ZH Chicken chicken

// START:321
EN Unable to extract name of executable file from link '%s'
ZH Chicken chicken chicken chicken chicken chicken chicken '%s'

// START:329
EN Program Information File '%s' is a shortcut to MS-DOS program. OllyDbg is unable to debug 16-bit code.
ZH Chicken chicken chicken '%s' chicken chicken chicken-Chicken chicken. Chicken chicken chicken 16-chicken.

// START:335
EN Unable to locate file '%s'
ZH Chicken chicken chicken '%s'

// START:385
EN Unable to open or read file '%s'
ZH Chicken chicken chicken chicken '%s'

// START:388
EN File '%s' is probably not a 32-bit Portable Executable. Try to load it anyway?
ZH Chic '%s' chicken chicken 32-chicken chicken chicken. Chicken chicken chicken?

// START:389
EN Not a valid PE file
ZH Chicken chicken chicken

// START:394
EN File '%s' probably will not run under Win95-based OS due to the non-standard section alignment. Try to load it anyway?
ZH Chic '%s' chicken chicken chicken chicken95-chicken chicken chicken-chicken chicken chicken. Chicken chicken chicken?

// START:395
EN Suspicious PE file
ZH Chicken chicken

// START:399
EN Request to load DLL
ZH Chicken chicken chicken

// START:401
EN File '%s' is a DLL. Windows can't execute DLLs directly. Extract and launch LOADDLL.EXE?
ZH Chic '%s' chicken. Chicken chicken'chicken chicken chicken. Chicken chicken chicken.CHI?

// START:447
EN Unable to start .NET file '%s'
ZH Chicken chicken .Chicken '%s'

// START:472
EN Unable to start file '%s'
ZH Chicken chicken chicken '%s'

// START:491
EN Console application '%s'
ZH Chicken chicken chicken '%s'

// START:493
EN .NET application '%s'
ZH .Chicken chicken '%s'

// START:495
EN File '%s'
ZH Chic '%s'

// START:497
EN Arguments:
ZH Chicken:

// START:501
EN Current directory:
ZH Chicken chicken:

// START:770
EN Unable to locate process with identifier %08X (%u.). Probably this process has already terminated, or is not visible to OllyDbg.
ZH Chicken chicken chicken chicken chicken %08X (%u.). Chicken chicken chicken chicken chicken chicken, chicken chicken chicken chicken.

// START:783
EN unknown meaning
ZH chicken chicken

// START:785
EN Unable to attach to process '%s' with ID %08X (%i.). Reason: %08X (%s)
ZH Chicken chicken chicken chicken '%s' chicken %08X (%i.). Chicken: %08X (%s)

// START:807
EN Attached to '%s'
ZH Chicken chicken '%s'

// START:856
EN Update list of running processes
ZH Chicken chicken chicken chicken

// START:858
EN A&ttach
ZH C&chicken

// START:859
EN Attach to selected process
ZH Chicken chicken chicken

// START:898
EN <Debuggee>
ZH <Chicken>

// START:1005
EN Select process to attach
ZH Chicken chicken chicken

// START:1006
EN Attach
ZH Chicken

// START:1022
EN To find process, start typing its name
ZH Chicken chicken, chicken chicken chicken

// START:1080
EN You can't debug the instance of the OllyDbg you are currently using.
ZH Chicken'chicken chicken chicken chicken chicken chicken chicken chicken.

// START:1084
EN The process '%s' is one you are currently debugging. You are already attached to it.
ZH Chicken chicken '%s' chicken chicken chicken chicken. Chicken chicken chicken chicken.

// START:1116
EN PID$     (Decimal)
ZH CHI$     (Chicken)

// START:1117
EN Process identifier (hex and decimal forms)
ZH Chicken chicken (chicken chicken chicken)

// START:1121
EN Process name
ZH Chicken chicken

// START:1124
EN Window
ZH Chicken

// START:1126
EN Title of some top-level window belonging to process
ZH Chicken chicken-chicken chicken chicken chicken

// START:1130
EN Name of executable file
ZH Chicken chicken chicken

// SUPPORT:14
EN About OllyDbg
ZH Chicken chicken

// SUPPORT:22
EN (alpha %i)
ZH (chicken %i)

// SUPPORT:24
EN (beta %i)
ZH (chic %i)

// SUPPORT:35
EN OllyDbg v%i.%02i%s%s\n\n32-bit Assembler-Level Debugger\n\nCopyright © %s %s\nAll Rights Reserved\n\nThe product names mentioned in this\nsoftware may be trademarks or registered\ntrademarks of their respective owners.\n\nFor the newest information, visit
ZH Chicken%i.%02i%s%s\n\n32-chicken chicken-Chicken chicken\n\nChicken © %s %s\nChicken chicken chicken\n\nChicken chicken chicken chicken chicken\nchicken chicken chicken chicken chicken\nchicken chicken chicken chicken chicken.\n\nChicken chicken chicken, chicken

// SUPPORT:73
EN Error
ZH Chicken

// SUPPORT:178
EN Don't display this message in the future
ZH Chi'chicken chicken chicken chicken chicken

// SUPPORT:282
EN No
ZH Ch

// SUPPORT:283
EN Yes
ZH Chi

// SUPPORT:284
EN Don't ask this question again
ZH Chi'chicken chicken chicken

// SUPPORT:1156
EN MEMMON: Undeclared memory block %08X
ZH CHICKEN: Chicken chicken chicken %08X

// SUPPORT:1160
EN MEMMON: Memfree()'ing block %08X allocated with Virtalloc()
ZH CHICKEN: Chicken()'chicken %08X chicken chicken chicken()

// SUPPORT:1164
EN MEMMON: Virtfree()'ing block %08X allocated with Memalloc()
ZH CHICKEN: Chicken()'chicken %08X chicken chicken chicken()

// SUPPORT:1168
EN MEMMON: Too short memory block %08X
ZH CHICKEN: Chicken chicken chicken %08X

// SUPPORT:1172
EN MEMMON: Corrupted memory block %08X
ZH CHICKEN: Chicken chicken chicken %08X

// SUPPORT:1193
EN MEMMON: OllyDbg memory monitoring active
ZH CHICKEN: Chicken chicken chicken chicken

// SUPPORT:1196
EN MEMMON: Unable to start memory monitoring
ZH CHICKEN: Chicken chicken chicken chicken

// SUPPORT:1242
EN MEMMON: %s memory addr=%08X size=%08X from %08X, %08X%s
ZH CHICKEN: %s chicken chicken=%08X chic=%08X chic %08X, %08X%s

// SUPPORT:1295
EN MEMMON: Too many memory blocks, monitoring is unreliable
ZH CHICKEN: Chicken chicken chicken, chicken chicken chicken

// SUPPORT:1893
EN <main>
ZH <chic>

// SUPPORT:1926
EN Current dir:
ZH Chicken chicken:

// SUPPORT:1954
EN Append to existing file
ZH Chicken chicken chicken

// SUPPORT:1955
EN Add available contents
ZH Chicken chicken chicken

// SUPPORT:1956
EN Separate columns with tabs
ZH Chicken chicken chicken

// SUPPORT:1967
EN Add to:
ZH Chicken:

// SUPPORT:1968
EN Group 1
ZH Chicken 1

// SUPPORT:1969
EN Group 2
ZH Chicken 2

// SUPPORT:1970
EN Group 3
ZH Chicken 3

// SUPPORT:1971
EN Group 4
ZH Chicken 4

// SUPPORT:1983
EN Stream:
ZH Chicken:

// SUPPORT:2215
EN Any file (*.*)
ZH Chicken (*.*)

// SUPPORT:2218
EN Executable file or DLL (*.exe,*.dll)
ZH Chicken chicken chicken (*.chi,*.chi)

// SUPPORT:2221
EN Executable, DLL or link (*.exe,*.dll,*.lnk)
ZH Chicken, Chicken chicken (*.chi,*.chi,*.chi)

// SUPPORT:2223
EN Executable file (*.exe)
ZH Chicken chicken (*.chi)

// SUPPORT:2225
EN Dynamic-link library (*.dll)
ZH Chicken-chicken chicken (*.chi)

// SUPPORT:2227
EN Desktop link (*.lnk)
ZH Chicken chicken (*.chi)

// SUPPORT:2230
EN Object file or library (*.obj,*.lib,*.o,*.a)
ZH Chicken chicken chicken (*.chi,*.chi,*.c,*.c)

// SUPPORT:2232
EN Object file (*.obj)
ZH Chicken chicken (*.chi)

// SUPPORT:2234
EN Import or object library (*.lib)
ZH Chicken chicken chicken (*.chi)

// SUPPORT:2237
EN Source (*.c,*.cpp,*.h,*.hpp,*.asm,*.pas)
ZH Chicken (*.c,*.chi,*.c,*.chi,*.chi,*.chi)

// SUPPORT:2239
EN C/C++ source (*.c,*.cpp)
ZH C/C++ chicken (*.c,*.chi)

// SUPPORT:2241
EN C source (*.c)
ZH Chicken (*.c)

// SUPPORT:2243
EN C++ source (*.cpp)
ZH C++ chicken (*.chi)

// SUPPORT:2245
EN Header file (*.h,*.hpp)
ZH Chicken chicken (*.c,*.chi)

// SUPPORT:2247
EN C Header file (*.h)
ZH Chicken chicken (*.c)

// SUPPORT:2249
EN C++ Header file (*.hpp)
ZH C++ Chicken chicken (*.chi)

// SUPPORT:2251
EN Assembler source (*.asm)
ZH Chicken chicken (*.chi)

// SUPPORT:2253
EN Delphi/Pascal source (*.pas)
ZH Chicken/Chicken chicken (*.chi)

// SUPPORT:2255
EN Text file (*.txt)
ZH Chicken (*.chi)

// SUPPORT:2257
EN Backup file (*.bak)
ZH Chicken chicken (*.chi)

// SUPPORT:2259
EN Argument descriptions (*.arg)
ZH Chicken chicken chicken (*.chi)

// SUPPORT:2261
EN Help file (*.hlp,*.chm)
ZH Chicken (*.chi,*.chi)

// SUPPORT:2263
EN Binary file (*.bin)
ZH Chicken chicken (*.chi)

// SUPPORT:2265
EN User data file (*.udd)
ZH Chicken chicken (*.chi)

// SUPPORT:2267
EN User image library (*.udl)
ZH Chicken chicken (*.chi)

// SUPPORT:2269
EN Initialization file (*.ini)
ZH Chicken chicken chicken (*.chi)

// SUPPORT:2271
EN %.64s file (%.64s)
ZH %.64s chic (%.64s)

// SUPPORT:2493
EN File '%s' is system or read-only. Please try another name.
ZH Chic '%s' chicken chicken-chic. Chicken chicken chicken.

// SUPPORT:2497
EN File '%s' already exists. Do you want to overwrite it?
ZH Chic '%s' chicken chicken. Chicken chicken chicken chicken?

// SUPPORT:2498
EN File exists
ZH Chicken chicken

// SUPPORT:2917
EN Timer %i: %.3lf s, %7i calls (%.3lf us/call)
ZH Chicken %i: %.3lf c, %7i chicken (%.3lf ch/chic)

// TABLE:718
EN ATTENTION, snow-free drawing is not possible!
ZH CHICKEN, chic-chicken chicken chicken chicken!

// TABLE:2792
EN Unnamed table
ZH Chicken chicken

// TABLE:2793
EN , item %i
ZH , chic %i

// TABLE:3259
EN Whole line
ZH Chicken

// TABLE:3260
EN Copy selected line to clipboard
ZH Chicken chicken chicken chicken

// TABLE:3262
EN Whole table
ZH Chicken chicken

// TABLE:3263
EN Copy whole table to clipboard, preserving column widths
ZH Chicken chicken chicken chicken, chicken chicken chicken

// TABLE:3266
EN Copy selected item in  named column to clipboard
ZH Chicken chicken chicken chicken chicken chicken

// TABLE:3322
EN Select sorting criterium
ZH Chicken chicken chicken

// TABLE:3357
EN Select font
ZH Chicken chicken

// TABLE:3386
EN Select colour scheme
ZH Chicken chicken chicken

// TABLE:3418
EN Select highlighting scheme
ZH Chicken chicken chicken

// TABLE:3443
EN Always on top
ZH Chicken chicken

// TABLE:3444
EN Make this MDI window topmost
ZH Chicken chicken chicken chicken

// TABLE:3447
EN Make this window topmost
ZH Chicken chicken chicken

// TABLE:3449
EN Autoupdate
ZH Chicken

// TABLE:3450
EN Periodically update the contents of the window
ZH Chicken chicken chicken chicken chicken chicken

// TABLE:3452
EN Hide bar
ZH Chicken

// TABLE:3453
EN Hide bar with column names on the top of the table
ZH Chicken chicken chicken chicken chicken chicken

// TABLE:3455
EN Show bar
ZH Chicken

// TABLE:3456
EN Display bar with column names on the top of the table
ZH Chicken chicken chicken chicken chicken chicken chicken

// TABLE:3458
EN Hide horizontal scroll
ZH Chicken chicken chicken

// TABLE:3459
EN Hide horizontal scrollbar
ZH Chicken chicken chicken

// TABLE:3461
EN Show horizontal scroll
ZH Chicken chicken chicken

// TABLE:3462
EN Show horizontal scrollbar
ZH Chicken chicken chicken

// TABLE:3464
EN Default columns
ZH Chicken chicken

// TABLE:3467
EN Font
ZH Chic

// TABLE:3473
EN Highlighting
ZH Chicken chicken

// TABLE:3483
EN Sort by
ZH Chicken

// TABLE:3487
EN Appearance, fonts, colours...
ZH Chicken, chicken, chicken...

// TABLE:3494
EN Copy the whole table to clipboard
ZH Chicken chicken chicken chicken

// THREADS:69
EN NULL thread
ZH Chicken chicken

// THREADS:70
EN NULL
ZH CHIC

// THREADS:78
EN Main thread
ZH Chicken chicken

// THREADS:78
EN main thread
ZH chicken chicken

// THREADS:80
EN Main
ZH Chic

// THREADS:80
EN main
ZH chic

// THREADS:85
EN .NET helper thread
ZH .Chicken chicken

// THREADS:87
EN Temporary thread
ZH Chicken chicken

// THREADS:87
EN temporary thread
ZH chicken chicken

// THREADS:89
EN thread
ZH chicken

// THREADS:280
EN Unable to suspend thread
ZH Chicken chicken chicken

// THREADS:300
EN Unable to resume thread
ZH Chicken chicken chicken

// THREADS:341
EN Thread Information Block of
ZH Chicken chicken chicken chicken

// THREADS:406
EN You are going to kill the last thread in the debugged application. The application will close. All unsaved information will be lost and loaded DLLs will receive no notification. Kill thread anyway?
ZH Chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// THREADS:410
EN You are going to kill internal .NET debugging helper thread. You will be unable to continue debugging, and the application may crash. Kill thread anyway?
ZH Chicken chicken chicken chicken .Chicken chicken chicken chicken. Chicken chicken chicken chicken chicken, chicken chicken chicken chicken. Chicken chicken?

// THREADS:415
EN You are going to kill main thread of debugged application. In most cases, this will make application unusable. Also note that all unsaved information in this thread will be lost and loaded DLLs will receive no notification. Kill thread anyway?
ZH Chicken chicken chicken chicken chicken chicken chicken. Chicken chicken, chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// THREADS:419
EN You are going to kill thread %08X. All unsaved information in this thread will be lost and loaded DLLs will receive no notification. Kill thread anyway?
ZH Chicken chicken chicken chicken %08X. Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// THREADS:420
EN About to kill the thread
ZH Chicken chicken chicken

// THREADS:446
EN You are going to assign time-critical priority to
ZH Chicken chicken chicken chicken-chicken chicken chicken

// THREADS:450
EN . In some cases this may slow down or practically stop OllyDbg and other applications. Continue anyway?
ZH . Chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken?

// THREADS:452
EN About to assign time-critical priority to thread
ZH Chicken chicken chicken-chicken chicken chicken chicken

// THREADS:456
EN Unable to change priority
ZH Chicken chicken chicken

// THREADS:462
EN Idle
ZH Chic

// THREADS:463
EN Change priority of selected thread to idle
ZH Chicken chicken chicken chicken chicken

// THREADS:465
EN Lowest
ZH Chicken

// THREADS:466
EN Change priority of selected thread to lowest
ZH Chicken chicken chicken chicken chicken chicken

// THREADS:468
EN Low
ZH Chi

// THREADS:469
EN Change priority of selected thread to low
ZH Chicken chicken chicken chicken chicken

// THREADS:472
EN Change priority of selected thread to normal
ZH Chicken chicken chicken chicken chicken chicken

// THREADS:475
EN Change priority of selected thread to high
ZH Chicken chicken chicken chicken chicken

// THREADS:477
EN Highest
ZH Chicken

// THREADS:478
EN Change priority of selected thread to highest
ZH Chicken chicken chicken chicken chicken chicken

// THREADS:480
EN Time critical
ZH Chicken chicken

// THREADS:481
EN Change priority of selected thread to time critical
ZH Chicken chicken chicken chicken chicken chicken chicken

// THREADS:488
EN Update contents of Threads window
ZH Chicken chicken chicken chicken

// THREADS:490
EN &Open in CPU
ZH &Chicken chicken

// THREADS:493
EN &Dump TIB
ZH &Chicken

// THREADS:496
EN Show registers
ZH Chicken chicken

// THREADS:497
EN Show thread's registers in standalone window
ZH Chicken chicken'chicken chicken chicken chicken

// THREADS:499
EN Set symbolic name
ZH Chicken chicken

// THREADS:500
EN Assign symbolic name to selected thread
ZH Chicken chicken chicken chicken chicken

// THREADS:502
EN &Suspend
ZH &Chicken

// THREADS:503
EN Suspend selected thread
ZH Chicken chicken chicken

// THREADS:505
EN &Resume
ZH &Chicken

// THREADS:506
EN Resume suspended thread
ZH Chicken chicken chicken

// THREADS:508
EN Set &priority
ZH Chi &chicken

// THREADS:509
EN Change priority of selected thread
ZH Chicken chicken chicken chicken

// THREADS:511
EN &Kill
ZH &Chic

// THREADS:512
EN Kill selected thread
ZH Chicken chicken chicken

// THREADS:583
EN Debug
ZH Chicken

// THREADS:585
EN Temp
ZH Chic

// THREADS:645
EN %4i.%04i s
ZH %4i.%04i c

// THREADS:683
EN Ord
ZH Chi

// THREADS:684
EN Decimal sequential number of thread in process
ZH Chicken chicken chicken chicken chicken chicken

// THREADS:687
EN Ident
ZH Chicken

// THREADS:689
EN Name (if present) and unique system-wide identifier of the thread
ZH Chic (chicken) chicken chicken-chicken chicken chicken chicken

// THREADS:692
EN Window's title
ZH Chicken'chicken

// THREADS:694
EN Title of one of the top-level windows owned by thread
ZH Chicken chicken chicken-chicken chicken chicken chicken

// THREADS:697
EN Last error
ZH Chicken

// THREADS:698
EN Last error, as returned by GetLastError()
ZH Chicken, chicken chicken chicken chicken()

// THREADS:702
EN Address of thread's entry point
ZH Chicken chicken'chicken chicken

// THREADS:705
EN TIB
ZH CHI

// THREADS:706
EN Address of Thread Information Block
ZH Chicken chicken chicken chicken chicken

// THREADS:709
EN Suspend
ZH Chicken

// THREADS:710
EN Suspend count of the thread
ZH Chicken chicken chicken chicken

// THREADS:713
EN Priority
ZH Chicken

// THREADS:715
EN Current thread's priority (relative to priority class of the process)
ZH Chicken chicken'chicken (chicken chicken chicken chicken chicken)

// THREADS:718
EN User time
ZH Chicken

// THREADS:719
EN CPU time spent by thread in user mode
ZH Chicken chicken chicken chicken chicken

// THREADS:722
EN System time
ZH Chicken chicken

// THREADS:723
EN CPU time spent by thread in system mode
ZH Chicken chicken chicken chicken chicken

// TRACE:165
EN Unable to allocate memory for run trace buffer
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:465
EN Too many ranges to protocol
ZH Chicken chicken chicken chicken

// TRACE:646
EN Referenced memory (decoded)
ZH Chicken chicken (chicken)

// TRACE:647
EN Contents of memory preceding command execution
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:649
EN Referenced memory (raw)
ZH Chicken chicken (chi)

// TRACE:653
EN Registers modified by command
ZH Chicken chicken chicken chicken

// TRACE:654
EN List of registers modified by the command
ZH Chicken chicken chicken chicken chicken

// TRACE:656
EN Registers preceding command execution
ZH Chicken chicken chicken chicken chicken

// TRACE:657
EN List of registers at the moment of execution
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:812
EN Enter expression to mark
ZH Chicken chicken chicken

// TRACE:847
EN Mark not found
ZH Chicken chicken

// TRACE:900
EN Select file for the run trace data
ZH Chicken chicken chicken chicken

// TRACE:908
EN Unable to open run trace log file '%s'
ZH Chicken chicken chicken chicken '%s'

// TRACE:923
EN Saving existing run trace data - $%%
ZH Chicken chicken chicken chicken - $%%

// TRACE:971
EN Highlight operands that use ESP (stack pointer) or SP
ZH Chicken chicken chicken chicken (chicken chicken) chicken

// TRACE:974
EN Highlight operands that use EBP (frame pointer) or BP
ZH Chicken chicken chicken chicken (chicken chicken) chicken

// TRACE:986
EN Decoded
ZH Chicken

// TRACE:987
EN Decode memory contents
ZH Chicken chicken chicken

// TRACE:989
EN Raw
ZH Chi

// TRACE:990
EN Display raw memory contents
ZH Chicken chicken chicken chicken

// TRACE:997
EN Show registers modified by command
ZH Chicken chicken chicken chicken

// TRACE:999
EN All
ZH Chi

// TRACE:1000
EN Show registers at the moment of execution
ZH Chicken chicken chicken chicken chicken

// TRACE:1016
EN Follow destination in CPU window
ZH Chicken chicken chicken chicken

// TRACE:1019
EN Delete all run trace records
ZH Chicken chicken chicken chicken

// TRACE:1021
EN Show memory
ZH Chicken chicken

// TRACE:1022
EN Decoding mode for the protocolled memory contents
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:1025
EN Show all registers or only modified
ZH Chicken chicken chicken chicken chicken

// TRACE:1030
EN Mark selected address
ZH Chicken chicken chicken

// TRACE:1031
EN Mark all appearances of the selected address
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:1033
EN Find address...
ZH Chicken chicken...

// TRACE:1034
EN Enter address to find and mark
ZH Chicken chicken chicken chicken

// TRACE:1036
EN Find previous mark
ZH Chicken chicken

// TRACE:1037
EN Find previous marked address in the run trace
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:1039
EN Find next mark
ZH Chicken chicken

// TRACE:1040
EN Find next marked address in the run trace
ZH Chicken chicken chicken chicken chicken

// TRACE:1042
EN Clear marks
ZH Chicken chicken

// TRACE:1043
EN Clear address marks
ZH Chicken chicken chicken

// TRACE:1046
EN Show profile for the module the selected command belongs to
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// TRACE:1048
EN Global profile
ZH Chicken chicken

// TRACE:1049
EN Show profile for the whole memory
ZH Chicken chicken chicken chicken

// TRACE:1205
EN Turned off
ZH Chicken

// TRACE:1355
EN Back
ZH Chic

// TRACE:1356
EN Backward index of the command in the run trace
ZH Chicken chicken chicken chicken chicken chicken

// TRACE:1360
EN Thread in which the command was executed
ZH Chicken chicken chicken chicken chicken

// TRACE:1364
EN Module to which the command belongs
ZH Chicken chicken chicken chicken chicken

// TRACE:1368
EN Address of the command
ZH Chicken chicken chicken

// TRACE:1415
EN Run trace (protocolling filter is active)
ZH Chicken (chicken chicken chicken chicken)

// TRACE:1525
EN Profiling - $%%
ZH Chicken - $%%

// TRACE:1555
EN Incomplete profile
ZH Chicken chicken

// TRACE:1761
EN Update contents of Profile window
ZH Chicken chicken chicken chicken

// TRACE:1773
EN Mark all appearances of the selected address in the run trace
ZH Chicken chicken chicken chicken chicken chicken chicken chicken

// TRACE:1776
EN Clear address marks in the run trace
ZH Chicken chicken chicken chicken chicken

// TRACE:1833
EN Count
ZH Chicken

// TRACE:1834
EN Number of registered hits
ZH Chicken chicken chicken

// TRACE:1867
EN Profile of
ZH Chicken

// UDD:183
EN Select .udd file
ZH Chicken .chicken

// UDD:203
EN Saving .udd data for '%s'
ZH Chicken .chicken chicken '%s'

// UDD:738
EN Invalid or missing file '%s'
ZH Chicken chicken chicken '%s'

// UDD:741
EN Module '%s' - loading .udd data
ZH Chicken '%s' - chicken .chicken

// UDD:744
EN Module '%s' - reloading .udd data
ZH Chicken '%s' - chicken .chicken

// UDD:792
EN Modified executable
ZH Chicken chicken chicken

// UDD:796
EN Length of file '%s' differs from that specified in .udd file. Old breakpoints, labels and comments are probably no longer valid. Do you want to use old data from the .udd file?
ZH Chicken chicken '%s' chicken chicken chicken chicken .chicken. Chicken chicken, chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken .chicken?

// UDD:839
EN File '%s' was modified since last debugging session. It may happen that analysis data, breakpoints, labels and comments no longer apply. Do you want to use old data saved in the .udd file?
ZH Chic '%s' chicken chicken chicken chicken chicken. Chicken chicken chicken chicken, chicken chicken, chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken .chicken?

// UDD:1344
EN Corrupted breakpoints
ZH Chicken chicken chicken

// UDD:1351
EN Module '%s' contains corrupted breakpoints, where the first byte of the current command differs from that in the previous debugging session. This happens when program was recompiled, the code is self-modifiable (for example, self-extracting) or when breakpoint was set on the patched code.\n\nFor security reasons, OllyDbg will disable suspicious INT3 breakpoints. You can re-enable them in the Breakpoints window.
ZH Chicken '%s' chicken chicken chicken chicken, chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken chicken. Chicken chicken chicken chicken chicken, chicken chicken-chicken (chicken chicken, chic-chicken) chicken chicken chicken chicken chicken chicken.\n\nChicken chicken chicken, Chicken chicken chicken chicken chicken3 chicken chicken. Chicken-chicken chicken chicken chicken chicken.

// UDD:1356
EN Error in '%s', analysis data for module %s is incomplete (record %08X)
ZH Chicken '%s', chicken chicken chicken %s chicken chicken (chicken %08X)

// WATCHES:132
EN Edit watch expression
ZH Chicken chicken chicken

// WATCHES:134
EN Enter new watch expression
ZH Chicken chicken chicken

// WATCHES:255
EN Edit byte at
ZH Chicken chicken

// WATCHES:258
EN Edit word at
ZH Chicken chicken

// WATCHES:261
EN Edit dword at
ZH Chicken chicken

// WATCHES:264
EN Edit 32-bit float at
ZH Chic 32-chicken chicken

// WATCHES:267
EN Edit 64-bit float at
ZH Chic 64-chicken chicken

// WATCHES:270
EN Edit 80-bit float at
ZH Chic 80-chicken chicken

// WATCHES:273
EN Edit selector at
ZH Chicken chicken

// WATCHES:276
EN Edit ASCII string at
ZH Chicken chicken chicken

// WATCHES:279
EN Edit UNICODE string at
ZH Chicken chicken chicken

// WATCHES:368
EN Update contents of Watch window
ZH Chicken chicken chicken chicken

// WATCHES:370
EN &Insert watch...
ZH &Chicken chicken...

// WATCHES:371
EN Insert new watch expression before selected
ZH Chicken chicken chicken chicken chicken chicken

// WATCHES:373
EN &Add watch...
ZH &Chicken...

// WATCHES:374
EN Add new watch expression
ZH Chicken chicken chicken

// WATCHES:376
EN &Edit watch...
ZH &Chicken...

// WATCHES:379
EN &Delete watch
ZH &Chicken chicken

// WATCHES:380
EN Delete watch expression
ZH Chicken chicken chicken

// WATCHES:382
EN Move up
ZH Chicken

// WATCHES:385
EN Move down
ZH Chicken

// WATCHES:388
EN Edit value...
ZH Chicken...

// WATCHES:392
EN Follow value in CPU Disassembler pane
ZH Chicken chicken chicken chicken chicken

// WATCHES:395
EN Follow value in CPU Dump pane
ZH Chicken chicken chicken chicken

// WATCHES:398
EN Follow value in CPU Stack pane
ZH Chicken chicken chicken chicken

// WATCHES:482
EN Expression
ZH Chicken

// WATCHES:483
EN Expression to evaluate
ZH Chicken chicken chicken

// WATCHES:487
EN Value of expression
ZH Chicken chicken chicken

// WINDOWS:504
EN Update contents of the list of windows
ZH Chicken chicken chicken chicken chicken

// WINDOWS:506
EN Follow WinProc
ZH Chicken chicken

// WINDOWS:507
EN Follow WinProc in Disassembler
ZH Chicken chicken chicken chicken

// WINDOWS:509
EN Breakpoint on WinProc
ZH Chicken chicken chicken

// WINDOWS:510
EN Set unconditional breakpoint on WinProc
ZH Chicken chicken chicken chicken chicken

// WINDOWS:513
EN Set or edit conditional breakpoint on WinProc
ZH Chicken chicken chicken chicken chicken chicken

// WINDOWS:516
EN Set or edit conditional logging breakpoint on WinProc
ZH Chicken chicken chicken chicken chicken chicken chicken

// WINDOWS:519
EN Remove breakpoint from WinProc
ZH Chicken chicken chicken chicken

// WINDOWS:521
EN Follow ClassProc
ZH Chicken chicken

// WINDOWS:522
EN Follow ClassProc in Disassembler
ZH Chicken chicken chicken chicken

// WINDOWS:524
EN Breakpoint on ClassProc
ZH Chicken chicken chicken

// WINDOWS:525
EN Set unconditional breakpoint on ClassProc
ZH Chicken chicken chicken chicken chicken

// WINDOWS:528
EN Set or edit conditional breakpoint on ClassProc
ZH Chicken chicken chicken chicken chicken chicken

// WINDOWS:531
EN Set or edit conditional logging breakpoint on ClassProc
ZH Chicken chicken chicken chicken chicken chicken chicken

// WINDOWS:534
EN Remove breakpoint from ClassProc
ZH Chicken chicken chicken chicken

// WINDOWS:582
EN Topmost
ZH Chicken

// WINDOWS:584
EN Desktop
ZH Chicken

// WINDOWS:606
EN %08X (menu)
ZH %08X (chic)

// WINDOWS:689
EN (menu)
ZH (chic)

// WINDOWS:691
EN (desktop window)
ZH (chicken chicken)

// WINDOWS:693
EN (dialog box)
ZH (chicken)

// WINDOWS:695
EN (task switch window)
ZH (chicken chicken)

// WINDOWS:732
EN Window's handle
ZH Chicken'chicken

// WINDOWS:736
EN Window's title or text
ZH Chicken'chicken chicken

// WINDOWS:739
EN Parent
ZH Chicken

// WINDOWS:740
EN Handle of parent window
ZH Chicken chicken chicken

// WINDOWS:743
EN WinProc
ZH Chicken

// WINDOWS:744
EN Address of window callback function
ZH Chicken chicken chicken chicken chicken

// WINDOWS:747
EN ID/menu
ZH CH/chic

// WINDOWS:748
EN Identifier of child window or menu handle
ZH Chicken chicken chicken chicken chicken

// WINDOWS:752
EN Window type (ASCII or UNICODE)
ZH Chicken chicken (Chicken chicken)

// WINDOWS:755
EN Style
ZH Chicken

// WINDOWS:756
EN Window style, set of WS_xxx
ZH Chicken chicken, chicken chicken

// WINDOWS:759
EN ExtStyle
ZH Chicken

// WINDOWS:760
EN Extended style, set of WS_EX_xxx
ZH Chicken chicken, chicken chicken

// WINDOWS:764
EN ID of thread that owns the window
ZH Chicken chicken chicken chicken

// WINDOWS:767
EN ClsProc
ZH Chicken

// WINDOWS:768
EN Address of default (class) window function
ZH Chicken chicken (chicken) chicken chicken

// WINDOWS:771
EN ClsName
ZH Chicken

// WINDOWS:772
EN Class name
ZH Chicken
